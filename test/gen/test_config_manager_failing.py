# Automatically generated by Pynguin.
import config_manager as module0


def test_case_0():
    try:
        var0 = 'K7UbH\r2AYr'
        var1 = {}
        var2 = module0.BaseJSONConfigManager(**var1)
        assert var2 is not None
        var3 = [var2, var2, var1, var2]
        var4 = {var2: var1}
        var5 = module0.recursive_update(var4, var4)
    except BaseException:
        pass


def test_case_1():
    try:
        var0 = 'K7UbH\r2AYr'
        var1 = {var0: var0}
        var2 = module0.BaseJSONConfigManager(**var1)
        assert var2 is not None
        var3 = [var2, var2, var1, var2]
        var4 = {var2: var1}
        var5 = module0.recursive_update(var4, var4)
        assert var5 is None
        var6 = None
        var7 = module0.BaseJSONConfigManager()
        assert var7 is not None
        var8 = var7.file_name(var6)
    except BaseException:
        pass


def test_case_2():
    try:
        var0 = 'K,EbH\r2AYr'
        var1 = {var0: var0}
        var2 = module0.BaseJSONConfigManager(**var1)
        assert var2 is not None
        var3 = [var2, var2, var1, var2]
        var4 = module0.BaseJSONConfigManager()
        assert var4 is not None
        var5 = {var4: var1, var0: var3, var0: var3}
        var6 = module0.recursive_update(var3, var5)
    except BaseException:
        pass


def test_case_3():
    try:
        var0 = True
        var1 = 'J\\ M(r6CC=9~'
        var2 = 'zm\rig:H'
        var3 = -2002.0
        var4 = -2516
        var5 = module0.BaseJSONConfigManager()
        assert var5 is not None
        var6 = var5.get(var4)
    except BaseException:
        pass


def test_case_4():
    try:
        var0 = 'http_pwd'
        var1 = b'\x11*\xedU\x03\x9c'
        var2 = 'The base name used when creating untitled files.'
        var3 = 'xoVz\tL7%?Q'
        var4 = {var3}
        var5 = '\\~e.\rl*b;'
        var6 = {}
        var7 = module0.BaseJSONConfigManager()
        assert var7 is not None
        var8 = var7.set(var5, var6)
        assert var8 is None
        var9 = False
        var10 = {var2: var2, var3: var2, var2: var4}
        var11 = module0.BaseJSONConfigManager(**var10)
        assert var11 is not None
        var12 = var11.set(var0, var1)
    except BaseException:
        pass


def test_case_5():
    try:
        var0 = 'http_pwd'
        var1 = 'The base nameKused when creating untitled files.'
        var2 = 'xoVz\tE7\r?Q'
        var3 = 30.0
        var4 = 445
        var5 = {var1, var2}
        var6 = 'k}h'
        var7 = {var6: var0}
        var8 = module0.BaseJSONConfigManager(**var7)
        assert var8 is not None
        var9 = module0.BaseJSONConfigManager()
        assert var9 is not None
        var10 = var9.directory(var8)
    except BaseException:
        pass


def test_case_6():
    try:
        var0 = 'http_pwd'
        var1 = 'The base nameKused wEen creating untitled files.'
        var2 = 'xoVz\t E7\r?Q'
        var3 = 30.0
        var4 = {var3: var2}
        var5 = {var3: var1}
        var6 = module0.remove_defaults(var4, var5)
        assert var6 is None
        var7 = 429
        var8 = {var1, var2}
        var9 = 'k}h'
        var10 = {var9: var0}
        var11 = module0.BaseJSONConfigManager(**var10)
        assert var11 is not None
        var12 = module0.BaseJSONConfigManager()
        assert var12 is not None
        var13 = var12.directory(var11)
    except BaseException:
        pass


def test_case_7():
    try:
        var0 = 'bG7Em-t2q'
        var1 = {var0: var0, var0: var0}
        var2 = '=/.X;Y{Y;5r,Nd0[m'
        var3 = module0.BaseJSONConfigManager()
        assert var3 is not None
        var4 = var3.file_name(var2)
        assert var4 == './=/.X;Y{Y;5r,Nd0[m.json'
        var5 = var3.ensure_config_dir_exists()
        assert var5 is None
        var6 = module0.BaseJSONConfigManager(**var1)
        assert var6 is not None
        var7 = var6.file_name(var2)
        assert var7 == './=/.X;Y{Y;5r,Nd0[m.json'
        var8 = -1540.427138
        var9 = -3003
        var10 = var6.update(var0, var9)
    except BaseException:
        pass


def test_case_8():
    try:
        var0 = 'bG7Em-t2q'
        var1 = {var0: var0, var0: var0}
        var2 = '=/.X;Y{Y;5r,Nd0[m'
        var3 = module0.BaseJSONConfigManager()
        assert var3 is not None
        var4 = var3.file_name(var2)
        assert var4 == './=/.X;Y{Y;5r,Nd0[m.json'
        var5 = var3.ensure_config_dir_exists()
        assert var5 is None
        var6 = module0.BaseJSONConfigManager(**var1)
        assert var6 is not None
        var7 = var6.file_name(var2)
        assert var7 == './=/.X;Y{Y;5r,Nd0[m.json'
        var8 = -1540.427138
        var9 = -3003
        var10 = var6.update(var0, var9)
    except BaseException:
        pass


def test_case_9():
    try:
        var0 = module0.BaseJSONConfigManager()
        assert var0 is not None
        var1 = False
        var2 = "v<7FYtj\x0c('y!4"
        var3 = var0.get(var2)
        assert var3 is not None
        var4 = var0.get(var1)
    except BaseException:
        pass


def test_case_10():
    try:
        var0 = '-;!z^(N40$\r#'
        var1 = module0.recursive_update(var0, var0)
    except BaseException:
        pass


def test_case_11():
    try:
        var0 = 'oR2D5A|\r9"lY83N'
        var1 = {var0: var0, var0: var0, var0: var0, var0: var0}
        var2 = module0.remove_defaults(var1, var1)
        assert var2 is None
        var3 = {var0: var0, var0: var0, var2: var1, var0: var2, var0: var0}
        var4 = module0.remove_defaults(var3, var3)
        assert var4 is None
        var5 = '`0ydP}j\x0c\\\nX[u}'
        var6 = module0.remove_defaults(var0, var5)
    except BaseException:
        pass


def test_case_12():
    try:
        var0 = 'oR2D5A|\r9"Yt3N'
        var1 = {var0: var0, var0: var0, var0: var0, var0: var0}
        var2 = module0.remove_defaults(var1, var1)
        assert var2 is None
        var3 = {var0: var0, var0: var0, var2: var1, var0: var0}
        var4 = module0.remove_defaults(var3, var3)
        assert var4 is None
        var5 = 'nbconfi'
        var6 = '`0ydPj\x0c\\\n[u}'
        var7 = module0.remove_defaults(var5, var6)
    except BaseException:
        pass


def test_case_13():
    try:
        var0 = module0.BaseJSONConfigManager()
        assert var0 is not None
        var1 = var0.ensure_config_dir_exists()
        assert var1 is None
        var2 = None
        var3 = '&I|er=e7`s^\x0c\'"f('
        var4 = {var2: var3, var2: var1, var1: var1, var0: var2}
        var5 = var0.update(var3, var4)
        assert var5 is not None
        var6 = var0.get(var3)
        assert var6 is not None
        var7 = 30.0
        var8 = var7, var4
        var9 = [var8, var8]
        var10 = var0.file_name(var9)
    except BaseException:
        pass


def test_case_14():
    try:
        var0 = b'\xa4\xf9\xdc\xbe)\x17YOW[.\xfd\xf7\x1f'
        var1 = None
        var2 = module0.BaseJSONConfigManager(**var1)
    except BaseException:
        pass
