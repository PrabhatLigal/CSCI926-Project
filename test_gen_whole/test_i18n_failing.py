# Automatically generated by Pynguin.
from notebook import i18n as module0


def test_case_0():
    try:
        var0 = 567.83
        var1 = [var0]
        var2 = ",['vfx2-R)Sf"
        var3 = """Nudge the zmq connections with kernel_info_requests

        Returns a uture that will resolve when we have received
        a shell reply and at least one iopub message,
       ensuring that zmq subscriptions are established,
        sockets are fully connected, and kernel is responsive.

        Keeps retrying kernel_info_request until these are both received.
        """
        var4 = module0.load(var3)
    except BaseException:
        pass


def test_case_1():
    try:
        var0 = '4:oB:l\tl=&0nQj]"'
        var1 = 1427.0
        var2 = module0.parse_accept_lang_header(var1)
    except BaseException:
        pass


def test_case_2():
    try:
        var0 = -5429
        var1 = -517
        var2 = module0.cached_load(var1)
    except BaseException:
        pass


def test_case_3():
    try:
        var0 = 'The'
        var1 = module0.parse_accept_lang_header(var0)
        assert var1 is not None
        var2 = set()
        var3 = False
        var4 = b'q\xc0Q\xd8jx\xd4}\n\x80\xbfI\xc7'
        var5 = module0.parse_accept_lang_header(var4)
    except BaseException:
        pass


def test_case_4():
    try:
        var0 = 1887
        var1 = b'\x96'
        var2 = """
    A Checkpoints that caches checkpoints for files in adjacent
    directories.

    Only works with FileContentsManager.  Use GenericFileCheckpoits if
    you want file-based checkpoints with another ContentsManager.
    """
        var3 = 'e'
        var4 = module0.combine_translations(var3)
        assert var4 is not None
        var5 = var0, var1, var2
        var6 = ()
        var7 = b'\xd0\xdf\xb28\xb6\x9ewF\xd8_\x04\xb0\xf1'
        var8 = module0.parse_accept_lang_header(var7)
    except BaseException:
        pass


def test_case_5():
    try:
        var0 = 'ost-sve hook failed o-n %s'
        var1 = module0.combine_translations(var0)
        assert var1 is not None
        var2 = module0.combine_translations(var0)
        assert var2 is not None
        var3 = None
        var4 = False
        var5 = True
        var6 = {var3, var3, var5}
        var7 = module0.cached_load(var6)
    except BaseException:
        pass


def test_case_6():
    try:
        var0 = b'\x859\xf4i!i\xcaRK\x89\\\xf9'
        var1 = "Couldn't authenticate WebSocket connection"
        var2 = {var1: var1}
        var3 = {var2: var2}
    except BaseException:
        pass


def test_case_7():
    try:
        var0 = ''
        var1 = module0.combine_translations(var0)
        assert var1 is not None
        var2 = ()
        var3 = {var0: var2, var2: var1, var0: var2, var2: var1}
        var4 = module0.load(var3)
    except BaseException:
        pass


def test_case_8():
    try:
        var0 = 'ec-Websocket-Origi;n'
        var1 = module0.parse_accept_lang_header(var0)
        assert var1 is not None
        var2 = True
        var3 = [var2, var2, var2, var2]
        var4 = False
        var5 = [var3, var4]
        var6 = module0.cached_load(var5)
    except BaseException:
        pass


def test_case_9():
    try:
        var0 = False
        var1 = 'en'
        var2 = ()
        var3 = module0.combine_translations(var1, var2)
        assert var3 is not None
        var4 = {var0: var0, var0: var0, var0: var0}
        var5 = module0.combine_translations(var4)
    except BaseException:
        pass
