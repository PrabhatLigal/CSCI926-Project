# Automatically generated by Pynguin.
from notebook import _tz as module0
# from ..notebook.notebook import _tz as module0

def test_case_0():
    try:
        var0 = 'n*E#`\x0cLqL'
        var1 = 'lW.\x0b}rJwYFV)J6k'
        var2 = "L%~~Sb%y[Ok_'"
        var3 = ']K5?[]*-!.ZuI1k)`{'
        var4 = {var0: var1, var2: var1, var1: var1, var2: var3}
        var5 = module0.utc_method(**var4)
    except BaseException:
        pass


def test_case_1():
    try:
        var0 = b'\xaa\xf6\x1f^'
        var1 = [var0, var0]
        var2 = 'base_url'
        var3 = 'vs_l2:s\\'
        var4 = {var2: var2, var2: var0, var3: var2}
        var5 = module0.utc_method(*var1, **var4)
    except BaseException:
        pass


def test_case_2():
    try:
        var0 = []
        var1 = module0.utc_method(*var0)
    except BaseException:
        pass


def test_case_3():
    try:
        var0 = module0.utc_method()
    except BaseException:
        pass


def test_case_4():
    try:
        var0 = module0.utc_method()
    except BaseException:
        pass


def test_case_5():
    try:
        var0 = -2019
        var1 = None
        var2 = [var1]
        var3 = module0.tzUTC(*var2)
        assert var3 is not None
        var4 = var3.dst(var0)
        assert var4 is not None
        var5 = module0.tzUTC()
        assert var5 is not None
        var6 = -2019
        var7 = None
        var8 = [var7]
        var9 = module0.tzUTC(*var8)
        assert var9 is not None
        var10 = var9.dst(var6)
        assert var10 is not None
        var11 = module0.utc_method(*var8)
    except BaseException:
        pass


def test_case_6():
    try:
        var0 = module0.tzUTC()
        assert var0 is not None
        var1 = -2019
        var2 = None
        var3 = [var2]
        var4 = module0.tzUTC(*var3)
        assert var4 is not None
        var5 = var4.dst(var1)
        assert var5 is not None
        var6 = -2019
        var7 = None
        var8 = [var7]
        var9 = module0.tzUTC(*var8)
        assert var9 is not None
        var10 = var9.dst(var6)
        assert var10 is not None
        var11 = module0.tzUTC()
        assert var11 is not None
        var12 = module0.utc_method(*var3)
    except BaseException:
        pass


def test_case_7():
    try:
        var0 = -2019
        var1 = None
        var2 = [var1]
        var3 = module0.tzUTC(*var2)
        assert var3 is not None
        var4 = var3.dst(var0)
        assert var4 is not None
        var5 = module0.utc_method()
    except BaseException:
        pass


def test_case_8():
    try:
        var0 = set()
        var1 = {var0, var0, var0, var0}
    except BaseException:
        pass


def test_case_9():
    try:
        var0 = -416
        var1 = {var0, var0}
        var2 = [var1, var0]
        var3 = b'7\r\xbf\xc5\x83P\xd2\x1fZ8\x1e\xf8 \xb1@\xe4kg'
        var4 = [var3, var3, var3]
        var5 = module0.tzUTC(*var4)
        assert var5 is not None
        var6 = var5.dst(var2)
        assert var6 is not None
        var7 = False
        var8 = module0.isoformat(var7)
    except BaseException:
        pass


def test_case_10():
    try:
        var0 = -2019
        var1 = None
        var2 = [var1]
        var3 = module0.tzUTC(*var2)
        assert var3 is not None
        var4 = var3.dst(var0)
        assert var4 is not None
        var5 = module0.tzUTC()
        assert var5 is not None
        var6 = module0.tzUTC()
        assert var6 is not None
        var7 = -2019
        var8 = None
        var9 = [var8]
        var10 = module0.tzUTC(*var9)
        assert var10 is not None
        var11 = var10.dst(var7)
        assert var11 is not None
        var12 = module0.tzUTC()
        assert var12 is not None
        var13 = {var11, var12}
        var14 = module0.utc_aware(var13)
        assert var14 is not None
        var15 = -416
        var16 = {var15, var15}
        var17 = [var16, var15]
        var18 = b'7\r\xbf\xc5\x83P\xd2\x1fZ8\x1e\xf8 \xb1@\xe4kg'
        var19 = [var18, var18, var18]
        var20 = module0.tzUTC(*var19)
        assert var20 is not None
        var21 = var20.dst(var17)
        assert var21 is not None
        var22 = module0.isoformat(var12)
    except BaseException:
        pass


def test_case_11():
    try:
        var0 = -2019
        var1 = None
        var2 = [var1]
        var3 = module0.tzUTC(*var2)
        assert var3 is not None
        var4 = var3.dst(var0)
        assert var4 is not None
        var5 = module0.tzUTC()
        assert var5 is not None
        var6 = "'KUz\x0b4phExH\x0c->x"
        var7 = module0.isoformat(var6)
    except BaseException:
        pass


def test_case_12():
    try:
        var0 = -416
        var1 = {var0, var0}
        var2 = [var1, var0]
        var3 = b'7\r\xbf\xc5\x83P\xd2\x1fZ8\x1e\xf8 \xb1@\xe4kg'
        var4 = [var3, var3, var3]
        var5 = module0.tzUTC(*var4)
        assert var5 is not None
        var6 = var5.dst(var2)
        assert var6 is not None
        var7 = -2019
        var8 = None
        var9 = [var8]
        var10 = module0.tzUTC(*var9)
        assert var10 is not None
        var11 = var10.dst(var7)
        assert var11 is not None
        var12 = -2019
        var13 = None
        var14 = [var13]
        var15 = module0.tzUTC(*var14)
        assert var15 is not None
        var16 = var15.dst(var12)
        assert var16 is not None
        var17 = module0.tzUTC()
        assert var17 is not None
        var18 = '@\rq"H_\rVk2BjVl}'
        var19 = module0.isoformat(var18)
    except BaseException:
        pass


def test_case_13():
    try:
        var0 = module0.tzUTC()
        assert var0 is not None
        var1 = -2019
        var2 = None
        var3 = [var2]
        var4 = module0.tzUTC(*var3)
        assert var4 is not None
        var5 = var4.dst(var1)
        assert var5 is not None
        var6 = module0.tzUTC()
        assert var6 is not None
        var7 = -2019
        var8 = None
        var9 = [var8]
        var10 = module0.tzUTC(*var9)
        assert var10 is not None
        var11 = var10.dst(var7)
        assert var11 is not None
        var12 = -416
        var13 = {var12, var12}
        var14 = [var13, var12]
        var15 = b'7\r\xbf\xc5\x83P\xd2\x1fZ8\x1e\xf8 \xb1@\xe4kg'
        var16 = [var15, var15, var15]
        var17 = module0.tzUTC(*var16)
        assert var17 is not None
        var18 = var17.dst(var14)
        assert var18 is not None
        var19 = 'Passwords do not match.'
        var20 = module0.isoformat(var19)
    except BaseException:
        pass


def test_case_14():
    try:
        var0 = None
        var1 = {}
        var2 = module0.tzUTC(**var1)
        assert var2 is not None
        var3 = var2.dst(var0)
        assert var3 is not None
        var4 = -2019
        var5 = None
        var6 = [var5]
        var7 = module0.tzUTC(*var6)
        assert var7 is not None
        var8 = var7.dst(var4)
        assert var8 is not None
        var9 = module0.tzUTC()
        assert var9 is not None
        var10 = module0.utc_method()
    except BaseException:
        pass


def test_case_15():
    try:
        var0 = -416
        var1 = {var0, var0}
        var2 = [var1, var0]
        var3 = b'7\r\xbf\xc5\x83P\xd2\x1fZ8\x1e\xf8 \xb1@\xe4kg'
        var4 = [var3, var3, var3]
        var5 = module0.tzUTC(*var4)
        assert var5 is not None
        var6 = var5.dst(var2)
        assert var6 is not None
        var7 = None
        var8 = {}
        var9 = module0.tzUTC(**var8)
        assert var9 is not None
        var10 = var9.dst(var7)
        assert var10 is not None
        var11 = True
        var12 = var7.utcoffset(var11)
    except BaseException:
        pass


def test_case_16():
    try:
        var0 = module0.tzUTC()
        assert var0 is not None
        var1 = -2019
        var2 = None
        var3 = [var2]
        var4 = module0.tzUTC(*var3)
        assert var4 is not None
        var5 = var4.dst(var1)
        assert var5 is not None
        var6 = module0.tzUTC()
        assert var6 is not None
        var7 = {var5, var6}
        var8 = module0.utc_aware(var7)
        assert var8 is not None
        var9 = False
        var10 = module0.isoformat(var9)
    except BaseException:
        pass


def test_case_17():
    try:
        var0 = module0.tzUTC()
        assert var0 is not None
        var1 = None
        var2 = {}
        var3 = module0.tzUTC(**var2)
        assert var3 is not None
        var4 = var3.dst(var1)
        assert var4 is not None
        var5 = module0.tzUTC()
        assert var5 is not None
        var6 = -2019
        var7 = None
        var8 = [var7]
        var9 = module0.tzUTC(*var8)
        assert var9 is not None
        var10 = var9.dst(var6)
        assert var10 is not None
        var11 = module0.tzUTC()
        assert var11 is not None
        var12 = {var10, var11}
        var13 = module0.utc_aware(var12)
        assert var13 is not None
        var14 = -2019
        var15 = None
        var16 = [var15]
        var17 = module0.tzUTC(*var16)
        assert var17 is not None
        var18 = var17.dst(var14)
        assert var18 is not None
        var19 = -416
        var20 = {var19, var19}
        var21 = [var20, var19]
        var22 = b'7\r\xbf\xc5\x83P\xd2\x1fZ8\x1e\xf8 \xb1@\xe4kg'
        var23 = [var22, var22, var22]
        var24 = module0.tzUTC(*var23)
        assert var24 is not None
        var25 = var24.dst(var21)
        assert var25 is not None
        var26 = module0.utc_method()
    except BaseException:
        pass


def test_case_18():
    try:
        var0 = None
        var1 = '\r!8@NaxJ'
        var2 = {var0: var0, var1: var1, var1: var0}
        var3 = module0.isoformat(var2)
    except BaseException:
        pass


def test_case_19():
    try:
        var0 = module0.tzUTC()
        assert var0 is not None
        var1 = -2019
        var2 = None
        var3 = [var2]
        var4 = module0.tzUTC(*var3)
        assert var4 is not None
        var5 = var4.dst(var1)
        assert var5 is not None
        var6 = None
        var7 = module0.utc_aware(var6)
        assert var7 is not None
        var8 = module0.tzUTC()
        assert var8 is not None
        var9 = module0.tzUTC()
        assert var9 is not None
        var10 = var9.utcoffset(var8)
        assert var10 is not None
        var11 = b'J\xc2-p\xc7l\xa7\xcd\xa7 \xacM>\xbc\xbb'
        var12 = {}
        var13 = module0.tzUTC(**var12)
        assert var13 is not None
        var14 = var13.dst(var11)
        assert var14 is not None
        var15 = None
        var16 = {}
        var17 = module0.tzUTC(**var16)
        assert var17 is not None
        var18 = var17.dst(var15)
        assert var18 is not None
        var19 = -416
        var20 = {var19, var19}
        var21 = [var20, var19]
        var22 = b'7\r\xbf\xc5\x83P\xd2\x1fZ8\x1e\xf8 \xb1@\xe4kg'
        var23 = [var22, var22, var22]
        var24 = module0.tzUTC(*var23)
        assert var24 is not None
        var25 = var24.dst(var21)
        assert var25 is not None
        var26 = -2019
        var27 = None
        var28 = [var27]
        var29 = module0.tzUTC(*var28)
        assert var29 is not None
        var30 = var29.dst(var26)
        assert var30 is not None
        var31 = module0.tzUTC()
        assert var31 is not None
        var32 = -2019
        var33 = None
        var34 = [var33]
        var35 = module0.tzUTC(*var34)
        assert var35 is not None
        var36 = var35.dst(var32)
        assert var36 is not None
        var37 = {var36: var34, var36: var32}
        var38 = module0.utc_aware(var37)
        assert var38 is not None
        var39 = -2019
        var40 = None
        var41 = [var40]
        var42 = module0.tzUTC(*var41)
        assert var42 is not None
        var43 = var42.dst(var39)
        assert var43 is not None
        var44 = module0.utc_method(*var28, **var16)
    except BaseException:
        pass


def test_case_20():
    try:
        var0 = 's\n3 26()\\90)'
        var1 = [var0]
        var2 = {var0: var0}
        var3 = module0.utc_method(*var1, **var2)
    except BaseException:
        pass


def test_case_21():
    try:
        var0 = module0.tzUTC()
        assert var0 is not None
        var1 = None
        var2 = {}
        var3 = module0.tzUTC(**var2)
        assert var3 is not None
        var4 = var3.dst(var1)
        assert var4 is not None
        var5 = -2019
        var6 = None
        var7 = [var6]
        var8 = module0.tzUTC(*var7)
        assert var8 is not None
        var9 = var8.dst(var5)
        assert var9 is not None
        var10 = {var9: var7, var9: var5}
        var11 = module0.utc_aware(var10)
        assert var11 is not None
        var12 = b'J\xc2-p\xc7l\xa7\xcd\xa7 \xacM>\xbc\xbb'
        var13 = {}
        var14 = module0.tzUTC(**var13)
        assert var14 is not None
        var15 = var14.dst(var12)
        assert var15 is not None
        var16 = b'Q'
        var17 = module0.isoformat(var16)
    except BaseException:
        pass


def test_case_22():
    try:
        var0 = None
        var1 = {}
        var2 = module0.tzUTC(**var1)
        assert var2 is not None
        var3 = var2.dst(var0)
        assert var3 is not None
        var4 = -2019
        var5 = None
        var6 = [var5]
        var7 = module0.tzUTC(*var6)
        assert var7 is not None
        var8 = var7.dst(var4)
        assert var8 is not None
        var9 = {var8: var6, var8: var4}
        var10 = module0.utc_aware(var9)
        assert var10 is not None
        var11 = b'J\xc2-p\xc7l\xa7\xcd\xa7 \xacM>\xbc\xbb'
        var12 = {}
        var13 = module0.tzUTC(**var12)
        assert var13 is not None
        var14 = var13.dst(var11)
        assert var14 is not None
        var15 = -416
        var16 = {var15, var15}
        var17 = [var16, var15]
        var18 = b'7\r\xbf\xc5\x83P\xd2\x1fZ8\x1e\xf8 \xb1@\xe4kg'
        var19 = [var18, var18, var18]
        var20 = module0.tzUTC(*var19)
        assert var20 is not None
        var21 = var20.dst(var17)
        assert var21 is not None
        var22 = 0.8
        var23 = module0.tzUTC()
        assert var23 is not None
        var24 = var23.utcoffset(var22)
        assert var24 is not None
        var25 = module0.tzUTC()
        assert var25 is not None
        var26 = -2019
        var27 = None
        var28 = [var27]
        var29 = module0.tzUTC(*var28)
        assert var29 is not None
        var30 = var29.dst(var26)
        assert var30 is not None
        var31 = None
        var32 = module0.utc_aware(var31)
        assert var32 is not None
        var33 = -2019
        var34 = None
        var35 = [var34]
        var36 = module0.tzUTC(*var35)
        assert var36 is not None
        var37 = var36.dst(var33)
        assert var37 is not None
        var38 = module0.tzUTC()
        assert var38 is not None
        var39 = -2019
        var40 = None
        var41 = [var40]
        var42 = module0.tzUTC(*var41)
        assert var42 is not None
        var43 = var42.dst(var39)
        assert var43 is not None
        var44 = True
        var45 = module0.isoformat(var44)
    except BaseException:
        pass


def test_case_23():
    try:
        var0 = module0.tzUTC()
        assert var0 is not None
        var1 = module0.tzUTC()
        assert var1 is not None
        var2 = var1.utcoffset(var0)
        assert var2 is not None
        var3 = 2445
        var4 = var1.utcoffset(var3)
        assert var4 is not None
        var5 = -2019
        var6 = None
        var7 = [var6]
        var8 = module0.tzUTC(*var7)
        assert var8 is not None
        var9 = var8.dst(var5)
        assert var9 is not None
        var10 = module0.tzUTC()
        assert var10 is not None
        var11 = -416
        var12 = {var11, var11}
        var13 = [var12, var11]
        var14 = b'7\r\xbf\xc5\x83P\xd2\x1fZ8\x1e\xf8 \xb1@\xe4kg'
        var15 = [var14, var14, var14]
        var16 = module0.tzUTC(*var15)
        assert var16 is not None
        var17 = var16.dst(var13)
        assert var17 is not None
        var18 = None
        var19 = {}
        var20 = module0.tzUTC(**var19)
        assert var20 is not None
        var21 = var20.dst(var18)
        assert var21 is not None
        var22 = module0.tzUTC()
        assert var22 is not None
        var23 = """Updates the values in the session database.

        Changes the values of the session with the given session_id
        with the values from the keyword arguments.

        Parameters
        ----------
        session_id : str
            a uuid that identifies a session in the sqlite3 database
        **kwargs : str
            the key must correspond to a column title in session database,
            and the value replaces the current value in the session
            with session_id.
        """
        var24 = var18.utcoffset(var23)
    except BaseException:
        pass


def test_case_24():
    try:
        var0 = None
        var1 = {}
        var2 = module0.tzUTC(**var1)
        assert var2 is not None
        var3 = var2.dst(var0)
        assert var3 is not None
        var4 = module0.tzUTC()
        assert var4 is not None
        var5 = -2019
        var6 = None
        var7 = [var6]
        var8 = module0.tzUTC(*var7)
        assert var8 is not None
        var9 = var8.dst(var5)
        assert var9 is not None
        var10 = module0.tzUTC()
        assert var10 is not None
        var11 = {var9, var10}
        var12 = module0.utc_aware(var11)
        assert var12 is not None
        var13 = -2019
        var14 = None
        var15 = [var14]
        var16 = module0.tzUTC(*var15)
        assert var16 is not None
        var17 = var16.dst(var13)
        assert var17 is not None
        var18 = module0.tzUTC()
        assert var18 is not None
        var19 = module0.tzUTC()
        assert var19 is not None
        var20 = -2019
        var21 = None
        var22 = [var21]
        var23 = module0.tzUTC(*var22)
        assert var23 is not None
        var24 = var23.dst(var20)
        assert var24 is not None
        var25 = None
        var26 = module0.utc_aware(var25)
        assert var26 is not None
        var27 = 0.8
        var28 = module0.tzUTC()
        assert var28 is not None
        var29 = var28.utcoffset(var27)
        assert var29 is not None
        var30 = module0.tzUTC()
        assert var30 is not None
        var31 = module0.tzUTC()
        assert var31 is not None
        var32 = var31.utcoffset(var30)
        assert var32 is not None
        var33 = module0.utc_method(**var1)
    except BaseException:
        pass


def test_case_25():
    try:
        var0 = None
        var1 = {}
        var2 = module0.tzUTC(**var1)
        assert var2 is not None
        var3 = var2.dst(var0)
        assert var3 is not None
        var4 = -2019
        var5 = None
        var6 = [var5]
        var7 = module0.tzUTC(*var6)
        assert var7 is not None
        var8 = var7.dst(var4)
        assert var8 is not None
        var9 = {var8: var6, var8: var4}
        var10 = module0.utc_aware(var9)
        assert var10 is not None
        var11 = b'J\xc2-p\xc7l\xa7\xcd\xa7 \xacM>\xbc\xbb'
        var12 = {}
        var13 = module0.tzUTC(**var12)
        assert var13 is not None
        var14 = var13.dst(var11)
        assert var14 is not None
        var15 = module0.utc_method()
    except BaseException:
        pass


def test_case_26():
    try:
        var0 = -416
        var1 = {var0, var0}
        var2 = [var1, var0]
        var3 = b'7\r\xbf\xc5\x83P\xd2\x1fZ8\x1e\xf8 \xb1@\xe4kg'
        var4 = [var3, var3, var3]
        var5 = module0.tzUTC(*var4)
        assert var5 is not None
        var6 = var5.dst(var2)
        assert var6 is not None
        var7 = module0.utc_method()
    except BaseException:
        pass


def test_case_27():
    try:
        var0 = -2019
        var1 = None
        var2 = [var1]
        var3 = module0.tzUTC(*var2)
        assert var3 is not None
        var4 = var3.dst(var0)
        assert var4 is not None
        var5 = {var4: var2, var4: var0}
        var6 = module0.utc_aware(var5)
        assert var6 is not None
        var7 = -2019
        var8 = None
        var9 = [var8]
        var10 = module0.tzUTC(*var9)
        assert var10 is not None
        var11 = var10.dst(var7)
        assert var11 is not None
        var12 = module0.tzUTC()
        assert var12 is not None
        var13 = module0.tzUTC()
        assert var13 is not None
        var14 = module0.tzUTC()
        assert var14 is not None
        var15 = var14.utcoffset(var13)
        assert var15 is not None
        var16 = 2445
        var17 = var14.utcoffset(var16)
        assert var17 is not None
        var18 = module0.tzUTC()
        assert var18 is not None
        var19 = module0.tzUTC()
        assert var19 is not None
        var20 = module0.tzUTC()
        assert var20 is not None
        var21 = var20.utcoffset(var19)
        assert var21 is not None
        var22 = -2019
        var23 = None
        var24 = [var23]
        var25 = module0.tzUTC(*var24)
        assert var25 is not None
        var26 = var25.dst(var22)
        assert var26 is not None
        var27 = module0.utc_method()
    except BaseException:
        pass


def test_case_28():
    try:
        var0 = module0.tzUTC()
        assert var0 is not None
        var1 = {}
        var2 = module0.utc_method(**var1)
    except BaseException:
        pass


def test_case_29():
    try:
        var0 = 0.8
        var1 = module0.tzUTC()
        assert var1 is not None
        var2 = var1.utcoffset(var0)
        assert var2 is not None
        var3 = None
        var4 = {}
        var5 = module0.tzUTC(**var4)
        assert var5 is not None
        var6 = var5.dst(var3)
        assert var6 is not None
        var7 = b'J\xc2-p\xc7l\xa7\xcd\xa7 \xacM>\xbc\xbb'
        var8 = {}
        var9 = module0.tzUTC(**var8)
        assert var9 is not None
        var10 = var9.dst(var7)
        assert var10 is not None
        var11 = module0.tzUTC()
        assert var11 is not None
        var12 = module0.tzUTC()
        assert var12 is not None
        var13 = var12.utcoffset(var11)
        assert var13 is not None
        var14 = 2445
        var15 = var12.utcoffset(var14)
        assert var15 is not None
        var16 = -2019
        var17 = None
        var18 = [var17]
        var19 = module0.tzUTC(*var18)
        assert var19 is not None
        var20 = var19.dst(var16)
        assert var20 is not None
        var21 = {var20: var18, var20: var16}
        var22 = module0.utc_aware(var21)
        assert var22 is not None
        var23 = module0.tzUTC()
        assert var23 is not None
        var24 = module0.tzUTC()
        assert var24 is not None
        var25 = -2019
        var26 = None
        var27 = [var26]
        var28 = module0.tzUTC(*var27)
        assert var28 is not None
        var29 = var28.dst(var25)
        assert var29 is not None
        var30 = None
        var31 = module0.utc_aware(var30)
        assert var31 is not None
        var32 = -2019
        var33 = None
        var34 = [var33]
        var35 = module0.tzUTC(*var34)
        assert var35 is not None
        var36 = var35.dst(var32)
        assert var36 is not None
        var37 = module0.tzUTC()
        assert var37 is not None
        var38 = 'Akbe`@a~EQ{/?mH@%'
        var39 = var35.dst(var38)
        assert var39 is not None
        var40 = module0.utc_method()
    except BaseException:
        pass


def test_case_30():
    try:
        var0 = -2019
        var1 = None
        var2 = [var1]
        var3 = module0.tzUTC(*var2)
        assert var3 is not None
        var4 = var3.dst(var0)
        assert var4 is not None
        var5 = module0.tzUTC()
        assert var5 is not None
        var6 = 0.8
        var7 = module0.tzUTC()
        assert var7 is not None
        var8 = var7.utcoffset(var6)
        assert var8 is not None
        var9 = module0.tzUTC()
        assert var9 is not None
        var10 = -2019
        var11 = None
        var12 = [var11]
        var13 = module0.tzUTC(*var12)
        assert var13 is not None
        var14 = var13.dst(var10)
        assert var14 is not None
        var15 = None
        var16 = module0.utc_aware(var15)
        assert var16 is not None
        var17 = None
        var18 = {}
        var19 = module0.tzUTC(**var18)
        assert var19 is not None
        var20 = var19.dst(var17)
        assert var20 is not None
        var21 = b'J\xc2-p\xc7l\xa7\xcd\xa7 \xacM>\xbc\xbb'
        var22 = {}
        var23 = module0.tzUTC(**var22)
        assert var23 is not None
        var24 = var23.dst(var21)
        assert var24 is not None
        var25 = module0.tzUTC()
        assert var25 is not None
        var26 = -2019
        var27 = None
        var28 = [var27]
        var29 = module0.tzUTC(*var28)
        assert var29 is not None
        var30 = var29.dst(var26)
        assert var30 is not None
        var31 = {var30: var28, var30: var26}
        var32 = module0.utc_aware(var31)
        assert var32 is not None
        var33 = module0.tzUTC()
        assert var33 is not None
        var34 = -416
        var35 = {var34, var34}
        var36 = [var35, var34]
        var37 = b'7\r\xbf\xc5\x83P\xd2\x1fZ8\x1e\xf8 \xb1@\xe4kg'
        var38 = [var37, var37, var37]
        var39 = module0.tzUTC(*var38)
        assert var39 is not None
        var40 = var39.dst(var36)
        assert var40 is not None
        var41 = True
        var42 = module0.isoformat(var41)
    except BaseException:
        pass


def test_case_31():
    try:
        var0 = module0.tzUTC()
        assert var0 is not None
        var1 = -2019
        var2 = None
        var3 = [var2]
        var4 = module0.tzUTC(*var3)
        assert var4 is not None
        var5 = var4.dst(var1)
        assert var5 is not None
        var6 = module0.tzUTC()
        assert var6 is not None
        var7 = 'Akbe`@a~EQ{/?mH@%'
        var8 = var4.dst(var7)
        assert var8 is not None
        var9 = -416
        var10 = {var9, var9}
        var11 = [var10, var9]
        var12 = b'7\r\xbf\xc5\x83P\xd2\x1fZ8\x1e\xf8 \xb1@\xe4kg'
        var13 = [var12, var12, var12]
        var14 = module0.tzUTC(*var13)
        assert var14 is not None
        var15 = var14.dst(var11)
        assert var15 is not None
        var16 = None
        var17 = {}
        var18 = module0.tzUTC(**var17)
        assert var18 is not None
        var19 = var18.dst(var16)
        assert var19 is not None
        var20 = 0.8
        var21 = module0.tzUTC()
        assert var21 is not None
        var22 = var21.utcoffset(var20)
        assert var22 is not None
        var23 = b'\x0b@\xa8\x92\x18\xf75~y\xb6\xfbJ\x81\t'
        var24 = module0.utc_aware(var23)
        assert var24 is not None
        var25 = b'J\xc2-p\xc7l\xa7\xcd\xa7 \xacM>\xbc\xbb'
        var26 = {}
        var27 = module0.tzUTC(**var26)
        assert var27 is not None
        var28 = var27.dst(var25)
        assert var28 is not None
        var29 = -2019
        var30 = None
        var31 = [var30]
        var32 = module0.tzUTC(*var31)
        assert var32 is not None
        var33 = var32.dst(var29)
        assert var33 is not None
        var34 = {var33: var31, var33: var29}
        var35 = module0.utc_aware(var34)
        assert var35 is not None
        var36 = module0.utc_method()
    except BaseException:
        pass


def test_case_32():
    try:
        var0 = b'\x0b@\xa8\x92\x18\xf75~y\xb6\xfbJ\x81\t'
        var1 = module0.utc_aware(var0)
        assert var1 is not None
        var2 = -2019
        var3 = None
        var4 = [var3]
        var5 = module0.tzUTC(*var4)
        assert var5 is not None
        var6 = var5.dst(var2)
        assert var6 is not None
        var7 = {var6: var4, var6: var2}
        var8 = module0.utc_aware(var7)
        assert var8 is not None
        var9 = None
        var10 = {}
        var11 = module0.tzUTC(**var10)
        assert var11 is not None
        var12 = var11.dst(var9)
        assert var12 is not None
        var13 = module0.utc_method()
    except BaseException:
        pass


def test_case_33():
    try:
        var0 = -416
        var1 = {var0, var0}
        var2 = [var1, var0]
        var3 = b'7\r\xbf\xc5\x83P\xd2\x1fZ8\x1e\xf8 \xb1@\xe4kg'
        var4 = [var3, var3, var3]
        var5 = module0.tzUTC(*var4)
        assert var5 is not None
        var6 = var5.dst(var2)
        assert var6 is not None
        var7 = b'\x0b@\xa8\x92\x18\xf75~y\xb6\xfbJ\x81\t'
        var8 = module0.utc_aware(var7)
        assert var8 is not None
        var9 = -2019
        var10 = None
        var11 = [var10]
        var12 = module0.tzUTC(*var11)
        assert var12 is not None
        var13 = var12.dst(var9)
        assert var13 is not None
        var14 = 0.8
        var15 = module0.tzUTC()
        assert var15 is not None
        var16 = var15.utcoffset(var14)
        assert var16 is not None
        var17 = module0.tzUTC()
        assert var17 is not None
        var18 = -2019
        var19 = None
        var20 = [var19]
        var21 = module0.tzUTC(*var20)
        assert var21 is not None
        var22 = var21.dst(var18)
        assert var22 is not None
        var23 = module0.tzUTC()
        assert var23 is not None
        var24 = {var22, var23}
        var25 = module0.utc_aware(var24)
        assert var25 is not None
        var26 = -2019
        var27 = None
        var28 = [var27]
        var29 = module0.tzUTC(*var28)
        assert var29 is not None
        var30 = var29.dst(var26)
        assert var30 is not None
        var31 = module0.tzUTC()
        assert var31 is not None
        var32 = 'Akbe`@a~EQ{/?mH@%'
        var33 = var29.dst(var32)
        assert var33 is not None
        var34 = b'J\xc2-p\xc7l\xa7\xcd\xa7 \xacM>\xbc\xbb'
        var35 = {}
        var36 = module0.tzUTC(**var35)
        assert var36 is not None
        var37 = var36.dst(var34)
        assert var37 is not None
        var38 = -2019
        var39 = None
        var40 = [var39]
        var41 = module0.tzUTC(*var40)
        assert var41 is not None
        var42 = var41.dst(var38)
        assert var42 is not None
        var43 = module0.tzUTC()
        assert var43 is not None
        var44 = module0.isoformat(var24)
    except BaseException:
        pass


def test_case_34():
    try:
        var0 = b'\x0b@\xa8\x92\x18\xf75~y\xb6\xfbJ\x81\t'
        var1 = module0.utc_aware(var0)
        assert var1 is not None
        var2 = '\x0baf!X\t9\x0cWvf('
        var3 = module0.isoformat(var2)
    except BaseException:
        pass


def test_case_35():
    try:
        var0 = b'\x0b@\xa8\x92\x18\xf75~y\xb6\xfbJ\x81\t'
        var1 = module0.utc_aware(var0)
        assert var1 is not None
        var2 = module0.utc_method()
    except BaseException:
        pass


def test_case_36():
    try:
        var0 = -416
        var1 = {var0, var0}
        var2 = [var1, var0]
        var3 = b'7\r\xbf\xc5\x83P\xd2\x1fZ8\x1e\xf8 \xb1@\xe4kg'
        var4 = [var3, var3, var3]
        var5 = module0.tzUTC(*var4)
        assert var5 is not None
        var6 = var5.dst(var2)
        assert var6 is not None
        var7 = -2019
        var8 = None
        var9 = [var8]
        var10 = module0.tzUTC(*var9)
        assert var10 is not None
        var11 = var10.dst(var7)
        assert var11 is not None
        var12 = module0.tzUTC()
        assert var12 is not None
        var13 = module0.utc_method()
    except BaseException:
        pass


def test_case_37():
    try:
        var0 = module0.tzUTC()
        assert var0 is not None
        var1 = -2019
        var2 = None
        var3 = [var2]
        var4 = module0.tzUTC(*var3)
        assert var4 is not None
        var5 = var4.dst(var1)
        assert var5 is not None
        var6 = None
        var7 = module0.utc_aware(var6)
        assert var7 is not None
        var8 = b'J\xc2-p\xc7l\xa7\xcd\xa7 \xacM>\xbc\xbb'
        var9 = {}
        var10 = module0.tzUTC(**var9)
        assert var10 is not None
        var11 = var10.dst(var8)
        assert var11 is not None
        var12 = None
        var13 = {}
        var14 = module0.tzUTC(**var13)
        assert var14 is not None
        var15 = var14.dst(var12)
        assert var15 is not None
        var16 = -2019
        var17 = None
        var18 = [var17]
        var19 = module0.tzUTC(*var18)
        assert var19 is not None
        var20 = var19.dst(var16)
        assert var20 is not None
        var21 = -2019
        var22 = None
        var23 = [var22]
        var24 = module0.tzUTC(*var23)
        assert var24 is not None
        var25 = var24.dst(var21)
        assert var25 is not None
        var26 = {var25: var23, var25: var21}
        var27 = module0.utc_aware(var26)
        assert var27 is not None
        var28 = module0.tzUTC()
        assert var28 is not None
        var29 = 0.8
        var30 = module0.tzUTC()
        assert var30 is not None
        var31 = var30.utcoffset(var29)
        assert var31 is not None
        var32 = module0.utc_method(**var13)
    except BaseException:
        pass


def test_case_38():
    try:
        var0 = module0.tzUTC()
        assert var0 is not None
        var1 = None
        var2 = {}
        var3 = module0.tzUTC(**var2)
        assert var3 is not None
        var4 = var3.dst(var1)
        assert var4 is not None
        var5 = [var1, var2, var4]
        var6 = module0.tzUTC(*var5)
        assert var6 is not None
        var7 = -416
        var8 = {var7, var7}
        var9 = [var8, var7]
        var10 = b'7\r\xbf\xc5\x83P\xd2\x1fZ8\x1e\xf8 \xb1@\xe4kg'
        var11 = [var10, var10, var10]
        var12 = module0.tzUTC(*var11)
        assert var12 is not None
        var13 = var12.dst(var9)
        assert var13 is not None
        var14 = 0.8
        var15 = module0.tzUTC()
        assert var15 is not None
        var16 = var15.utcoffset(var14)
        assert var16 is not None
        var17 = module0.tzUTC()
        assert var17 is not None
        var18 = -2019
        var19 = None
        var20 = [var19]
        var21 = module0.tzUTC(*var20)
        assert var21 is not None
        var22 = var21.dst(var18)
        assert var22 is not None
        var23 = module0.tzUTC()
        assert var23 is not None
        var24 = {var22, var23}
        var25 = module0.utc_aware(var24)
        assert var25 is not None
        var26 = -2019
        var27 = None
        var28 = [var27]
        var29 = module0.tzUTC(*var28)
        assert var29 is not None
        var30 = var29.dst(var26)
        assert var30 is not None
        var31 = {var30: var28, var30: var26}
        var32 = module0.utc_aware(var31)
        assert var32 is not None
        var33 = module0.tzUTC()
        assert var33 is not None
        var34 = -2019
        var35 = None
        var36 = [var35]
        var37 = module0.tzUTC(*var36)
        assert var37 is not None
        var38 = var37.dst(var34)
        assert var38 is not None
        var39 = module0.tzUTC()
        assert var39 is not None
        var40 = 'Akbe`@a~EQ{/?mH@%'
        var41 = var37.dst(var40)
        assert var41 is not None
        var42 = module0.utc_method()
    except BaseException:
        pass


def test_case_39():
    try:
        var0 = -2019
        var1 = None
        var2 = [var1]
        var3 = module0.tzUTC(*var2)
        assert var3 is not None
        var4 = var3.dst(var0)
        assert var4 is not None
        var5 = module0.tzUTC()
        assert var5 is not None
        var6 = -2019
        var7 = None
        var8 = [var7]
        var9 = module0.tzUTC(*var8)
        assert var9 is not None
        var10 = var9.dst(var6)
        assert var10 is not None
        var11 = {var10: var8, var10: var6}
        var12 = module0.utc_aware(var11)
        assert var12 is not None
        var13 = b'\x0b@\xa8\x92\x18\xf75~y\xb6\xfbJ\x81\t'
        var14 = module0.utc_aware(var13)
        assert var14 is not None
        var15 = module0.utc_method(*var2)
    except BaseException:
        pass


def test_case_40():
    try:
        var0 = module0.tzUTC()
        assert var0 is not None
        var1 = None
        var2 = {}
        var3 = module0.tzUTC(**var2)
        assert var3 is not None
        var4 = var3.dst(var1)
        assert var4 is not None
        var5 = [var1, var2, var4]
        var6 = module0.tzUTC(*var5)
        assert var6 is not None
        var7 = b'J\xc2-p\xc7l\xa7\xcd\xa7 \xacM>\xbc\xbb'
        var8 = {}
        var9 = module0.tzUTC(**var8)
        assert var9 is not None
        var10 = var9.dst(var7)
        assert var10 is not None
        var11 = module0.tzUTC()
        assert var11 is not None
        var12 = module0.tzUTC()
        assert var12 is not None
        var13 = var12.utcoffset(var11)
        assert var13 is not None
        var14 = 2445
        var15 = var12.utcoffset(var14)
        assert var15 is not None
        var16 = module0.tzUTC()
        assert var16 is not None
        var17 = module0.tzUTC()
        assert var17 is not None
        var18 = var17.utcoffset(var16)
        assert var18 is not None
        var19 = [var4, var0, var2, var16]
        var20 = module0.isoformat(var19)
    except BaseException:
        pass


def test_case_41():
    try:
        var0 = -416
        var1 = {var0, var0}
        var2 = [var1, var0]
        var3 = b'7\r\xbf\xc5\x83P\xd2\x1fZ8\x1e\xf8 \xb1@\xe4kg'
        var4 = [var3, var3, var3]
        var5 = module0.tzUTC(*var4)
        assert var5 is not None
        var6 = var5.dst(var2)
        assert var6 is not None
        var7 = -2019
        var8 = None
        var9 = [var8]
        var10 = module0.tzUTC(*var9)
        assert var10 is not None
        var11 = var10.dst(var7)
        assert var11 is not None
        var12 = {var11: var9, var11: var7}
        var13 = module0.utc_aware(var12)
        assert var13 is not None
        var14 = module0.tzUTC()
        assert var14 is not None
        var15 = module0.tzUTC()
        assert var15 is not None
        var16 = var15.utcoffset(var14)
        assert var16 is not None
        var17 = module0.utc_method(*var9)
    except BaseException:
        pass


def test_case_42():
    try:
        var0 = None
        var1 = {}
        var2 = module0.tzUTC(**var1)
        assert var2 is not None
        var3 = var2.dst(var0)
        assert var3 is not None
        var4 = 0.8
        var5 = module0.tzUTC()
        assert var5 is not None
        var6 = var5.utcoffset(var4)
        assert var6 is not None
        var7 = -416
        var8 = {var7, var7}
        var9 = [var8, var7]
        var10 = b'7\r\xbf\xc5\x83P\xd2\x1fZ8\x1e\xf8 \xb1@\xe4kg'
        var11 = [var10, var10, var10]
        var12 = module0.tzUTC(*var11)
        assert var12 is not None
        var13 = var12.dst(var9)
        assert var13 is not None
        var14 = -2019
        var15 = None
        var16 = [var15]
        var17 = module0.tzUTC(*var16)
        assert var17 is not None
        var18 = var17.dst(var14)
        assert var18 is not None
        var19 = module0.tzUTC()
        assert var19 is not None
        var20 = 'Akbe`@a~EQ{/?mH@%'
        var21 = var17.dst(var20)
        assert var21 is not None
        var22 = b'J\xc2-p\xc7l\xa7\xcd\xa7 \xacM>\xbc\xbb'
        var23 = {}
        var24 = module0.tzUTC(**var23)
        assert var24 is not None
        var25 = var24.dst(var22)
        assert var25 is not None
        var26 = -2019
        var27 = None
        var28 = [var27]
        var29 = module0.tzUTC(*var28)
        assert var29 is not None
        var30 = var29.dst(var26)
        assert var30 is not None
        var31 = {var30: var28, var30: var26}
        var32 = module0.utc_aware(var31)
        assert var32 is not None
        var33 = module0.tzUTC()
        assert var33 is not None
        var34 = -2019
        var35 = None
        var36 = [var35]
        var37 = module0.tzUTC(*var36)
        assert var37 is not None
        var38 = var37.dst(var34)
        assert var38 is not None
        var39 = module0.tzUTC()
        assert var39 is not None
        var40 = -2019
        var41 = None
        var42 = [var41]
        var43 = module0.tzUTC(*var42)
        assert var43 is not None
        var44 = var43.dst(var40)
        assert var44 is not None
        var45 = module0.tzUTC()
        assert var45 is not None
        var46 = {var44, var45}
        var47 = module0.utc_aware(var46)
        assert var47 is not None
        var48 = module0.tzUTC()
        assert var48 is not None
        var49 = -2019
        var50 = None
        var51 = [var50]
        var52 = module0.tzUTC(*var51)
        assert var52 is not None
        var53 = var52.dst(var49)
        assert var53 is not None
        var54 = None
        var55 = module0.utc_aware(var54)
        assert var55 is not None
        var56 = -2019
        var57 = None
        var58 = [var57]
        var59 = module0.tzUTC(*var58)
        assert var59 is not None
        var60 = var59.dst(var56)
        assert var60 is not None
        var61 = {var60: var58, var60: var56}
        var62 = module0.utc_aware(var61)
        assert var62 is not None
        var63 = '4AKu2q'
        var64 = module0.tzUTC()
        assert var64 is not None
        var65 = '":+$\te`H+kcl/)R#'
        var66 = True
        var67 = None
        var68 = '~{]\x0cv&{[^1!.nm'
        var69 = {var63: var64, var65: var66, var67: var3, var68: var6}
        var70 = module0.utc_method(*var11, **var69)
    except BaseException:
        pass


def test_case_43():
    try:
        var0 = module0.tzUTC()
        assert var0 is not None
        var1 = -2019
        var2 = None
        var3 = [var2]
        var4 = module0.tzUTC(*var3)
        assert var4 is not None
        var5 = var4.dst(var1)
        assert var5 is not None
        var6 = {var5: var3, var5: var1}
        var7 = module0.utc_aware(var6)
        assert var7 is not None
        var8 = -2019
        var9 = None
        var10 = [var9]
        var11 = module0.tzUTC(*var10)
        assert var11 is not None
        var12 = var11.dst(var8)
        assert var12 is not None
        var13 = module0.tzUTC()
        assert var13 is not None
        var14 = 'dqCYPOR|{#@k~e}'
        var15 = {var14: var12, var14: var3}
        var16 = module0.utc_method(**var15)
    except BaseException:
        pass


def test_case_44():
    try:
        var0 = b'J\xc2-p\xc7l\xa7\xcd\xa7 \xacM>\xbc\xbb'
        var1 = {}
        var2 = module0.tzUTC(**var1)
        assert var2 is not None
        var3 = var2.dst(var0)
        assert var3 is not None
        var4 = -416
        var5 = {var4, var4}
        var6 = [var5, var4]
        var7 = b'7\r\xbf\xc5\x83P\xd2\x1fZ8\x1e\xf8 \xb1@\xe4kg'
        var8 = [var7, var7, var7]
        var9 = module0.tzUTC(*var8)
        assert var9 is not None
        var10 = var9.dst(var6)
        assert var10 is not None
        var11 = -2019
        var12 = None
        var13 = [var12]
        var14 = module0.tzUTC(*var13)
        assert var14 is not None
        var15 = var14.dst(var11)
        assert var15 is not None
        var16 = {var15: var13, var15: var11}
        var17 = module0.utc_aware(var16)
        assert var17 is not None
        var18 = module0.tzUTC()
        assert var18 is not None
        var19 = module0.tzUTC()
        assert var19 is not None
        var20 = module0.tzUTC()
        assert var20 is not None
        var21 = var20.utcoffset(var19)
        assert var21 is not None
        var22 = 2445
        var23 = var20.utcoffset(var22)
        assert var23 is not None
        var24 = 0.8
        var25 = module0.tzUTC()
        assert var25 is not None
        var26 = var25.utcoffset(var24)
        assert var26 is not None
        var27 = module0.utc_method(*var13)
    except BaseException:
        pass


def test_case_45():
    try:
        var0 = -416
        var1 = {var0, var0}
        var2 = [var1, var0]
        var3 = b'7\r\xbf\xc5\x83P\xd2\x1fZ8\x1e\xf8 \xb1@\xe4kg'
        var4 = [var3, var3, var3]
        var5 = module0.tzUTC(*var4)
        assert var5 is not None
        var6 = var5.dst(var2)
        assert var6 is not None
        var7 = module0.tzUTC()
        assert var7 is not None
        var8 = None
        var9 = {}
        var10 = module0.tzUTC(**var9)
        assert var10 is not None
        var11 = var10.dst(var8)
        assert var11 is not None
        var12 = [var8, var9, var11]
        var13 = module0.tzUTC(*var12)
        assert var13 is not None
        var14 = module0.utc_method(**var9)
    except BaseException:
        pass


def test_case_46():
    try:
        var0 = -2019
        var1 = None
        var2 = [var1]
        var3 = module0.tzUTC(*var2)
        assert var3 is not None
        var4 = var3.dst(var0)
        assert var4 is not None
        var5 = 0.8
        var6 = module0.tzUTC()
        assert var6 is not None
        var7 = var6.utcoffset(var5)
        assert var7 is not None
        var8 = module0.tzUTC()
        assert var8 is not None
        var9 = module0.tzUTC()
        assert var9 is not None
        var10 = var9.utcoffset(var8)
        assert var10 is not None
        var11 = -416
        var12 = {var11, var11}
        var13 = [var12, var11]
        var14 = b'7\r\xbf\xc5\x83P\xd2\x1fZ8\x1e\xf8 \xb1@\xe4kg'
        var15 = [var14, var14, var14]
        var16 = module0.tzUTC(*var15)
        assert var16 is not None
        var17 = var16.dst(var13)
        assert var17 is not None
        var18 = None
        var19 = {}
        var20 = module0.tzUTC(**var19)
        assert var20 is not None
        var21 = var20.dst(var18)
        assert var21 is not None
        var22 = module0.tzUTC()
        assert var22 is not None
        var23 = module0.tzUTC()
        assert var23 is not None
        var24 = var23.utcoffset(var22)
        assert var24 is not None
        var25 = 2445
        var26 = var23.utcoffset(var25)
        assert var26 is not None
        var27 = module0.tzUTC()
        assert var27 is not None
        var28 = -2019
        var29 = None
        var30 = [var29]
        var31 = module0.tzUTC(*var30)
        assert var31 is not None
        var32 = var31.dst(var28)
        assert var32 is not None
        var33 = None
        var34 = module0.utc_aware(var33)
        assert var34 is not None
        var35 = b'\x0b@\xa8\x92\x18\xf75~y\xb6\xfbJ\x81\t'
        var36 = module0.utc_aware(var35)
        assert var36 is not None
        var37 = module0.utc_method(*var2, **var19)
    except BaseException:
        pass


def test_case_47():
    try:
        var0 = -2019
        var1 = None
        var2 = [var1]
        var3 = module0.tzUTC(*var2)
        assert var3 is not None
        var4 = var3.dst(var0)
        assert var4 is not None
        var5 = module0.tzUTC()
        assert var5 is not None
        var6 = 'Akbe`@a~EQ{/?mH@%'
        var7 = var3.dst(var6)
        assert var7 is not None
        var8 = module0.utc_method()
    except BaseException:
        pass


def test_case_48():
    try:
        var0 = b'J\xc2-p\xc7l\xa7\xcd\xa7 \xacM>\xbc\xbb'
        var1 = {}
        var2 = module0.tzUTC(**var1)
        assert var2 is not None
        var3 = var2.dst(var0)
        assert var3 is not None
        var4 = True
        var5 = {var4: var4}
        var6 = var4, var2, var5
        var7 = module0.isoformat(var6)
    except BaseException:
        pass


def test_case_49():
    try:
        var0 = module0.tzUTC()
        assert var0 is not None
        var1 = -2019
        var2 = None
        var3 = [var2]
        var4 = module0.tzUTC(*var3)
        assert var4 is not None
        var5 = var4.dst(var1)
        assert var5 is not None
        var6 = module0.tzUTC()
        assert var6 is not None
        var7 = {var5, var6}
        var8 = module0.utc_aware(var7)
        assert var8 is not None
        var9 = None
        var10 = module0.tzUTC()
        assert var10 is not None
        var11 = var10.utcoffset(var9)
        assert var11 is not None
        var12 = b'\x0b@\xa8\x92\x18\xf75~y\xb6\xfbJ\x81\t'
        var13 = module0.utc_aware(var12)
        assert var13 is not None
        var14 = -2019
        var15 = None
        var16 = [var15]
        var17 = module0.tzUTC(*var16)
        assert var17 is not None
        var18 = var17.dst(var14)
        assert var18 is not None
        var19 = module0.tzUTC()
        assert var19 is not None
        var20 = module0.utc_method()
    except BaseException:
        pass


def test_case_50():
    try:
        var0 = None
        var1 = {}
        var2 = module0.tzUTC(**var1)
        assert var2 is not None
        var3 = var2.dst(var0)
        assert var3 is not None
        var4 = b'J\xc2-p\xc7l\xa7\xcd\xa7 \xacM>\xbc\xbb'
        var5 = {}
        var6 = module0.tzUTC(**var5)
        assert var6 is not None
        var7 = var6.dst(var4)
        assert var7 is not None
        var8 = -2019
        var9 = None
        var10 = [var9]
        var11 = module0.tzUTC(*var10)
        assert var11 is not None
        var12 = var11.dst(var8)
        assert var12 is not None
        var13 = None
        var14 = module0.tzUTC()
        assert var14 is not None
        var15 = var14.utcoffset(var13)
        assert var15 is not None
        var16 = ()
        var17 = module0.tzUTC()
        assert var17 is not None
        var18 = [var17]
        var19 = module0.tzUTC(*var18)
        assert var19 is not None
        var20 = [var19]
        var21 = module0.tzUTC(*var20)
        assert var21 is not None
        var22 = var21.utcoffset(var16)
        assert var22 is not None
        var23 = module0.tzUTC()
        assert var23 is not None
        var24 = None
        var25 = {}
        var26 = module0.tzUTC(**var25)
        assert var26 is not None
        var27 = var26.dst(var24)
        assert var27 is not None
        var28 = [var24, var25, var27]
        var29 = module0.tzUTC(*var28)
        assert var29 is not None
        var30 = -2019
        var31 = None
        var32 = [var31]
        var33 = module0.tzUTC(*var32)
        assert var33 is not None
        var34 = var33.dst(var30)
        assert var34 is not None
        var35 = {var34: var32, var34: var30}
        var36 = module0.utc_aware(var35)
        assert var36 is not None
        var37 = module0.tzUTC()
        assert var37 is not None
        var38 = module0.tzUTC()
        assert var38 is not None
        var39 = module0.tzUTC()
        assert var39 is not None
        var40 = var39.utcoffset(var38)
        assert var40 is not None
        var41 = 2445
        var42 = var39.utcoffset(var41)
        assert var42 is not None
        var43 = b'\x0b@\xa8\x92\x18\xf75~y\xb6\xfbJ\x81\t'
        var44 = module0.utc_aware(var43)
        assert var44 is not None
        var45 = module0.isoformat(var4)
    except BaseException:
        pass


def test_case_51():
    try:
        var0 = b'J\xc2-p\xc7l\xa7\xcd\xa7 \xacM>\xbc\xbb'
        var1 = {}
        var2 = module0.tzUTC(**var1)
        assert var2 is not None
        var3 = var2.dst(var0)
        assert var3 is not None
        var4 = module0.utc_method(**var1)
    except BaseException:
        pass


def test_case_52():
    try:
        var0 = -2019
        var1 = None
        var2 = [var1]
        var3 = module0.tzUTC(*var2)
        assert var3 is not None
        var4 = var3.dst(var0)
        assert var4 is not None
        var5 = module0.tzUTC()
        assert var5 is not None
        var6 = module0.tzUTC()
        assert var6 is not None
        var7 = module0.tzUTC()
        assert var7 is not None
        var8 = None
        var9 = {}
        var10 = module0.tzUTC(**var9)
        assert var10 is not None
        var11 = var10.dst(var8)
        assert var11 is not None
        var12 = [var8, var9, var11]
        var13 = module0.tzUTC(*var12)
        assert var13 is not None
        var14 = None
        var15 = module0.tzUTC()
        assert var15 is not None
        var16 = var15.utcoffset(var14)
        assert var16 is not None
        var17 = b'\x0b@\xa8\x92\x18\xf75~y\xb6\xfbJ\x81\t'
        var18 = module0.utc_aware(var17)
        assert var18 is not None
        var19 = None
        var20 = {}
        var21 = module0.tzUTC(**var20)
        assert var21 is not None
        var22 = var21.dst(var19)
        assert var22 is not None
        var23 = -2019
        var24 = None
        var25 = [var24]
        var26 = module0.tzUTC(*var25)
        assert var26 is not None
        var27 = var26.dst(var23)
        assert var27 is not None
        var28 = {var27: var25, var27: var23}
        var29 = module0.utc_aware(var28)
        assert var29 is not None
        var30 = module0.tzUTC()
        assert var30 is not None
        var31 = module0.tzUTC()
        assert var31 is not None
        var32 = -2019
        var33 = None
        var34 = [var33]
        var35 = module0.tzUTC(*var34)
        assert var35 is not None
        var36 = var35.dst(var32)
        assert var36 is not None
        var37 = module0.tzUTC()
        assert var37 is not None
        var38 = {var36, var37}
        var39 = module0.utc_aware(var38)
        assert var39 is not None
        var40 = module0.utc_method(*var34)
    except BaseException:
        pass


def test_case_53():
    try:
        var0 = None
        var1 = module0.tzUTC()
        assert var1 is not None
        var2 = var1.utcoffset(var0)
        assert var2 is not None
        var3 = module0.tzUTC()
        assert var3 is not None
        var4 = module0.tzUTC()
        assert var4 is not None
        var5 = var4.utcoffset(var3)
        assert var5 is not None
        var6 = -2019
        var7 = None
        var8 = [var7]
        var9 = module0.tzUTC(*var8)
        assert var9 is not None
        var10 = var9.dst(var6)
        assert var10 is not None
        var11 = {var10: var8, var10: var6}
        var12 = module0.utc_aware(var11)
        assert var12 is not None
        var13 = -2019
        var14 = None
        var15 = [var14]
        var16 = module0.tzUTC(*var15)
        assert var16 is not None
        var17 = var16.dst(var13)
        assert var17 is not None
        var18 = module0.tzUTC()
        assert var18 is not None
        var19 = None
        var20 = module0.utc_method(*var8, **var19)
    except BaseException:
        pass


def test_case_54():
    try:
        var0 = ()
        var1 = module0.tzUTC()
        assert var1 is not None
        var2 = [var1]
        var3 = module0.tzUTC(*var2)
        assert var3 is not None
        var4 = [var3]
        var5 = module0.tzUTC(*var4)
        assert var5 is not None
        var6 = var5.utcoffset(var0)
        assert var6 is not None
        var7 = None
        var8 = {}
        var9 = module0.tzUTC(**var8)
        assert var9 is not None
        var10 = var9.dst(var7)
        assert var10 is not None
        var11 = -416
        var12 = {var11, var11}
        var13 = [var12, var11]
        var14 = b'7\r\xbf\xc5\x83P\xd2\x1fZ8\x1e\xf8 \xb1@\xe4kg'
        var15 = [var14, var14, var14]
        var16 = module0.tzUTC(*var15)
        assert var16 is not None
        var17 = var16.dst(var13)
        assert var17 is not None
        var18 = 0.8
        var19 = module0.tzUTC()
        assert var19 is not None
        var20 = var19.utcoffset(var18)
        assert var20 is not None
        var21 = -2019
        var22 = None
        var23 = [var22]
        var24 = module0.tzUTC(*var23)
        assert var24 is not None
        var25 = var24.dst(var21)
        assert var25 is not None
        var26 = module0.tzUTC()
        assert var26 is not None
        var27 = 'Akbe`@a~EQ{/?mH@%'
        var28 = var24.dst(var27)
        assert var28 is not None
        var29 = -2019
        var30 = None
        var31 = [var30]
        var32 = module0.tzUTC(*var31)
        assert var32 is not None
        var33 = var32.dst(var29)
        assert var33 is not None
        var34 = b'\x0b@\xa8\x92\x18\xf75~y\xb6\xfbJ\x81\t'
        var35 = module0.utc_aware(var34)
        assert var35 is not None
        var36 = -2019
        var37 = None
        var38 = [var37]
        var39 = module0.tzUTC(*var38)
        assert var39 is not None
        var40 = var39.dst(var36)
        assert var40 is not None
        var41 = {var40: var38, var40: var36}
        var42 = module0.utc_aware(var41)
        assert var42 is not None
        var43 = module0.tzUTC()
        assert var43 is not None
        var44 = module0.tzUTC()
        assert var44 is not None
        var45 = var44.utcoffset(var43)
        assert var45 is not None
        var46 = 2445
        var47 = var44.utcoffset(var46)
        assert var47 is not None
        var48 = -2019
        var49 = None
        var50 = [var49]
        var51 = module0.tzUTC(*var50)
        assert var51 is not None
        var52 = var51.dst(var48)
        assert var52 is not None
        var53 = module0.tzUTC()
        assert var53 is not None
        var54 = module0.utc_method(*var50)
    except BaseException:
        pass


def test_case_55():
    try:
        var0 = module0.tzUTC()
        assert var0 is not None
        var1 = None
        var2 = {}
        var3 = module0.tzUTC(**var2)
        assert var3 is not None
        var4 = var3.dst(var1)
        assert var4 is not None
        var5 = [var1, var2, var4]
        var6 = module0.tzUTC(*var5)
        assert var6 is not None
        var7 = None
        var8 = module0.tzUTC()
        assert var8 is not None
        var9 = var8.utcoffset(var7)
        assert var9 is not None
        var10 = -2019
        var11 = None
        var12 = [var11]
        var13 = module0.tzUTC(*var12)
        assert var13 is not None
        var14 = var13.dst(var10)
        assert var14 is not None
        var15 = {var14: var12, var14: var10}
        var16 = module0.utc_aware(var15)
        assert var16 is not None
        var17 = module0.tzUTC()
        assert var17 is not None
        var18 = module0.tzUTC()
        assert var18 is not None
        var19 = module0.tzUTC()
        assert var19 is not None
        var20 = var19.utcoffset(var18)
        assert var20 is not None
        var21 = None
        var22 = module0.tzUTC(*var21)
    except BaseException:
        pass


def test_case_56():
    try:
        var0 = False
        var1 = module0.isoformat(var0)
    except BaseException:
        pass


def test_case_57():
    try:
        var0 = None
        var1 = {}
        var2 = module0.tzUTC(**var1)
        assert var2 is not None
        var3 = var2.dst(var0)
        assert var3 is not None
        var4 = module0.tzUTC()
        assert var4 is not None
        var5 = -2019
        var6 = None
        var7 = [var6]
        var8 = module0.tzUTC(*var7)
        assert var8 is not None
        var9 = var8.dst(var5)
        assert var9 is not None
        var10 = module0.tzUTC()
        assert var10 is not None
        var11 = {var9, var10}
        var12 = module0.utc_aware(var11)
        assert var12 is not None
        var13 = -2019
        var14 = None
        var15 = [var14]
        var16 = module0.tzUTC(*var15)
        assert var16 is not None
        var17 = var16.dst(var13)
        assert var17 is not None
        var18 = module0.tzUTC()
        assert var18 is not None
        var19 = -416
        var20 = {var19, var19}
        var21 = [var20, var19]
        var22 = b'7\r\xbf\xc5\x83P\xd2\x1fZ8\x1e\xf8 \xb1@\xe4kg'
        var23 = [var22, var22, var22]
        var24 = module0.tzUTC(*var23)
        assert var24 is not None
        var25 = var24.dst(var21)
        assert var25 is not None
        var26 = module0.utc_method(*var23, **var1)
    except BaseException:
        pass


def test_case_58():
    try:
        var0 = module0.tzUTC()
        assert var0 is not None
        var1 = module0.tzUTC()
        assert var1 is not None
        var2 = var1.utcoffset(var0)
        assert var2 is not None
        var3 = -2019
        var4 = None
        var5 = [var4]
        var6 = module0.tzUTC(*var5)
        assert var6 is not None
        var7 = var6.dst(var3)
        assert var7 is not None
        var8 = module0.tzUTC()
        assert var8 is not None
        var9 = 'Akbe`@a~EQ{/?mH@%'
        var10 = var6.dst(var9)
        assert var10 is not None
        var11 = ()
        var12 = module0.tzUTC()
        assert var12 is not None
        var13 = [var12]
        var14 = module0.tzUTC(*var13)
        assert var14 is not None
        var15 = [var14]
        var16 = module0.tzUTC(*var15)
        assert var16 is not None
        var17 = var16.utcoffset(var11)
        assert var17 is not None
        var18 = module0.tzUTC()
        assert var18 is not None
        var19 = -2019
        var20 = None
        var21 = [var20]
        var22 = module0.tzUTC(*var21)
        assert var22 is not None
        var23 = var22.dst(var19)
        assert var23 is not None
        var24 = None
        var25 = module0.utc_aware(var24)
        assert var25 is not None
        var26 = module0.tzUTC()
        assert var26 is not None
        var27 = None
        var28 = {}
        var29 = module0.tzUTC(**var28)
        assert var29 is not None
        var30 = var29.dst(var27)
        assert var30 is not None
        var31 = [var27, var28, var30]
        var32 = module0.tzUTC(*var31)
        assert var32 is not None
        var33 = None
        var34 = var32.dst(var33)
        assert var34 is not None
        var35 = 0.8
        var36 = module0.tzUTC()
        assert var36 is not None
        var37 = var36.utcoffset(var35)
        assert var37 is not None
        var38 = module0.tzUTC()
        assert var38 is not None
        var39 = module0.tzUTC()
        assert var39 is not None
        var40 = var39.utcoffset(var38)
        assert var40 is not None
        var41 = 2445
        var42 = var39.utcoffset(var41)
        assert var42 is not None
        var43 = -2019
        var44 = None
        var45 = [var44]
        var46 = module0.tzUTC(*var45)
        assert var46 is not None
        var47 = var46.dst(var43)
        assert var47 is not None
        var48 = {var47: var45, var47: var43}
        var49 = module0.utc_aware(var48)
        assert var49 is not None
        var50 = module0.tzUTC()
        assert var50 is not None
        var51 = module0.tzUTC()
        assert var51 is not None
        var52 = b'\x0b@\xa8\x92\x18\xf75~y\xb6\xfbJ\x81\t'
        var53 = module0.utc_aware(var52)
        assert var53 is not None
        var54 = module0.utc_method()
    except BaseException:
        pass


def test_case_59():
    try:
        var0 = module0.tzUTC()
        assert var0 is not None
        var1 = module0.tzUTC()
        assert var1 is not None
        var2 = var1.utcoffset(var0)
        assert var2 is not None
        var3 = -2019
        var4 = None
        var5 = [var4]
        var6 = module0.tzUTC(*var5)
        assert var6 is not None
        var7 = var6.dst(var3)
        assert var7 is not None
        var8 = {var7: var5, var7: var3}
        var9 = module0.utc_aware(var8)
        assert var9 is not None
        var10 = -2019
        var11 = None
        var12 = [var11]
        var13 = module0.tzUTC(*var12)
        assert var13 is not None
        var14 = var13.dst(var10)
        assert var14 is not None
        var15 = module0.tzUTC()
        assert var15 is not None
        var16 = 'Akbe`@a~EQ{/?mH@%'
        var17 = var13.dst(var16)
        assert var17 is not None
        var18 = module0.tzUTC()
        assert var18 is not None
        var19 = None
        var20 = module0.utc_method(**var19)
    except BaseException:
        pass


def test_case_60():
    try:
        var0 = -2019
        var1 = None
        var2 = [var1]
        var3 = module0.tzUTC(*var2)
        assert var3 is not None
        var4 = var3.dst(var0)
        assert var4 is not None
        var5 = module0.tzUTC()
        assert var5 is not None
        var6 = 'Akbe`@a~EQ{/?mH@%'
        var7 = var3.dst(var6)
        assert var7 is not None
        var8 = None
        var9 = module0.isoformat(var8)
    except BaseException:
        pass


def test_case_61():
    try:
        var0 = b'J\xc2-p\xc7l\xa7\xcd\xa7 \xacM>\xbc\xbb'
        var1 = {}
        var2 = module0.tzUTC(**var1)
        assert var2 is not None
        var3 = var2.dst(var0)
        assert var3 is not None
        var4 = module0.tzUTC()
        assert var4 is not None
        var5 = None
        var6 = {}
        var7 = module0.tzUTC(**var6)
        assert var7 is not None
        var8 = var7.dst(var5)
        assert var8 is not None
        var9 = [var5, var6, var8]
        var10 = module0.tzUTC(*var9)
        assert var10 is not None
        var11 = -416
        var12 = {var11, var11}
        var13 = [var12, var11]
        var14 = b'7\r\xbf\xc5\x83P\xd2\x1fZ8\x1e\xf8 \xb1@\xe4kg'
        var15 = [var14, var14, var14]
        var16 = module0.tzUTC(*var15)
        assert var16 is not None
        var17 = var16.dst(var13)
        assert var17 is not None
        var18 = -2019
        var19 = None
        var20 = [var19]
        var21 = module0.tzUTC(*var20)
        assert var21 is not None
        var22 = var21.dst(var18)
        assert var22 is not None
        var23 = module0.tzUTC()
        assert var23 is not None
        var24 = 'Akbe`@a~EQ{/?mH@%'
        var25 = var21.dst(var24)
        assert var25 is not None
        var26 = None
        var27 = module0.tzUTC()
        assert var27 is not None
        var28 = var27.utcoffset(var26)
        assert var28 is not None
        var29 = module0.tzUTC()
        assert var29 is not None
        var30 = None
        var31 = {}
        var32 = module0.tzUTC(**var31)
        assert var32 is not None
        var33 = var32.dst(var30)
        assert var33 is not None
        var34 = module0.tzUTC()
        assert var34 is not None
        var35 = -2019
        var36 = None
        var37 = [var36]
        var38 = module0.tzUTC(*var37)
        assert var38 is not None
        var39 = var38.dst(var35)
        assert var39 is not None
        var40 = module0.tzUTC()
        assert var40 is not None
        var41 = {var39, var40}
        var42 = module0.utc_aware(var41)
        assert var42 is not None
        var43 = 'sZ3|O'
        var44 = {var43: var12}
        var45 = module0.utc_method(**var44)
    except BaseException:
        pass


def test_case_62():
    try:
        var0 = module0.tzUTC()
        assert var0 is not None
        var1 = -2019
        var2 = None
        var3 = [var2]
        var4 = module0.tzUTC(*var3)
        assert var4 is not None
        var5 = var4.dst(var1)
        assert var5 is not None
        var6 = module0.tzUTC()
        assert var6 is not None
        var7 = {var5, var6}
        var8 = module0.utc_aware(var7)
        assert var8 is not None
        var9 = module0.tzUTC()
        assert var9 is not None
        var10 = module0.tzUTC()
        assert var10 is not None
        var11 = var10.utcoffset(var9)
        assert var11 is not None
        var12 = 2445
        var13 = var10.utcoffset(var12)
        assert var13 is not None
        var14 = module0.tzUTC()
        assert var14 is not None
        var15 = -2019
        var16 = None
        var17 = [var16]
        var18 = module0.tzUTC(*var17)
        assert var18 is not None
        var19 = var18.dst(var15)
        assert var19 is not None
        var20 = None
        var21 = module0.utc_aware(var20)
        assert var21 is not None
        var22 = -2019
        var23 = None
        var24 = [var23]
        var25 = module0.tzUTC(*var24)
        assert var25 is not None
        var26 = var25.dst(var22)
        assert var26 is not None
        var27 = {var26: var24, var26: var22}
        var28 = module0.utc_aware(var27)
        assert var28 is not None
        var29 = b'J\xc2-p\xc7l\xa7\xcd\xa7 \xacM>\xbc\xbb'
        var30 = {}
        var31 = module0.tzUTC(**var30)
        assert var31 is not None
        var32 = var31.dst(var29)
        assert var32 is not None
        var33 = set()
        var34 = var31.dst(var33)
        assert var34 is not None
        var35 = -2019
        var36 = None
        var37 = [var36]
        var38 = module0.tzUTC(*var37)
        assert var38 is not None
        var39 = var38.dst(var35)
        assert var39 is not None
        var40 = module0.tzUTC()
        assert var40 is not None
        var41 = b'J\xc2-p\xc7l\xa7\xcd\xa7 \xacM>\xbc\xbb'
        var42 = {}
        var43 = module0.tzUTC(**var42)
        assert var43 is not None
        var44 = var43.dst(var41)
        assert var44 is not None
        var45 = 0.8
        var46 = module0.tzUTC()
        assert var46 is not None
        var47 = var46.utcoffset(var45)
        assert var47 is not None
        var48 = None
        var49 = module0.tzUTC()
        assert var49 is not None
        var50 = var49.utcoffset(var48)
        assert var50 is not None
        var51 = False
        var52 = module0.isoformat(var51)
    except BaseException:
        pass


def test_case_63():
    try:
        var0 = -2019
        var1 = None
        var2 = [var1]
        var3 = module0.tzUTC(*var2)
        assert var3 is not None
        var4 = var3.dst(var0)
        assert var4 is not None
        var5 = module0.tzUTC()
        assert var5 is not None
        var6 = module0.tzUTC()
        assert var6 is not None
        var7 = var6.utcoffset(var5)
        assert var7 is not None
        var8 = b'\x0b@\xa8\x92\x18\xf75~y\xb6\xfbJ\x81\t'
        var9 = module0.utc_aware(var8)
        assert var9 is not None
        var10 = module0.tzUTC()
        assert var10 is not None
        var11 = -2019
        var12 = None
        var13 = [var12]
        var14 = module0.tzUTC(*var13)
        assert var14 is not None
        var15 = var14.dst(var11)
        assert var15 is not None
        var16 = None
        var17 = module0.utc_aware(var16)
        assert var17 is not None
        var18 = None
        var19 = module0.tzUTC()
        assert var19 is not None
        var20 = var19.utcoffset(var18)
        assert var20 is not None
        var21 = -2019
        var22 = None
        var23 = [var22]
        var24 = module0.tzUTC(*var23)
        assert var24 is not None
        var25 = var24.dst(var21)
        assert var25 is not None
        var26 = {var25: var23, var25: var21}
        var27 = module0.utc_aware(var26)
        assert var27 is not None
        var28 = module0.tzUTC()
        assert var28 is not None
        var29 = module0.isoformat(var6)
    except BaseException:
        pass


def test_case_64():
    try:
        var0 = module0.tzUTC()
        assert var0 is not None
        var1 = module0.tzUTC()
        assert var1 is not None
        var2 = var1.utcoffset(var0)
        assert var2 is not None
        var3 = -2019
        var4 = None
        var5 = [var4]
        var6 = module0.tzUTC(*var5)
        assert var6 is not None
        var7 = var6.dst(var3)
        assert var7 is not None
        var8 = module0.tzUTC()
        assert var8 is not None
        var9 = 'Akbe`@a~EQ{/?mH@%'
        var10 = var6.dst(var9)
        assert var10 is not None
        var11 = -2019
        var12 = None
        var13 = [var12]
        var14 = module0.tzUTC(*var13)
        assert var14 is not None
        var15 = var14.dst(var11)
        assert var15 is not None
        var16 = {var15: var13, var15: var11}
        var17 = module0.utc_aware(var16)
        assert var17 is not None
        var18 = b'J\xc2-p\xc7l\xa7\xcd\xa7 \xacM>\xbc\xbb'
        var19 = {}
        var20 = module0.tzUTC(**var19)
        assert var20 is not None
        var21 = var20.dst(var18)
        assert var21 is not None
        var22 = set()
        var23 = var20.dst(var22)
        assert var23 is not None
        var24 = ()
        var25 = module0.tzUTC()
        assert var25 is not None
        var26 = [var25]
        var27 = module0.tzUTC(*var26)
        assert var27 is not None
        var28 = [var27]
        var29 = module0.tzUTC(*var28)
        assert var29 is not None
        var30 = var29.utcoffset(var24)
        assert var30 is not None
        var31 = None
        var32 = {}
        var33 = module0.tzUTC(**var32)
        assert var33 is not None
        var34 = var33.dst(var31)
        assert var34 is not None
        var35 = None
        var36 = module0.tzUTC()
        assert var36 is not None
        var37 = var36.utcoffset(var35)
        assert var37 is not None
        var38 = True
        var39 = 'C*{ns|F%[TS|\n_d>_'
        var40 = var38, var39, var38, var24
        var41 = var31.utcoffset(var40)
    except BaseException:
        pass


def test_case_65():
    try:
        var0 = module0.tzUTC()
        assert var0 is not None
        var1 = -2019
        var2 = None
        var3 = [var2]
        var4 = module0.tzUTC(*var3)
        assert var4 is not None
        var5 = var4.dst(var1)
        assert var5 is not None
        var6 = module0.tzUTC()
        assert var6 is not None
        var7 = {var5, var6}
        var8 = module0.utc_aware(var7)
        assert var8 is not None
        var9 = module0.tzUTC()
        assert var9 is not None
        var10 = -2019
        var11 = None
        var12 = [var11]
        var13 = module0.tzUTC(*var12)
        assert var13 is not None
        var14 = var13.dst(var10)
        assert var14 is not None
        var15 = module0.tzUTC()
        assert var15 is not None
        var16 = module0.tzUTC()
        assert var16 is not None
        var17 = var16.utcoffset(var15)
        assert var17 is not None
        var18 = b'J\xc2-p\xc7l\xa7\xcd\xa7 \xacM>\xbc\xbb'
        var19 = {}
        var20 = module0.tzUTC(**var19)
        assert var20 is not None
        var21 = var20.dst(var18)
        assert var21 is not None
        var22 = -2019
        var23 = None
        var24 = [var23]
        var25 = module0.tzUTC(*var24)
        assert var25 is not None
        var26 = var25.dst(var22)
        assert var26 is not None
        var27 = {var26: var24, var26: var22}
        var28 = module0.utc_aware(var27)
        assert var28 is not None
        var29 = module0.tzUTC()
        assert var29 is not None
        var30 = b'\x0b@\xa8\x92\x18\xf75~y\xb6\xfbJ\x81\t'
        var31 = module0.utc_aware(var30)
        assert var31 is not None
        var32 = module0.utc_method()
    except BaseException:
        pass


def test_case_66():
    try:
        var0 = module0.tzUTC()
        assert var0 is not None
        var1 = None
        var2 = {}
        var3 = module0.tzUTC(**var2)
        assert var3 is not None
        var4 = var3.dst(var1)
        assert var4 is not None
        var5 = [var1, var2, var4]
        var6 = module0.tzUTC(*var5)
        assert var6 is not None
        var7 = b'\x0b@\xa8\x92\x18\xf75~y\xb6\xfbJ\x81\t'
        var8 = module0.utc_aware(var7)
        assert var8 is not None
        var9 = module0.tzUTC()
        assert var9 is not None
        var10 = None
        var11 = {}
        var12 = module0.tzUTC(**var11)
        assert var12 is not None
        var13 = var12.dst(var10)
        assert var13 is not None
        var14 = [var10, var11, var13]
        var15 = module0.tzUTC(*var14)
        assert var15 is not None
        var16 = None
        var17 = var15.dst(var16)
        assert var17 is not None
        var18 = -2019
        var19 = None
        var20 = [var19]
        var21 = module0.tzUTC(*var20)
        assert var21 is not None
        var22 = var21.dst(var18)
        assert var22 is not None
        var23 = {var22: var20, var22: var18}
        var24 = module0.utc_aware(var23)
        assert var24 is not None
        var25 = None
        var26 = module0.tzUTC()
        assert var26 is not None
        var27 = var26.utcoffset(var25)
        assert var27 is not None
        var28 = module0.utc_method()
    except BaseException:
        pass


def test_case_67():
    try:
        var0 = b'J\xc2-p\xc7l\xa7\xcd\xa7 \xacM>\xbc\xbb'
        var1 = {}
        var2 = module0.tzUTC(**var1)
        assert var2 is not None
        var3 = var2.dst(var0)
        assert var3 is not None
        var4 = None
        var5 = module0.tzUTC()
        assert var5 is not None
        var6 = var5.utcoffset(var4)
        assert var6 is not None
        var7 = True
        var8 = module0.isoformat(var7)
    except BaseException:
        pass


def test_case_68():
    try:
        var0 = module0.tzUTC()
        assert var0 is not None
        var1 = None
        var2 = {}
        var3 = module0.tzUTC(**var2)
        assert var3 is not None
        var4 = var3.dst(var1)
        assert var4 is not None
        var5 = [var1, var2, var4]
        var6 = module0.tzUTC(*var5)
        assert var6 is not None
        var7 = module0.tzUTC()
        assert var7 is not None
        var8 = module0.tzUTC()
        assert var8 is not None
        var9 = var8.utcoffset(var7)
        assert var9 is not None
        var10 = 2445
        var11 = var8.utcoffset(var10)
        assert var11 is not None
        var12 = -2019
        var13 = None
        var14 = [var13]
        var15 = module0.tzUTC(*var14)
        assert var15 is not None
        var16 = var15.dst(var12)
        assert var16 is not None
        var17 = module0.tzUTC()
        assert var17 is not None
        var18 = 'Akbe`@a~EQ{/?mH@%'
        var19 = var15.dst(var18)
        assert var19 is not None
        var20 = None
        var21 = {}
        var22 = module0.tzUTC(**var21)
        assert var22 is not None
        var23 = var22.dst(var20)
        assert var23 is not None
        var24 = module0.utc_method(**var2)
    except BaseException:
        pass


def test_case_69():
    try:
        var0 = '%\x0c~?$J6HlT#H!GL2lbp{'
        var1 = module0.tzUTC()
        assert var1 is not None
        var2 = 'Content-Disposition'
        var3 = {var0: var0, var0: var1, var2: var2}
        var4 = module0.utc_method(**var3)
    except BaseException:
        pass


def test_case_70():
    try:
        var0 = -2019
        var1 = None
        var2 = [var1]
        var3 = module0.tzUTC(*var2)
        assert var3 is not None
        var4 = var3.dst(var0)
        assert var4 is not None
        var5 = module0.tzUTC()
        assert var5 is not None
        var6 = 'Akbe`@a~EQ{/?mH@%'
        var7 = var3.dst(var6)
        assert var7 is not None
        var8 = module0.tzUTC()
        assert var8 is not None
        var9 = None
        var10 = {}
        var11 = module0.tzUTC(**var10)
        assert var11 is not None
        var12 = var11.dst(var9)
        assert var12 is not None
        var13 = [var9, var10, var12]
        var14 = module0.tzUTC(*var13)
        assert var14 is not None
        var15 = -2019
        var16 = None
        var17 = [var16]
        var18 = module0.tzUTC(*var17)
        assert var18 is not None
        var19 = var18.dst(var15)
        assert var19 is not None
        var20 = -2019
        var21 = None
        var22 = [var21]
        var23 = module0.tzUTC(*var22)
        assert var23 is not None
        var24 = var23.dst(var20)
        assert var24 is not None
        var25 = {var24: var22, var24: var20}
        var26 = module0.utc_aware(var25)
        assert var26 is not None
        var27 = module0.tzUTC()
        assert var27 is not None
        var28 = None
        var29 = {}
        var30 = module0.tzUTC(**var29)
        assert var30 is not None
        var31 = var30.dst(var28)
        assert var31 is not None
        var32 = [var28, var29, var31]
        var33 = module0.tzUTC(*var32)
        assert var33 is not None
        var34 = None
        var35 = var33.dst(var34)
        assert var35 is not None
        var36 = b'J\xc2-p\xc7l\xa7\xcd\xa7 \xacM>\xbc\xbb'
        var37 = {}
        var38 = module0.tzUTC(**var37)
        assert var38 is not None
        var39 = var38.dst(var36)
        assert var39 is not None
        var40 = set()
        var41 = var38.dst(var40)
        assert var41 is not None
        var42 = module0.tzUTC()
        assert var42 is not None
        var43 = module0.tzUTC()
        assert var43 is not None
        var44 = var43.utcoffset(var42)
        assert var44 is not None
        var45 = 2445
        var46 = var43.utcoffset(var45)
        assert var46 is not None
        var47 = None
        var48 = module0.tzUTC()
        assert var48 is not None
        var49 = var48.utcoffset(var47)
        assert var49 is not None
        var50 = module0.utc_method(*var32)
    except BaseException:
        pass


def test_case_71():
    try:
        var0 = -2019
        var1 = None
        var2 = [var1]
        var3 = module0.tzUTC(*var2)
        assert var3 is not None
        var4 = var3.dst(var0)
        assert var4 is not None
        var5 = module0.tzUTC()
        assert var5 is not None
        var6 = module0.tzUTC()
        assert var6 is not None
        var7 = module0.tzUTC()
        assert var7 is not None
        var8 = var7.utcoffset(var6)
        assert var8 is not None
        var9 = -2019
        var10 = None
        var11 = [var10]
        var12 = module0.tzUTC(*var11)
        assert var12 is not None
        var13 = var12.dst(var9)
        assert var13 is not None
        var14 = module0.tzUTC()
        assert var14 is not None
        var15 = 'Akbe`@a~EQ{/?mH@%'
        var16 = var12.dst(var15)
        assert var16 is not None
        var17 = -2019
        var18 = None
        var19 = [var18]
        var20 = module0.tzUTC(*var19)
        assert var20 is not None
        var21 = var20.dst(var17)
        assert var21 is not None
        var22 = {var21: var19, var21: var17}
        var23 = module0.utc_aware(var22)
        assert var23 is not None
        var24 = module0.tzUTC()
        assert var24 is not None
        var25 = module0.tzUTC()
        assert var25 is not None
        var26 = module0.tzUTC()
        assert var26 is not None
        var27 = var26.utcoffset(var25)
        assert var27 is not None
        var28 = 2445
        var29 = var26.utcoffset(var28)
        assert var29 is not None
        var30 = ()
        var31 = module0.tzUTC()
        assert var31 is not None
        var32 = [var31]
        var33 = module0.tzUTC(*var32)
        assert var33 is not None
        var34 = [var33]
        var35 = module0.tzUTC(*var34)
        assert var35 is not None
        var36 = var35.utcoffset(var30)
        assert var36 is not None
        var37 = 0.8
        var38 = module0.tzUTC()
        assert var38 is not None
        var39 = var38.utcoffset(var37)
        assert var39 is not None
        var40 = b'\x0b@\xa8\x92\x18\xf75~y\xb6\xfbJ\x81\t'
        var41 = module0.utc_aware(var40)
        assert var41 is not None
        var42 = b'J\xc2-p\xc7l\xa7\xcd\xa7 \xacM>\xbc\xbb'
        var43 = {}
        var44 = module0.tzUTC(**var43)
        assert var44 is not None
        var45 = var44.dst(var42)
        assert var45 is not None
        var46 = module0.utc_method(**var43)
    except BaseException:
        pass


def test_case_72():
    try:
        var0 = 2118
        var1 = module0.isoformat(var0)
    except BaseException:
        pass


def test_case_73():
    try:
        var0 = 0.8
        var1 = module0.tzUTC()
        assert var1 is not None
        var2 = var1.utcoffset(var0)
        assert var2 is not None
        var3 = -2019
        var4 = None
        var5 = [var4]
        var6 = module0.tzUTC(*var5)
        assert var6 is not None
        var7 = var6.dst(var3)
        assert var7 is not None
        var8 = module0.tzUTC()
        assert var8 is not None
        var9 = module0.tzUTC()
        assert var9 is not None
        var10 = var9.utcoffset(var8)
        assert var10 is not None
        var11 = module0.isoformat(var8)
    except BaseException:
        pass


def test_case_74():
    try:
        var0 = b'J\xc2-p\xc7l\xa7\xcd\xa7 \xacM>\xbc\xbb'
        var1 = {}
        var2 = module0.tzUTC(**var1)
        assert var2 is not None
        var3 = var2.dst(var0)
        assert var3 is not None
        var4 = set()
        var5 = var2.dst(var4)
        assert var5 is not None
        var6 = module0.tzUTC()
        assert var6 is not None
        var7 = module0.tzUTC()
        assert var7 is not None
        var8 = var7.utcoffset(var6)
        assert var8 is not None
        var9 = 2445
        var10 = var7.utcoffset(var9)
        assert var10 is not None
        var11 = module0.tzUTC()
        assert var11 is not None
        var12 = module0.tzUTC()
        assert var12 is not None
        var13 = var12.utcoffset(var11)
        assert var13 is not None
        var14 = -416
        var15 = {var14, var14}
        var16 = [var15, var14]
        var17 = b'7\r\xbf\xc5\x83P\xd2\x1fZ8\x1e\xf8 \xb1@\xe4kg'
        var18 = [var17, var17, var17]
        var19 = module0.tzUTC(*var18)
        assert var19 is not None
        var20 = var19.dst(var16)
        assert var20 is not None
        var21 = b'J\xc2-p\xc7l\xa7\xcd\xa7 \xacM>\xbc\xbb'
        var22 = {}
        var23 = module0.tzUTC(**var22)
        assert var23 is not None
        var24 = var23.dst(var21)
        assert var24 is not None
        var25 = module0.tzUTC()
        assert var25 is not None
        var26 = -2019
        var27 = None
        var28 = [var27]
        var29 = module0.tzUTC(*var28)
        assert var29 is not None
        var30 = var29.dst(var26)
        assert var30 is not None
        var31 = None
        var32 = module0.utc_aware(var31)
        assert var32 is not None
        var33 = 0.8
        var34 = module0.tzUTC()
        assert var34 is not None
        var35 = var34.utcoffset(var33)
        assert var35 is not None
        var36 = {var33, var16, var16}
    except BaseException:
        pass


def test_case_75():
    try:
        var0 = True
        var1 = module0.isoformat(var0)
    except BaseException:
        pass


def test_case_76():
    try:
        var0 = b'J\xc2-p\xc7l\xa7\xcd\xa7 \xacM>\xbc\xbb'
        var1 = {}
        var2 = module0.tzUTC(**var1)
        assert var2 is not None
        var3 = var2.dst(var0)
        assert var3 is not None
        var4 = -2019
        var5 = None
        var6 = [var5]
        var7 = module0.tzUTC(*var6)
        assert var7 is not None
        var8 = var7.dst(var4)
        assert var8 is not None
        var9 = module0.tzUTC()
        assert var9 is not None
        var10 = module0.tzUTC()
        assert var10 is not None
        var11 = -2019
        var12 = None
        var13 = [var12]
        var14 = module0.tzUTC(*var13)
        assert var14 is not None
        var15 = var14.dst(var11)
        assert var15 is not None
        var16 = module0.tzUTC()
        assert var16 is not None
        var17 = {var15, var16}
        var18 = module0.utc_aware(var17)
        assert var18 is not None
        var19 = module0.tzUTC()
        assert var19 is not None
        var20 = -2019
        var21 = None
        var22 = [var21]
        var23 = module0.tzUTC(*var22)
        assert var23 is not None
        var24 = var23.dst(var20)
        assert var24 is not None
        var25 = None
        var26 = module0.utc_aware(var25)
        assert var26 is not None
        var27 = 0.8
        var28 = module0.tzUTC()
        assert var28 is not None
        var29 = var28.utcoffset(var27)
        assert var29 is not None
        var30 = module0.tzUTC()
        assert var30 is not None
        var31 = module0.tzUTC()
        assert var31 is not None
        var32 = None
        var33 = {}
        var34 = module0.tzUTC(**var33)
        assert var34 is not None
        var35 = var34.dst(var32)
        assert var35 is not None
        var36 = [var32, var33, var35]
        var37 = module0.tzUTC(*var36)
        assert var37 is not None
        var38 = -2019
        var39 = None
        var40 = [var39]
        var41 = module0.tzUTC(*var40)
        assert var41 is not None
        var42 = var41.dst(var38)
        assert var42 is not None
        var43 = {var42: var40, var42: var38}
        var44 = module0.utc_aware(var43)
        assert var44 is not None
        var45 = module0.isoformat(var17)
    except BaseException:
        pass


def test_case_77():
    try:
        var0 = -2019
        var1 = None
        var2 = [var1]
        var3 = module0.tzUTC(*var2)
        assert var3 is not None
        var4 = var3.dst(var0)
        assert var4 is not None
        var5 = {var4: var2, var4: var0}
        var6 = module0.utc_aware(var5)
        assert var6 is not None
        var7 = module0.tzUTC()
        assert var7 is not None
        var8 = 0.8
        var9 = module0.tzUTC()
        assert var9 is not None
        var10 = var9.utcoffset(var8)
        assert var10 is not None
        var11 = -2019
        var12 = None
        var13 = [var12]
        var14 = module0.tzUTC(*var13)
        assert var14 is not None
        var15 = var14.dst(var11)
        assert var15 is not None
        var16 = module0.tzUTC()
        assert var16 is not None
        var17 = None
        var18 = {}
        var19 = module0.tzUTC(**var18)
        assert var19 is not None
        var20 = var19.dst(var17)
        assert var20 is not None
        var21 = [var17, var18, var20]
        var22 = module0.tzUTC(*var21)
        assert var22 is not None
        var23 = module0.tzUTC()
        assert var23 is not None
        var24 = -2019
        var25 = None
        var26 = [var25]
        var27 = module0.tzUTC(*var26)
        assert var27 is not None
        var28 = var27.dst(var24)
        assert var28 is not None
        var29 = module0.tzUTC()
        assert var29 is not None
        var30 = {var28, var29}
        var31 = module0.utc_aware(var30)
        assert var31 is not None
        var32 = -2019
        var33 = None
        var34 = [var33]
        var35 = module0.tzUTC(*var34)
        assert var35 is not None
        var36 = var35.dst(var32)
        assert var36 is not None
        var37 = module0.tzUTC()
        assert var37 is not None
        var38 = None
        var39 = {}
        var40 = module0.tzUTC(**var39)
        assert var40 is not None
        var41 = var40.dst(var38)
        assert var41 is not None
        var42 = b'J\xc2-p\xc7l\xa7\xcd\xa7 \xacM>\xbc\xbb'
        var43 = {}
        var44 = module0.tzUTC(**var43)
        assert var44 is not None
        var45 = var44.dst(var42)
        assert var45 is not None
        var46 = module0.isoformat(var16)
    except BaseException:
        pass


def test_case_78():
    try:
        var0 = {}
        var1 = module0.utc_method(**var0)
    except BaseException:
        pass


def test_case_79():
    try:
        var0 = b'J\xc2-p\xc7l\xa7\xcd\xa7 \xacM>\xbc\xbb'
        var1 = {}
        var2 = module0.tzUTC(**var1)
        assert var2 is not None
        var3 = var2.dst(var0)
        assert var3 is not None
        var4 = set()
        var5 = var2.dst(var4)
        assert var5 is not None
        var6 = module0.tzUTC()
        assert var6 is not None
        var7 = None
        var8 = {}
        var9 = module0.tzUTC(**var8)
        assert var9 is not None
        var10 = var9.dst(var7)
        assert var10 is not None
        var11 = [var7, var8, var10]
        var12 = module0.tzUTC(*var11)
        assert var12 is not None
        var13 = module0.tzUTC()
        assert var13 is not None
        var14 = None
        var15 = {}
        var16 = module0.tzUTC(**var15)
        assert var16 is not None
        var17 = var16.dst(var14)
        assert var17 is not None
        var18 = [var14, var15, var17]
        var19 = module0.tzUTC(*var18)
        assert var19 is not None
        var20 = None
        var21 = var19.dst(var20)
        assert var21 is not None
        var22 = -2019
        var23 = None
        var24 = [var23]
        var25 = module0.tzUTC(*var24)
        assert var25 is not None
        var26 = var25.dst(var22)
        assert var26 is not None
        var27 = {var26: var24, var26: var22}
        var28 = module0.utc_aware(var27)
        assert var28 is not None
        var29 = module0.tzUTC()
        assert var29 is not None
        var30 = module0.tzUTC()
        assert var30 is not None
        var31 = -2019
        var32 = None
        var33 = [var32]
        var34 = module0.tzUTC(*var33)
        assert var34 is not None
        var35 = var34.dst(var31)
        assert var35 is not None
        var36 = module0.tzUTC()
        assert var36 is not None
        var37 = ()
        var38 = module0.tzUTC()
        assert var38 is not None
        var39 = [var38]
        var40 = module0.tzUTC(*var39)
        assert var40 is not None
        var41 = [var40]
        var42 = module0.tzUTC(*var41)
        assert var42 is not None
        var43 = var42.utcoffset(var37)
        assert var43 is not None
        var44 = b'\x0b@\xa8\x92\x18\xf75~y\xb6\xfbJ\x81\t'
        var45 = module0.utc_aware(var44)
        assert var45 is not None
        var46 = module0.utc_method(**var8)
    except BaseException:
        pass


def test_case_80():
    try:
        var0 = None
        var1 = module0.tzUTC()
        assert var1 is not None
        var2 = var1.utcoffset(var0)
        assert var2 is not None
        var3 = module0.tzUTC()
        assert var3 is not None
        var4 = None
        var5 = {}
        var6 = module0.tzUTC(**var5)
        assert var6 is not None
        var7 = var6.dst(var4)
        assert var7 is not None
        var8 = [var4, var5, var7]
        var9 = module0.tzUTC(*var8)
        assert var9 is not None
        var10 = None
        var11 = {}
        var12 = module0.tzUTC(**var11)
        assert var12 is not None
        var13 = var12.dst(var10)
        assert var13 is not None
        var14 = True
        var15 = {var14: var14, var14: var14, var14: var14, var14: var14}
        var16 = module0.tzUTC()
        assert var16 is not None
        var17 = var16.utcoffset(var15)
        assert var17 is not None
        var18 = module0.utc_method()
    except BaseException:
        pass


def test_case_81():
    try:
        var0 = None
        var1 = module0.tzUTC()
        assert var1 is not None
        var2 = var1.utcoffset(var0)
        assert var2 is not None
        var3 = None
        var4 = {}
        var5 = module0.tzUTC(**var4)
        assert var5 is not None
        var6 = var5.dst(var3)
        assert var6 is not None
        var7 = module0.tzUTC()
        assert var7 is not None
        var8 = var7.utcoffset(var0)
        assert var8 is not None
        var9 = module0.tzUTC()
        assert var9 is not None
        var10 = module0.tzUTC()
        assert var10 is not None
        var11 = var10.utcoffset(var9)
        assert var11 is not None
        var12 = 2445
        var13 = var10.utcoffset(var12)
        assert var13 is not None
        var14 = None
        var15 = module0.tzUTC()
        assert var15 is not None
        var16 = var15.utcoffset(var14)
        assert var16 is not None
        var17 = -2019
        var18 = None
        var19 = [var18]
        var20 = module0.tzUTC(*var19)
        assert var20 is not None
        var21 = var20.dst(var17)
        assert var21 is not None
        var22 = b'J\xc2-p\xc7l\xa7\xcd\xa7 \xacM>\xbc\xbb'
        var23 = {}
        var24 = module0.tzUTC(**var23)
        assert var24 is not None
        var25 = var24.dst(var22)
        assert var25 is not None
        var26 = -2019
        var27 = None
        var28 = [var27]
        var29 = module0.tzUTC(*var28)
        assert var29 is not None
        var30 = var29.dst(var26)
        assert var30 is not None
        var31 = module0.tzUTC()
        assert var31 is not None
        var32 = module0.tzUTC()
        assert var32 is not None
        var33 = None
        var34 = {}
        var35 = module0.tzUTC(**var34)
        assert var35 is not None
        var36 = var35.dst(var33)
        assert var36 is not None
        var37 = [var33, var34, var36]
        var38 = module0.tzUTC(*var37)
        assert var38 is not None
        var39 = None
        var40 = var38.dst(var39)
        assert var40 is not None
        var41 = module0.tzUTC()
        assert var41 is not None
        var42 = module0.utc_method()
    except BaseException:
        pass


def test_case_82():
    try:
        var0 = None
        var1 = module0.tzUTC()
        assert var1 is not None
        var2 = var1.utcoffset(var0)
        assert var2 is not None
        var3 = module0.utc_method()
    except BaseException:
        pass


def test_case_83():
    try:
        var0 = -2019
        var1 = None
        var2 = [var1]
        var3 = module0.tzUTC(*var2)
        assert var3 is not None
        var4 = var3.dst(var0)
        assert var4 is not None
        var5 = module0.tzUTC()
        assert var5 is not None
        var6 = '5\x0cMtw@-H)M4(\tky/4q'
        var7 = var3.utcoffset(var6)
        assert var7 is not None
        var8 = module0.tzUTC()
        assert var8 is not None
        var9 = module0.tzUTC()
        assert var9 is not None
        var10 = var9.utcoffset(var8)
        assert var10 is not None
        var11 = 2445
        var12 = var9.utcoffset(var11)
        assert var12 is not None
        var13 = module0.tzUTC()
        assert var13 is not None
        var14 = -2019
        var15 = None
        var16 = [var15]
        var17 = module0.tzUTC(*var16)
        assert var17 is not None
        var18 = var17.dst(var14)
        assert var18 is not None
        var19 = None
        var20 = module0.utc_aware(var19)
        assert var20 is not None
        var21 = module0.tzUTC()
        assert var21 is not None
        var22 = module0.tzUTC()
        assert var22 is not None
        var23 = var22.utcoffset(var21)
        assert var23 is not None
        var24 = None
        var25 = {}
        var26 = module0.tzUTC(**var25)
        assert var26 is not None
        var27 = var26.dst(var24)
        assert var27 is not None
        var28 = {var16: var11}
    except BaseException:
        pass


def test_case_84():
    try:
        var0 = b'J\xc2-p\xc7l\xa7\xcd\xa7 \xacM>\xbc\xbb'
        var1 = {}
        var2 = module0.tzUTC(**var1)
        assert var2 is not None
        var3 = var2.dst(var0)
        assert var3 is not None
        var4 = None
        var5 = module0.tzUTC()
        assert var5 is not None
        var6 = var5.utcoffset(var4)
        assert var6 is not None
        var7 = None
        var8 = {}
        var9 = module0.tzUTC(**var8)
        assert var9 is not None
        var10 = var9.dst(var7)
        assert var10 is not None
        var11 = module0.tzUTC()
        assert var11 is not None
        var12 = var11.utcoffset(var4)
        assert var12 is not None
        var13 = -2019
        var14 = None
        var15 = [var14]
        var16 = module0.tzUTC(*var15)
        assert var16 is not None
        var17 = var16.dst(var13)
        assert var17 is not None
        var18 = {var17: var15, var17: var13}
        var19 = module0.utc_aware(var18)
        assert var19 is not None
        var20 = module0.tzUTC()
        assert var20 is not None
        var21 = {var17}
        var22 = var7.dst(var21)
    except BaseException:
        pass


def test_case_85():
    try:
        var0 = -2337
        var1 = {var0: var0}
        var2 = module0.isoformat(var1)
    except BaseException:
        pass


def test_case_86():
    try:
        var0 = None
        var1 = module0.tzUTC()
        assert var1 is not None
        var2 = var1.utcoffset(var0)
        assert var2 is not None
        var3 = None
        var4 = {}
        var5 = module0.tzUTC(**var4)
        assert var5 is not None
        var6 = var5.dst(var3)
        assert var6 is not None
        var7 = module0.tzUTC()
        assert var7 is not None
        var8 = var7.utcoffset(var0)
        assert var8 is not None
        var9 = -2019
        var10 = None
        var11 = [var10]
        var12 = module0.tzUTC(*var11)
        assert var12 is not None
        var13 = var12.dst(var9)
        assert var13 is not None
        var14 = {var13: var11, var13: var9}
        var15 = module0.utc_aware(var14)
        assert var15 is not None
        var16 = True
        var17 = {var16: var16, var16: var16, var16: var16, var16: var16}
        var18 = module0.tzUTC()
        assert var18 is not None
        var19 = var18.utcoffset(var17)
        assert var19 is not None
        var20 = -2019
        var21 = None
        var22 = [var21]
        var23 = module0.tzUTC(*var22)
        assert var23 is not None
        var24 = var23.dst(var20)
        assert var24 is not None
        var25 = {var24: var22, var24: var20}
        var26 = module0.utc_aware(var25)
        assert var26 is not None
        var27 = module0.tzUTC()
        assert var27 is not None
        var28 = module0.utc_method()
    except BaseException:
        pass


def test_case_87():
    try:
        var0 = module0.tzUTC()
        assert var0 is not None
        var1 = module0.tzUTC()
        assert var1 is not None
        var2 = var1.utcoffset(var0)
        assert var2 is not None
        var3 = 2445
        var4 = var1.utcoffset(var3)
        assert var4 is not None
        var5 = -2019
        var6 = None
        var7 = [var6]
        var8 = module0.tzUTC(*var7)
        assert var8 is not None
        var9 = var8.dst(var5)
        assert var9 is not None
        var10 = module0.tzUTC()
        assert var10 is not None
        var11 = module0.utc_method(*var7)
    except BaseException:
        pass


def test_case_88():
    try:
        var0 = module0.tzUTC()
        assert var0 is not None
        var1 = True
        var2 = {var1: var1, var1: var1, var1: var1, var1: var1}
        var3 = module0.tzUTC()
        assert var3 is not None
        var4 = var3.utcoffset(var2)
        assert var4 is not None
        var5 = module0.tzUTC()
        assert var5 is not None
        var6 = module0.tzUTC()
        assert var6 is not None
        var7 = var6.utcoffset(var5)
        assert var7 is not None
        var8 = b'J\xc2-p\xc7l\xa7\xcd\xa7 \xacM>\xbc\xbb'
        var9 = {}
        var10 = module0.tzUTC(**var9)
        assert var10 is not None
        var11 = var10.dst(var8)
        assert var11 is not None
        var12 = module0.tzUTC()
        assert var12 is not None
        var13 = -2019
        var14 = None
        var15 = [var14]
        var16 = module0.tzUTC(*var15)
        assert var16 is not None
        var17 = var16.dst(var13)
        assert var17 is not None
        var18 = None
        var19 = module0.utc_aware(var18)
        assert var19 is not None
        var20 = module0.tzUTC()
        assert var20 is not None
        var21 = -2019
        var22 = None
        var23 = [var22]
        var24 = module0.tzUTC(*var23)
        assert var24 is not None
        var25 = var24.dst(var21)
        assert var25 is not None
        var26 = module0.tzUTC()
        assert var26 is not None
        var27 = {var25, var26}
        var28 = module0.utc_aware(var27)
        assert var28 is not None
        var29 = module0.isoformat(var18)
    except BaseException:
        pass


def test_case_89():
    try:
        var0 = -2019
        var1 = None
        var2 = [var1]
        var3 = module0.tzUTC(*var2)
        assert var3 is not None
        var4 = var3.dst(var0)
        assert var4 is not None
        var5 = module0.tzUTC()
        assert var5 is not None
        var6 = '5\x0cMtw@-H)M4(\tky/4q'
        var7 = var3.utcoffset(var6)
        assert var7 is not None
        var8 = -2019
        var9 = None
        var10 = [var9]
        var11 = module0.tzUTC(*var10)
        assert var11 is not None
        var12 = var11.dst(var8)
        assert var12 is not None
        var13 = {var12: var10, var12: var8}
        var14 = module0.utc_aware(var13)
        assert var14 is not None
        var15 = ()
        var16 = module0.tzUTC()
        assert var16 is not None
        var17 = [var16]
        var18 = module0.tzUTC(*var17)
        assert var18 is not None
        var19 = [var18]
        var20 = module0.tzUTC(*var19)
        assert var20 is not None
        var21 = var20.utcoffset(var15)
        assert var21 is not None
        var22 = module0.tzUTC()
        assert var22 is not None
        var23 = module0.tzUTC()
        assert var23 is not None
        var24 = var23.utcoffset(var22)
        assert var24 is not None
        var25 = 2445
        var26 = var23.utcoffset(var25)
        assert var26 is not None
        var27 = module0.tzUTC()
        assert var27 is not None
        var28 = module0.tzUTC()
        assert var28 is not None
        var29 = var28.utcoffset(var27)
        assert var29 is not None
        var30 = module0.tzUTC()
        assert var30 is not None
        var31 = None
        var32 = {}
        var33 = module0.tzUTC(**var32)
        assert var33 is not None
        var34 = var33.dst(var31)
        assert var34 is not None
        var35 = [var31, var32, var34]
        var36 = module0.tzUTC(*var35)
        assert var36 is not None
        var37 = b'\x0b@\xa8\x92\x18\xf75~y\xb6\xfbJ\x81\t'
        var38 = module0.utc_aware(var37)
        assert var38 is not None
        var39 = b'J\xc2-p\xc7l\xa7\xcd\xa7 \xacM>\xbc\xbb'
        var40 = {}
        var41 = module0.tzUTC(**var40)
        assert var41 is not None
        var42 = var41.dst(var39)
        assert var42 is not None
        var43 = None
        var44 = module0.tzUTC()
        assert var44 is not None
        var45 = var44.utcoffset(var43)
        assert var45 is not None
        var46 = None
        var47 = {}
        var48 = module0.tzUTC(**var47)
        assert var48 is not None
        var49 = var48.dst(var46)
        assert var49 is not None
        var50 = module0.tzUTC()
        assert var50 is not None
        var51 = var50.utcoffset(var43)
        assert var51 is not None
        var52 = b'J\xc2-p\xc7l\xa7\xcd\xa7 \xacM>\xbc\xbb'
        var53 = {}
        var54 = module0.tzUTC(**var53)
        assert var54 is not None
        var55 = var54.dst(var52)
        assert var55 is not None
        var56 = set()
        var57 = var54.dst(var56)
        assert var57 is not None
        var58 = module0.utc_method(*var17)
    except BaseException:
        pass


def test_case_90():
    try:
        var0 = -2019
        var1 = None
        var2 = [var1]
        var3 = module0.tzUTC(*var2)
        assert var3 is not None
        var4 = var3.dst(var0)
        assert var4 is not None
        var5 = module0.tzUTC()
        assert var5 is not None
        var6 = module0.tzUTC()
        assert var6 is not None
        var7 = module0.utc_method()
    except BaseException:
        pass


def test_case_91():
    try:
        var0 = ()
        var1 = module0.tzUTC()
        assert var1 is not None
        var2 = [var1]
        var3 = module0.tzUTC(*var2)
        assert var3 is not None
        var4 = [var3]
        var5 = module0.tzUTC(*var4)
        assert var5 is not None
        var6 = var5.utcoffset(var0)
        assert var6 is not None
        var7 = module0.tzUTC()
        assert var7 is not None
        var8 = None
        var9 = {}
        var10 = module0.tzUTC(**var9)
        assert var10 is not None
        var11 = var10.dst(var8)
        assert var11 is not None
        var12 = [var8, var9, var11]
        var13 = module0.tzUTC(*var12)
        assert var13 is not None
        var14 = None
        var15 = var13.dst(var14)
        assert var15 is not None
        var16 = module0.tzUTC()
        assert var16 is not None
        var17 = None
        var18 = module0.tzUTC()
        assert var18 is not None
        var19 = var18.utcoffset(var17)
        assert var19 is not None
        var20 = None
        var21 = var18.utcoffset(var20)
        assert var21 is not None
        var22 = None
        var23 = module0.tzUTC()
        assert var23 is not None
        var24 = var23.utcoffset(var22)
        assert var24 is not None
        var25 = None
        var26 = {}
        var27 = module0.tzUTC(**var26)
        assert var27 is not None
        var28 = var27.dst(var25)
        assert var28 is not None
        var29 = module0.tzUTC()
        assert var29 is not None
        var30 = var29.utcoffset(var22)
        assert var30 is not None
        var31 = module0.tzUTC()
        assert var31 is not None
        var32 = None
        var33 = {}
        var34 = module0.tzUTC(**var33)
        assert var34 is not None
        var35 = var34.dst(var32)
        assert var35 is not None
        var36 = [var32, var33, var35]
        var37 = module0.tzUTC(*var36)
        assert var37 is not None
        var38 = module0.utc_method(**var26)
    except BaseException:
        pass


def test_case_92():
    try:
        var0 = module0.tzUTC()
        assert var0 is not None
        var1 = b'\x0b@\xa8\x92\x18\xf75~y\xb6\xfbJ\x81\t'
        var2 = module0.utc_aware(var1)
        assert var2 is not None
        var3 = -2019
        var4 = None
        var5 = [var4]
        var6 = module0.tzUTC(*var5)
        assert var6 is not None
        var7 = var6.dst(var3)
        assert var7 is not None
        var8 = {var7: var5, var7: var3}
        var9 = module0.utc_aware(var8)
        assert var9 is not None
        var10 = module0.tzUTC()
        assert var10 is not None
        var11 = b'J\xc2-p\xc7l\xa7\xcd\xa7 \xacM>\xbc\xbb'
        var12 = {}
        var13 = module0.tzUTC(**var12)
        assert var13 is not None
        var14 = var13.dst(var11)
        assert var14 is not None
        var15 = None
        var16 = {}
        var17 = module0.tzUTC(**var16)
        assert var17 is not None
        var18 = var17.dst(var15)
        assert var18 is not None
        var19 = None
        var20 = module0.tzUTC()
        assert var20 is not None
        var21 = var20.utcoffset(var19)
        assert var21 is not None
        var22 = True
        var23 = {var22: var22, var22: var22, var22: var22, var22: var22}
        var24 = module0.tzUTC()
        assert var24 is not None
        var25 = var24.utcoffset(var23)
        assert var25 is not None
        var26 = ()
        var27 = module0.tzUTC()
        assert var27 is not None
        var28 = [var27]
        var29 = module0.tzUTC(*var28)
        assert var29 is not None
        var30 = [var29]
        var31 = module0.tzUTC(*var30)
        assert var31 is not None
        var32 = var31.utcoffset(var26)
        assert var32 is not None
        var33 = module0.tzUTC()
        assert var33 is not None
        var34 = module0.tzUTC()
        assert var34 is not None
        var35 = var34.utcoffset(var33)
        assert var35 is not None
        var36 = -2019
        var37 = None
        var38 = [var37]
        var39 = module0.tzUTC(*var38)
        assert var39 is not None
        var40 = var39.dst(var36)
        assert var40 is not None
        var41 = module0.utc_method()
    except BaseException:
        pass


def test_case_93():
    try:
        var0 = module0.tzUTC()
        assert var0 is not None
        var1 = -2019
        var2 = None
        var3 = [var2]
        var4 = module0.tzUTC(*var3)
        assert var4 is not None
        var5 = var4.dst(var1)
        assert var5 is not None
        var6 = module0.tzUTC()
        assert var6 is not None
        var7 = {var5, var6}
        var8 = module0.utc_aware(var7)
        assert var8 is not None
        var9 = -416
        var10 = {var9, var9}
        var11 = [var10, var9]
        var12 = b'7\r\xbf\xc5\x83P\xd2\x1fZ8\x1e\xf8 \xb1@\xe4kg'
        var13 = [var12, var12, var12]
        var14 = module0.tzUTC(*var13)
        assert var14 is not None
        var15 = var14.dst(var11)
        assert var15 is not None
        var16 = -2060.41
        var17 = var14.utcoffset(var16)
        assert var17 is not None
        var18 = -2019
        var19 = None
        var20 = [var19]
        var21 = module0.tzUTC(*var20)
        assert var21 is not None
        var22 = var21.dst(var18)
        assert var22 is not None
        var23 = module0.tzUTC()
        assert var23 is not None
        var24 = module0.tzUTC()
        assert var24 is not None
        var25 = None
        var26 = {}
        var27 = module0.tzUTC(**var26)
        assert var27 is not None
        var28 = var27.dst(var25)
        assert var28 is not None
        var29 = [var25, var26, var28]
        var30 = module0.tzUTC(*var29)
        assert var30 is not None
        var31 = None
        var32 = var30.dst(var31)
        assert var32 is not None
        var33 = -2019
        var34 = None
        var35 = [var34]
        var36 = module0.tzUTC(*var35)
        assert var36 is not None
        var37 = var36.dst(var33)
        assert var37 is not None
        var38 = -2019
        var39 = None
        var40 = [var39]
        var41 = module0.tzUTC(*var40)
        assert var41 is not None
        var42 = var41.dst(var38)
        assert var42 is not None
        var43 = {var42: var40, var42: var38}
        var44 = module0.utc_aware(var43)
        assert var44 is not None
        var45 = None
        var46 = module0.tzUTC()
        assert var46 is not None
        var47 = var46.utcoffset(var45)
        assert var47 is not None
        var48 = None
        var49 = var46.utcoffset(var48)
        assert var49 is not None
        var50 = -2019
        var51 = None
        var52 = [var51]
        var53 = module0.tzUTC(*var52)
        assert var53 is not None
        var54 = var53.dst(var50)
        assert var54 is not None
        var55 = module0.tzUTC()
        assert var55 is not None
        var56 = '5\x0cMtw@-H)M4(\tky/4q'
        var57 = var53.utcoffset(var56)
        assert var57 is not None
        var58 = b'J\xc2-p\xc7l\xa7\xcd\xa7 \xacM>\xbc\xbb'
        var59 = {}
        var60 = module0.tzUTC(**var59)
        assert var60 is not None
        var61 = var60.dst(var58)
        assert var61 is not None
        var62 = set()
        var63 = var60.dst(var62)
        assert var63 is not None
        var64 = module0.tzUTC()
        assert var64 is not None
        var65 = module0.tzUTC()
        assert var65 is not None
        var66 = var65.utcoffset(var64)
        assert var66 is not None
        var67 = 2445
        var68 = var65.utcoffset(var67)
        assert var68 is not None
        var69 = module0.utc_method()
    except BaseException:
        pass


def test_case_94():
    try:
        var0 = 0.8
        var1 = module0.tzUTC()
        assert var1 is not None
        var2 = var1.utcoffset(var0)
        assert var2 is not None
        var3 = module0.tzUTC()
        assert var3 is not None
        var4 = None
        var5 = {}
        var6 = module0.tzUTC(**var5)
        assert var6 is not None
        var7 = var6.dst(var4)
        assert var7 is not None
        var8 = [var4, var5, var7]
        var9 = module0.tzUTC(*var8)
        assert var9 is not None
        var10 = None
        var11 = var9.dst(var10)
        assert var11 is not None
        var12 = -2019
        var13 = None
        var14 = [var13]
        var15 = module0.tzUTC(*var14)
        assert var15 is not None
        var16 = var15.dst(var12)
        assert var16 is not None
        var17 = module0.tzUTC()
        assert var17 is not None
        var18 = -2019
        var19 = None
        var20 = [var19]
        var21 = module0.tzUTC(*var20)
        assert var21 is not None
        var22 = var21.dst(var18)
        assert var22 is not None
        var23 = module0.tzUTC()
        assert var23 is not None
        var24 = 'Akbe`@a~EQ{/?mH@%'
        var25 = var21.dst(var24)
        assert var25 is not None
        var26 = None
        var27 = module0.tzUTC()
        assert var27 is not None
        var28 = var27.utcoffset(var26)
        assert var28 is not None
        var29 = module0.tzUTC()
        assert var29 is not None
        var30 = None
        var31 = {}
        var32 = module0.tzUTC(**var31)
        assert var32 is not None
        var33 = var32.dst(var30)
        assert var33 is not None
        var34 = [var30, var31, var33]
        var35 = module0.tzUTC(*var34)
        assert var35 is not None
        var36 = module0.utc_method(*var8)
    except BaseException:
        pass


def test_case_95():
    try:
        var0 = None
        var1 = module0.tzUTC()
        assert var1 is not None
        var2 = var1.utcoffset(var0)
        assert var2 is not None
        var3 = module0.tzUTC()
        assert var3 is not None
        var4 = None
        var5 = {}
        var6 = module0.tzUTC(**var5)
        assert var6 is not None
        var7 = var6.dst(var4)
        assert var7 is not None
        var8 = [var4, var5, var7]
        var9 = module0.tzUTC(*var8)
        assert var9 is not None
        var10 = None
        var11 = var9.dst(var10)
        assert var11 is not None
        var12 = b'J\xc2-p\xc7l\xa7\xcd\xa7 \xacM>\xbc\xbb'
        var13 = {}
        var14 = module0.tzUTC(**var13)
        assert var14 is not None
        var15 = var14.dst(var12)
        assert var15 is not None
        var16 = ()
        var17 = module0.tzUTC()
        assert var17 is not None
        var18 = [var17]
        var19 = module0.tzUTC(*var18)
        assert var19 is not None
        var20 = [var19]
        var21 = module0.tzUTC(*var20)
        assert var21 is not None
        var22 = var21.utcoffset(var16)
        assert var22 is not None
        var23 = module0.tzUTC()
        assert var23 is not None
        var24 = module0.tzUTC()
        assert var24 is not None
        var25 = var24.utcoffset(var23)
        assert var25 is not None
        var26 = 2445
        var27 = var24.utcoffset(var26)
        assert var27 is not None
        var28 = True
        var29 = {var28: var28, var28: var28, var28: var28, var28: var28}
        var30 = module0.tzUTC()
        assert var30 is not None
        var31 = var30.utcoffset(var29)
        assert var31 is not None
        var32 = None
        var33 = module0.isoformat(var32)
    except BaseException:
        pass


def test_case_96():
    try:
        var0 = True
        var1 = {var0: var0, var0: var0, var0: var0, var0: var0}
        var2 = module0.tzUTC()
        assert var2 is not None
        var3 = var2.utcoffset(var1)
        assert var3 is not None
        var4 = b'\x0b@\xa8\x92\x18\xf75~y\xb6\xfbJ\x81\t'
        var5 = module0.utc_aware(var4)
        assert var5 is not None
        var6 = -2019
        var7 = None
        var8 = [var7]
        var9 = module0.tzUTC(*var8)
        assert var9 is not None
        var10 = var9.dst(var6)
        assert var10 is not None
        var11 = {var10: var8, var10: var6}
        var12 = module0.utc_aware(var11)
        assert var12 is not None
        var13 = module0.tzUTC()
        assert var13 is not None
        var14 = None
        var15 = {}
        var16 = module0.tzUTC(**var15)
        assert var16 is not None
        var17 = var16.dst(var14)
        assert var17 is not None
        var18 = [var14, var15, var17]
        var19 = module0.tzUTC(*var18)
        assert var19 is not None
        var20 = None
        var21 = var19.dst(var20)
        assert var21 is not None
        var22 = -2019
        var23 = None
        var24 = [var23]
        var25 = module0.tzUTC(*var24)
        assert var25 is not None
        var26 = var25.dst(var22)
        assert var26 is not None
        var27 = None
        var28 = module0.tzUTC()
        assert var28 is not None
        var29 = var28.utcoffset(var27)
        assert var29 is not None
        var30 = None
        var31 = {}
        var32 = module0.tzUTC(**var31)
        assert var32 is not None
        var33 = var32.dst(var30)
        assert var33 is not None
        var34 = module0.tzUTC()
        assert var34 is not None
        var35 = var34.utcoffset(var27)
        assert var35 is not None
        var36 = b'J\xc2-p\xc7l\xa7\xcd\xa7 \xacM>\xbc\xbb'
        var37 = {}
        var38 = module0.tzUTC(**var37)
        assert var38 is not None
        var39 = var38.dst(var36)
        assert var39 is not None
        var40 = module0.tzUTC()
        assert var40 is not None
        var41 = -2019
        var42 = None
        var43 = [var42]
        var44 = module0.tzUTC(*var43)
        assert var44 is not None
        var45 = var44.dst(var41)
        assert var45 is not None
        var46 = module0.tzUTC()
        assert var46 is not None
        var47 = {var45, var46}
        var48 = module0.utc_aware(var47)
        assert var48 is not None
        var49 = b'J\xc2-p\xc7l\xa7\xcd\xa7 \xacM>\xbc\xbb'
        var50 = {}
        var51 = module0.tzUTC(**var50)
        assert var51 is not None
        var52 = var51.dst(var49)
        assert var52 is not None
        var53 = set()
        var54 = var51.dst(var53)
        assert var54 is not None
        var55 = module0.utc_method(*var43)
    except BaseException:
        pass


def test_case_97():
    try:
        var0 = -416
        var1 = {var0, var0}
        var2 = [var1, var0]
        var3 = b'7\r\xbf\xc5\x83P\xd2\x1fZ8\x1e\xf8 \xb1@\xe4kg'
        var4 = [var3, var3, var3]
        var5 = module0.tzUTC(*var4)
        assert var5 is not None
        var6 = var5.dst(var2)
        assert var6 is not None
        var7 = True
        var8 = {var7: var7, var7: var7, var7: var7, var7: var7}
        var9 = module0.tzUTC()
        assert var9 is not None
        var10 = var9.utcoffset(var8)
        assert var10 is not None
        var11 = module0.utc_method()
    except BaseException:
        pass


def test_case_98():
    try:
        var0 = True
        var1 = {var0: var0, var0: var0, var0: var0, var0: var0}
        var2 = module0.tzUTC()
        assert var2 is not None
        var3 = var2.utcoffset(var1)
        assert var3 is not None
        var4 = None
        var5 = var4,
        var6 = module0.tzUTC()
        assert var6 is not None
        var7 = var6.dst(var5)
        assert var7 is not None
        var8 = -2019
        var9 = None
        var10 = [var9]
        var11 = module0.tzUTC(*var10)
        assert var11 is not None
        var12 = var11.dst(var8)
        assert var12 is not None
        var13 = {var12: var10, var12: var8}
        var14 = module0.utc_aware(var13)
        assert var14 is not None
        var15 = module0.tzUTC()
        assert var15 is not None
        var16 = b'\x0b@\xa8\x92\x18\xf75~y\xb6\xfbJ\x81\t'
        var17 = module0.utc_aware(var16)
        assert var17 is not None
        var18 = None
        var19 = {var3}
        var20 = [var18, var19]
        var21 = module0.isoformat(var20)
    except BaseException:
        pass


def test_case_99():
    try:
        var0 = module0.tzUTC()
        assert var0 is not None
        var1 = module0.tzUTC()
        assert var1 is not None
        var2 = var1.utcoffset(var0)
        assert var2 is not None
        var3 = 2445
        var4 = var1.utcoffset(var3)
        assert var4 is not None
        var5 = None
        var6 = module0.tzUTC()
        assert var6 is not None
        var7 = var6.utcoffset(var5)
        assert var7 is not None
        var8 = None
        var9 = var6.utcoffset(var8)
        assert var9 is not None
        var10 = module0.tzUTC()
        assert var10 is not None
        var11 = -2019
        var12 = None
        var13 = [var12]
        var14 = module0.tzUTC(*var13)
        assert var14 is not None
        var15 = var14.dst(var11)
        assert var15 is not None
        var16 = module0.tzUTC()
        assert var16 is not None
        var17 = {var15, var16}
        var18 = module0.utc_aware(var17)
        assert var18 is not None
        var19 = module0.tzUTC()
        assert var19 is not None
        var20 = -2019
        var21 = None
        var22 = [var21]
        var23 = module0.tzUTC(*var22)
        assert var23 is not None
        var24 = var23.dst(var20)
        assert var24 is not None
        var25 = None
        var26 = module0.utc_aware(var25)
        assert var26 is not None
        var27 = module0.utc_method(*var13)
    except BaseException:
        pass


def test_case_100():
    try:
        var0 = None
        var1 = module0.tzUTC()
        assert var1 is not None
        var2 = var1.utcoffset(var0)
        assert var2 is not None
        var3 = -416
        var4 = {var3, var3}
        var5 = [var4, var3]
        var6 = b'7\r\xbf\xc5\x83P\xd2\x1fZ8\x1e\xf8 \xb1@\xe4kg'
        var7 = [var6, var6, var6]
        var8 = module0.tzUTC(*var7)
        assert var8 is not None
        var9 = var8.dst(var5)
        assert var9 is not None
        var10 = module0.tzUTC()
        assert var10 is not None
        var11 = None
        var12 = {}
        var13 = module0.tzUTC(**var12)
        assert var13 is not None
        var14 = var13.dst(var11)
        assert var14 is not None
        var15 = [var11, var12, var14]
        var16 = module0.tzUTC(*var15)
        assert var16 is not None
        var17 = -2019
        var18 = None
        var19 = [var18]
        var20 = module0.tzUTC(*var19)
        assert var20 is not None
        var21 = var20.dst(var17)
        assert var21 is not None
        var22 = module0.tzUTC()
        assert var22 is not None
        var23 = '5\x0cMtw@-H)M4(\tky/4q'
        var24 = var20.utcoffset(var23)
        assert var24 is not None
        var25 = module0.tzUTC()
        assert var25 is not None
        var26 = module0.tzUTC()
        assert var26 is not None
        var27 = module0.tzUTC()
        assert var27 is not None
        var28 = var27.utcoffset(var26)
        assert var28 is not None
        var29 = 2445
        var30 = var27.utcoffset(var29)
        assert var30 is not None
        var31 = None
        var32 = {}
        var33 = module0.tzUTC(**var32)
        assert var33 is not None
        var34 = var33.dst(var31)
        assert var34 is not None
        var35 = module0.utc_method()
    except BaseException:
        pass


def test_case_101():
    try:
        var0 = -2019
        var1 = None
        var2 = [var1]
        var3 = module0.tzUTC(*var2)
        assert var3 is not None
        var4 = var3.dst(var0)
        assert var4 is not None
        var5 = 0.8
        var6 = module0.tzUTC()
        assert var6 is not None
        var7 = var6.utcoffset(var5)
        assert var7 is not None
        var8 = module0.tzUTC()
        assert var8 is not None
        var9 = module0.tzUTC()
        assert var9 is not None
        var10 = -2019
        var11 = None
        var12 = [var11]
        var13 = module0.tzUTC(*var12)
        assert var13 is not None
        var14 = var13.dst(var10)
        assert var14 is not None
        var15 = module0.tzUTC()
        assert var15 is not None
        var16 = {var14, var15}
        var17 = module0.utc_aware(var16)
        assert var17 is not None
        var18 = None
        var19 = module0.tzUTC()
        assert var19 is not None
        var20 = var19.utcoffset(var18)
        assert var20 is not None
        var21 = None
        var22 = var19.utcoffset(var21)
        assert var22 is not None
        var23 = module0.isoformat(var18)
    except BaseException:
        pass


def test_case_102():
    try:
        var0 = None
        var1 = module0.tzUTC()
        assert var1 is not None
        var2 = [var1, var1]
        var3 = ':):ijBSTBjV'
        var4 = {var3: var1, var3: var2}
        var5 = module0.tzUTC(*var2, **var4)
        assert var5 is not None
        var6 = var5.utcoffset(var0)
        assert var6 is not None
        var7 = 2994
        var8 = module0.utc_aware(var7)
        assert var8 is not None
        var9 = b'\x0b@\xa8\x92\x18\xf75~y\xb6\xfbJ\x81\t'
        var10 = module0.utc_aware(var9)
        assert var10 is not None
        var11 = module0.tzUTC()
        assert var11 is not None
        var12 = module0.tzUTC()
        assert var12 is not None
        var13 = var12.utcoffset(var11)
        assert var13 is not None
        var14 = module0.tzUTC()
        assert var14 is not None
        var15 = None
        var16 = {}
        var17 = module0.tzUTC(**var16)
        assert var17 is not None
        var18 = var17.dst(var15)
        assert var18 is not None
        var19 = module0.tzUTC()
        assert var19 is not None
        var20 = module0.tzUTC()
        assert var20 is not None
        var21 = var20.utcoffset(var19)
        assert var21 is not None
        var22 = 2445
        var23 = var20.utcoffset(var22)
        assert var23 is not None
        var24 = module0.utc_method(*var2, **var4)
    except BaseException:
        pass


def test_case_103():
    try:
        var0 = True
        var1 = {var0: var0, var0: var0, var0: var0, var0: var0}
        var2 = module0.tzUTC()
        assert var2 is not None
        var3 = var2.utcoffset(var1)
        assert var3 is not None
        var4 = None
        var5 = module0.tzUTC()
        assert var5 is not None
        var6 = var5.utcoffset(var4)
        assert var6 is not None
        var7 = 2994
        var8 = module0.utc_aware(var7)
        assert var8 is not None
        var9 = module0.tzUTC()
        assert var9 is not None
        var10 = -2019
        var11 = None
        var12 = [var11]
        var13 = module0.tzUTC(*var12)
        assert var13 is not None
        var14 = var13.dst(var10)
        assert var14 is not None
        var15 = None
        var16 = module0.utc_aware(var15)
        assert var16 is not None
        var17 = module0.tzUTC()
        assert var17 is not None
        var18 = module0.tzUTC()
        assert var18 is not None
        var19 = None
        var20 = {}
        var21 = module0.tzUTC(**var20)
        assert var21 is not None
        var22 = var21.dst(var19)
        assert var22 is not None
        var23 = [var19, var20, var22]
        var24 = module0.tzUTC(*var23)
        assert var24 is not None
        var25 = module0.tzUTC()
        assert var25 is not None
        var26 = module0.tzUTC()
        assert var26 is not None
        var27 = var26.utcoffset(var25)
        assert var27 is not None
        var28 = module0.utc_method()
    except BaseException:
        pass


def test_case_104():
    try:
        var0 = -2019
        var1 = None
        var2 = [var1]
        var3 = module0.tzUTC(*var2)
        assert var3 is not None
        var4 = var3.dst(var0)
        assert var4 is not None
        var5 = {var4: var2, var4: var0}
        var6 = module0.utc_aware(var5)
        assert var6 is not None
        var7 = -2019
        var8 = None
        var9 = [var8]
        var10 = module0.tzUTC(*var9)
        assert var10 is not None
        var11 = var10.dst(var7)
        assert var11 is not None
        var12 = module0.tzUTC()
        assert var12 is not None
        var13 = 'Akbe`@a~EQ{/?mH@%'
        var14 = var10.dst(var13)
        assert var14 is not None
        var15 = None
        var16 = module0.tzUTC()
        assert var16 is not None
        var17 = var16.utcoffset(var15)
        assert var17 is not None
        var18 = None
        var19 = var16.utcoffset(var18)
        assert var19 is not None
        var20 = module0.tzUTC()
        assert var20 is not None
        var21 = -2019
        var22 = None
        var23 = [var22]
        var24 = module0.tzUTC(*var23)
        assert var24 is not None
        var25 = var24.dst(var21)
        assert var25 is not None
        var26 = None
        var27 = module0.utc_aware(var26)
        assert var27 is not None
        var28 = module0.tzUTC()
        assert var28 is not None
        var29 = None
        var30 = {}
        var31 = module0.tzUTC(**var30)
        assert var31 is not None
        var32 = var31.dst(var29)
        assert var32 is not None
        var33 = [var29, var30, var32]
        var34 = module0.tzUTC(*var33)
        assert var34 is not None
        var35 = -416
        var36 = {var35, var35}
        var37 = [var36, var35]
        var38 = b'7\r\xbf\xc5\x83P\xd2\x1fZ8\x1e\xf8 \xb1@\xe4kg'
        var39 = [var38, var38, var38]
        var40 = module0.tzUTC(*var39)
        assert var40 is not None
        var41 = var40.dst(var37)
        assert var41 is not None
        var42 = -2060.41
        var43 = var40.utcoffset(var42)
        assert var43 is not None
        var44 = 2994
        var45 = module0.utc_aware(var44)
        assert var45 is not None
        var46 = True
        var47 = {var46: var46, var46: var46, var46: var46, var46: var46}
        var48 = module0.tzUTC()
        assert var48 is not None
        var49 = var48.utcoffset(var47)
        assert var49 is not None
        var50 = None
        var51 = var50,
        var52 = module0.tzUTC()
        assert var52 is not None
        var53 = var52.dst(var51)
        assert var53 is not None
        var54 = module0.utc_method(*var2, **var30)
    except BaseException:
        pass


def test_case_105():
    try:
        var0 = module0.tzUTC()
        assert var0 is not None
        var1 = -2019
        var2 = None
        var3 = [var2]
        var4 = module0.tzUTC(*var3)
        assert var4 is not None
        var5 = var4.dst(var1)
        assert var5 is not None
        var6 = module0.tzUTC()
        assert var6 is not None
        var7 = {var5, var6}
        var8 = module0.utc_aware(var7)
        assert var8 is not None
        var9 = module0.tzUTC()
        assert var9 is not None
        var10 = module0.tzUTC()
        assert var10 is not None
        var11 = module0.tzUTC()
        assert var11 is not None
        var12 = var11.utcoffset(var10)
        assert var12 is not None
        var13 = 2445
        var14 = var11.utcoffset(var13)
        assert var14 is not None
        var15 = b'J\xc2-p\xc7l\xa7\xcd\xa7 \xacM>\xbc\xbb'
        var16 = {}
        var17 = module0.tzUTC(**var16)
        assert var17 is not None
        var18 = var17.dst(var15)
        assert var18 is not None
        var19 = b'J\xc2-p\xc7l\xa7\xcd\xa7 \xacM>\xbc\xbb'
        var20 = {}
        var21 = module0.tzUTC(**var20)
        assert var21 is not None
        var22 = var21.dst(var19)
        assert var22 is not None
        var23 = set()
        var24 = var21.dst(var23)
        assert var24 is not None
        var25 = ()
        var26 = module0.tzUTC()
        assert var26 is not None
        var27 = [var26]
        var28 = module0.tzUTC(*var27)
        assert var28 is not None
        var29 = [var28]
        var30 = module0.tzUTC(*var29)
        assert var30 is not None
        var31 = var30.utcoffset(var25)
        assert var31 is not None
        var32 = -2019
        var33 = None
        var34 = [var33]
        var35 = module0.tzUTC(*var34)
        assert var35 is not None
        var36 = var35.dst(var32)
        assert var36 is not None
        var37 = module0.tzUTC()
        assert var37 is not None
        var38 = None
        var39 = module0.tzUTC()
        assert var39 is not None
        var40 = var39.utcoffset(var38)
        assert var40 is not None
        var41 = None
        var42 = var39.utcoffset(var41)
        assert var42 is not None
        var43 = -2019
        var44 = None
        var45 = [var44]
        var46 = module0.tzUTC(*var45)
        assert var46 is not None
        var47 = var46.dst(var43)
        assert var47 is not None
        var48 = module0.isoformat(var13)
    except BaseException:
        pass


def test_case_106():
    try:
        var0 = ()
        var1 = module0.tzUTC()
        assert var1 is not None
        var2 = [var1]
        var3 = module0.tzUTC(*var2)
        assert var3 is not None
        var4 = [var3]
        var5 = module0.tzUTC(*var4)
        assert var5 is not None
        var6 = var5.utcoffset(var0)
        assert var6 is not None
        var7 = -575.2523
        var8 = module0.isoformat(var7)
    except BaseException:
        pass


def test_case_107():
    try:
        var0 = module0.tzUTC()
        assert var0 is not None
        var1 = -416
        var2 = {var1, var1}
        var3 = [var2, var1]
        var4 = b'7\r\xbf\xc5\x83P\xd2\x1fZ8\x1e\xf8 \xb1@\xe4kg'
        var5 = [var4, var4, var4]
        var6 = module0.tzUTC(*var5)
        assert var6 is not None
        var7 = var6.dst(var3)
        assert var7 is not None
        var8 = module0.utc_method()
    except BaseException:
        pass


def test_case_108():
    try:
        var0 = -416
        var1 = {var0, var0}
        var2 = [var1, var0]
        var3 = b'7\r\xbf\xc5\x83P\xd2\x1fZ8\x1e\xf8 \xb1@\xe4kg'
        var4 = [var3, var3, var3]
        var5 = module0.tzUTC(*var4)
        assert var5 is not None
        var6 = var5.dst(var2)
        assert var6 is not None
        var7 = module0.tzUTC()
        assert var7 is not None
        var8 = module0.tzUTC()
        assert var8 is not None
        var9 = var8.utcoffset(var7)
        assert var9 is not None
        var10 = 2445
        var11 = var8.utcoffset(var10)
        assert var11 is not None
        var12 = 2994
        var13 = module0.utc_aware(var12)
        assert var13 is not None
        var14 = b'\x0b@\xa8\x92\x18\xf75~y\xb6\xfbJ\x81\t'
        var15 = module0.utc_aware(var14)
        assert var15 is not None
        var16 = "~J'"
        var17 = {var16: var10}
        var18 = module0.utc_method(**var17)
    except BaseException:
        pass


def test_case_109():
    try:
        var0 = module0.tzUTC()
        assert var0 is not None
        var1 = None
        var2 = {}
        var3 = module0.tzUTC(**var2)
        assert var3 is not None
        var4 = var3.dst(var1)
        assert var4 is not None
        var5 = [var1, var2, var4]
        var6 = module0.tzUTC(*var5)
        assert var6 is not None
        var7 = None
        var8 = var6.dst(var7)
        assert var8 is not None
        var9 = module0.tzUTC()
        assert var9 is not None
        var10 = module0.tzUTC()
        assert var10 is not None
        var11 = var10.utcoffset(var9)
        assert var11 is not None
        var12 = 2445
        var13 = var10.utcoffset(var12)
        assert var13 is not None
        var14 = True
        var15 = {var14: var14, var14: var14, var14: var14, var14: var14}
        var16 = module0.tzUTC()
        assert var16 is not None
        var17 = var16.utcoffset(var15)
        assert var17 is not None
        var18 = None
        var19 = module0.tzUTC()
        assert var19 is not None
        var20 = var19.utcoffset(var18)
        assert var20 is not None
        var21 = None
        var22 = var19.utcoffset(var21)
        assert var22 is not None
        var23 = ()
        var24 = module0.tzUTC()
        assert var24 is not None
        var25 = [var24]
        var26 = module0.tzUTC(*var25)
        assert var26 is not None
        var27 = [var26]
        var28 = module0.tzUTC(*var27)
        assert var28 is not None
        var29 = var28.utcoffset(var23)
        assert var29 is not None
        var30 = None
        var31 = {}
        var32 = module0.tzUTC(**var31)
        assert var32 is not None
        var33 = var32.dst(var30)
        assert var33 is not None
        var34 = module0.utc_method(*var25, **var31)
    except BaseException:
        pass


def test_case_110():
    try:
        var0 = b'J\xc2-p\xc7l\xa7\xcd\xa7 \xacM>\xbc\xbb'
        var1 = {}
        var2 = module0.tzUTC(**var1)
        assert var2 is not None
        var3 = var2.dst(var0)
        assert var3 is not None
        var4 = -2019
        var5 = None
        var6 = [var5]
        var7 = module0.tzUTC(*var6)
        assert var7 is not None
        var8 = var7.dst(var4)
        assert var8 is not None
        var9 = module0.tzUTC()
        assert var9 is not None
        var10 = '5\x0cMtw@-H)M4(\tky/4q'
        var11 = var7.utcoffset(var10)
        assert var11 is not None
        var12 = module0.tzUTC()
        assert var12 is not None
        var13 = None
        var14 = {}
        var15 = module0.tzUTC(**var14)
        assert var15 is not None
        var16 = var15.dst(var13)
        assert var16 is not None
        var17 = [var13, var14, var16]
        var18 = module0.tzUTC(*var17)
        assert var18 is not None
        var19 = None
        var20 = var18.dst(var19)
        assert var20 is not None
        var21 = module0.utc_method()
    except BaseException:
        pass


def test_case_111():
    try:
        var0 = b'\x0b@\xa8\x92\x18\xf75~y\xb6\xfbJ\x81\t'
        var1 = module0.utc_aware(var0)
        assert var1 is not None
        var2 = b'J\xc2-p\xc7l\xa7\xcd\xa7 \xacM>\xbc\xbb'
        var3 = {}
        var4 = module0.tzUTC(**var3)
        assert var4 is not None
        var5 = var4.dst(var2)
        assert var5 is not None
        var6 = set()
        var7 = var4.dst(var6)
        assert var7 is not None
        var8 = -2019
        var9 = None
        var10 = [var9]
        var11 = module0.tzUTC(*var10)
        assert var11 is not None
        var12 = var11.dst(var8)
        assert var12 is not None
        var13 = module0.tzUTC()
        assert var13 is not None
        var14 = -416
        var15 = {var14, var14}
        var16 = [var15, var14]
        var17 = b'7\r\xbf\xc5\x83P\xd2\x1fZ8\x1e\xf8 \xb1@\xe4kg'
        var18 = [var17, var17, var17]
        var19 = module0.tzUTC(*var18)
        assert var19 is not None
        var20 = var19.dst(var16)
        assert var20 is not None
        var21 = -2060.41
        var22 = var19.utcoffset(var21)
        assert var22 is not None
        var23 = None
        var24 = module0.tzUTC()
        assert var24 is not None
        var25 = var24.utcoffset(var23)
        assert var25 is not None
        var26 = 0.8
        var27 = module0.tzUTC()
        assert var27 is not None
        var28 = var27.utcoffset(var26)
        assert var28 is not None
        var29 = None
        var30 = module0.tzUTC()
        assert var30 is not None
        var31 = var30.utcoffset(var29)
        assert var31 is not None
        var32 = None
        var33 = {}
        var34 = module0.tzUTC(**var33)
        assert var34 is not None
        var35 = var34.dst(var32)
        assert var35 is not None
        var36 = module0.tzUTC()
        assert var36 is not None
        var37 = var36.utcoffset(var29)
        assert var37 is not None
        var38 = module0.tzUTC()
        assert var38 is not None
        var39 = module0.tzUTC()
        assert var39 is not None
        var40 = var39.utcoffset(var38)
        assert var40 is not None
        var41 = None
        var42 = {}
        var43 = module0.tzUTC(**var42)
        assert var43 is not None
        var44 = var43.dst(var41)
        assert var44 is not None
        var45 = None
        var46 = module0.tzUTC()
        assert var46 is not None
        var47 = var46.utcoffset(var45)
        assert var47 is not None
        var48 = None
        var49 = var46.utcoffset(var48)
        assert var49 is not None
        var50 = var32.utcoffset(var14)
    except BaseException:
        pass


def test_case_112():
    try:
        var0 = None
        var1 = module0.tzUTC()
        assert var1 is not None
        var2 = [var1, var1]
        var3 = ':):ijBSTBjV'
        var4 = {var3: var1, var3: var2}
        var5 = module0.tzUTC(*var2, **var4)
        assert var5 is not None
        var6 = var5.utcoffset(var0)
        assert var6 is not None
        var7 = ()
        var8 = module0.tzUTC()
        assert var8 is not None
        var9 = [var8]
        var10 = module0.tzUTC(*var9)
        assert var10 is not None
        var11 = [var10]
        var12 = module0.tzUTC(*var11)
        assert var12 is not None
        var13 = var12.utcoffset(var7)
        assert var13 is not None
        var14 = b'\x96'
        var15 = module0.isoformat(var14)
    except BaseException:
        pass


def test_case_113():
    try:
        var0 = module0.tzUTC()
        assert var0 is not None
        var1 = module0.tzUTC()
        assert var1 is not None
        var2 = var1.utcoffset(var0)
        assert var2 is not None
        var3 = 2445
        var4 = var1.utcoffset(var3)
        assert var4 is not None
        var5 = True
        var6 = {var5: var5, var5: var5, var5: var5, var5: var5}
        var7 = module0.tzUTC()
        assert var7 is not None
        var8 = var7.utcoffset(var6)
        assert var8 is not None
        var9 = None
        var10 = module0.tzUTC()
        assert var10 is not None
        var11 = var10.utcoffset(var9)
        assert var11 is not None
        var12 = None
        var13 = {}
        var14 = module0.tzUTC(**var13)
        assert var14 is not None
        var15 = var14.dst(var12)
        assert var15 is not None
        var16 = module0.tzUTC()
        assert var16 is not None
        var17 = var16.utcoffset(var9)
        assert var17 is not None
        var18 = 0.8
        var19 = module0.tzUTC()
        assert var19 is not None
        var20 = var19.utcoffset(var18)
        assert var20 is not None
        var21 = b'J\xc2-p\xc7l\xa7\xcd\xa7 \xacM>\xbc\xbb'
        var22 = {}
        var23 = module0.tzUTC(**var22)
        assert var23 is not None
        var24 = var23.dst(var21)
        assert var24 is not None
        var25 = module0.tzUTC()
        assert var25 is not None
        var26 = None
        var27 = {}
        var28 = module0.tzUTC(**var27)
        assert var28 is not None
        var29 = var28.dst(var26)
        assert var29 is not None
        var30 = [var26, var27, var29]
        var31 = module0.tzUTC(*var30)
        assert var31 is not None
        var32 = None
        var33 = var31.dst(var32)
        assert var33 is not None
        var34 = b'J\xc2-p\xc7l\xa7\xcd\xa7 \xacM>\xbc\xbb'
        var35 = {}
        var36 = module0.tzUTC(**var35)
        assert var36 is not None
        var37 = var36.dst(var34)
        assert var37 is not None
        var38 = set()
        var39 = var36.dst(var38)
        assert var39 is not None
        var40 = ()
        var41 = module0.tzUTC()
        assert var41 is not None
        var42 = [var41]
        var43 = module0.tzUTC(*var42)
        assert var43 is not None
        var44 = [var43]
        var45 = module0.tzUTC(*var44)
        assert var45 is not None
        var46 = var45.utcoffset(var40)
        assert var46 is not None
        var47 = True
        var48 = {var47: var47, var47: var47, var47: var47, var47: var47}
        var49 = module0.tzUTC()
        assert var49 is not None
        var50 = var49.utcoffset(var48)
        assert var50 is not None
        var51 = None
        var52 = var51,
        var53 = module0.tzUTC()
        assert var53 is not None
        var54 = var53.dst(var52)
        assert var54 is not None
        var55 = module0.utc_method()
    except BaseException:
        pass


def test_case_114():
    try:
        var0 = True
        var1 = {var0: var0, var0: var0, var0: var0, var0: var0}
        var2 = module0.tzUTC()
        assert var2 is not None
        var3 = var2.utcoffset(var1)
        assert var3 is not None
        var4 = None
        var5 = var4,
        var6 = module0.tzUTC()
        assert var6 is not None
        var7 = var6.dst(var5)
        assert var7 is not None
        var8 = -2019
        var9 = None
        var10 = [var9]
        var11 = module0.tzUTC(*var10)
        assert var11 is not None
        var12 = var11.dst(var8)
        assert var12 is not None
        var13 = module0.tzUTC()
        assert var13 is not None
        var14 = module0.tzUTC()
        assert var14 is not None
        var15 = -2019
        var16 = None
        var17 = [var16]
        var18 = module0.tzUTC(*var17)
        assert var18 is not None
        var19 = var18.dst(var15)
        assert var19 is not None
        var20 = None
        var21 = module0.utc_aware(var20)
        assert var21 is not None
        var22 = -2019
        var23 = None
        var24 = [var23]
        var25 = module0.tzUTC(*var24)
        assert var25 is not None
        var26 = var25.dst(var22)
        assert var26 is not None
        var27 = module0.tzUTC()
        assert var27 is not None
        var28 = '5\x0cMtw@-H)M4(\tky/4q'
        var29 = var25.utcoffset(var28)
        assert var29 is not None
        var30 = -2019
        var31 = None
        var32 = [var31]
        var33 = module0.tzUTC(*var32)
        assert var33 is not None
        var34 = var33.dst(var30)
        assert var34 is not None
        var35 = {var34: var32, var34: var30}
        var36 = module0.utc_aware(var35)
        assert var36 is not None
        var37 = -2019
        var38 = None
        var39 = [var38]
        var40 = module0.tzUTC(*var39)
        assert var40 is not None
        var41 = var40.dst(var37)
        assert var41 is not None
        var42 = module0.tzUTC()
        assert var42 is not None
        var43 = 'Akbe`@a~EQ{/?mH@%'
        var44 = var40.dst(var43)
        assert var44 is not None
        var45 = b'\x0b@\xa8\x92\x18\xf75~y\xb6\xfbJ\x81\t'
        var46 = module0.utc_aware(var45)
        assert var46 is not None
        var47 = module0.tzUTC()
        assert var47 is not None
        var48 = None
        var49 = {}
        var50 = module0.tzUTC(**var49)
        assert var50 is not None
        var51 = var50.dst(var48)
        assert var51 is not None
        var52 = [var48, var49, var51]
        var53 = module0.tzUTC(*var52)
        assert var53 is not None
        var54 = module0.tzUTC()
        assert var54 is not None
        var55 = module0.tzUTC()
        assert var55 is not None
        var56 = var55.utcoffset(var54)
        assert var56 is not None
        var57 = None
        var58 = {}
        var59 = module0.tzUTC(**var58)
        assert var59 is not None
        var60 = var59.dst(var57)
        assert var60 is not None
        var61 = module0.utc_method(*var52)
    except BaseException:
        pass


def test_case_115():
    try:
        var0 = module0.tzUTC()
        assert var0 is not None
        var1 = module0.tzUTC()
        assert var1 is not None
        var2 = var1.utcoffset(var0)
        assert var2 is not None
        var3 = -416
        var4 = {var3, var3}
        var5 = [var4, var3]
        var6 = b'7\r\xbf\xc5\x83P\xd2\x1fZ8\x1e\xf8 \xb1@\xe4kg'
        var7 = [var6, var6, var6]
        var8 = module0.tzUTC(*var7)
        assert var8 is not None
        var9 = var8.dst(var5)
        assert var9 is not None
        var10 = module0.tzUTC()
        assert var10 is not None
        var11 = None
        var12 = {}
        var13 = module0.tzUTC(**var12)
        assert var13 is not None
        var14 = var13.dst(var11)
        assert var14 is not None
        var15 = [var11, var12, var14]
        var16 = module0.tzUTC(*var15)
        assert var16 is not None
        var17 = None
        var18 = module0.tzUTC()
        assert var18 is not None
        var19 = [var18, var18]
        var20 = ':):ijBSTBjV'
        var21 = {var20: var18, var20: var19}
        var22 = module0.tzUTC(*var19, **var21)
        assert var22 is not None
        var23 = var22.utcoffset(var17)
        assert var23 is not None
        var24 = 0.8
        var25 = module0.tzUTC()
        assert var25 is not None
        var26 = var25.utcoffset(var24)
        assert var26 is not None
        var27 = module0.utc_method(*var19)
    except BaseException:
        pass


def test_case_116():
    try:
        var0 = module0.tzUTC()
        assert var0 is not None
        var1 = -416
        var2 = {var1, var1}
        var3 = [var2, var1]
        var4 = b'7\r\xbf\xc5\x83P\xd2\x1fZ8\x1e\xf8 \xb1@\xe4kg'
        var5 = [var4, var4, var4]
        var6 = module0.tzUTC(*var5)
        assert var6 is not None
        var7 = var6.dst(var3)
        assert var7 is not None
        var8 = module0.tzUTC()
        assert var8 is not None
        var9 = None
        var10 = {}
        var11 = module0.tzUTC(**var10)
        assert var11 is not None
        var12 = var11.dst(var9)
        assert var12 is not None
        var13 = [var9, var10, var12]
        var14 = module0.tzUTC(*var13)
        assert var14 is not None
        var15 = None
        var16 = var14.dst(var15)
        assert var16 is not None
        var17 = -2019
        var18 = None
        var19 = [var18]
        var20 = module0.tzUTC(*var19)
        assert var20 is not None
        var21 = var20.dst(var17)
        assert var21 is not None
        var22 = module0.tzUTC()
        assert var22 is not None
        var23 = -2019
        var24 = None
        var25 = [var24]
        var26 = module0.tzUTC(*var25)
        assert var26 is not None
        var27 = var26.dst(var23)
        assert var27 is not None
        var28 = 2994
        var29 = module0.utc_aware(var28)
        assert var29 is not None
        var30 = True
        var31 = {var30: var30, var30: var30, var30: var30, var30: var30}
        var32 = module0.tzUTC()
        assert var32 is not None
        var33 = var32.utcoffset(var31)
        assert var33 is not None
        var34 = None
        var35 = var34,
        var36 = module0.tzUTC()
        assert var36 is not None
        var37 = var36.dst(var35)
        assert var37 is not None
        var38 = module0.utc_method(**var10)
    except BaseException:
        pass


def test_case_117():
    try:
        var0 = module0.tzUTC()
        assert var0 is not None
        var1 = -2019
        var2 = None
        var3 = [var2]
        var4 = module0.tzUTC(*var3)
        assert var4 is not None
        var5 = var4.dst(var1)
        assert var5 is not None
        var6 = None
        var7 = module0.utc_aware(var6)
        assert var7 is not None
        var8 = -2019
        var9 = None
        var10 = [var9]
        var11 = module0.tzUTC(*var10)
        assert var11 is not None
        var12 = var11.dst(var8)
        assert var12 is not None
        var13 = ()
        var14 = module0.tzUTC()
        assert var14 is not None
        var15 = [var14]
        var16 = module0.tzUTC(*var15)
        assert var16 is not None
        var17 = [var16]
        var18 = module0.tzUTC(*var17)
        assert var18 is not None
        var19 = var18.utcoffset(var13)
        assert var19 is not None
        var20 = None
        var21 = module0.tzUTC()
        assert var21 is not None
        var22 = [var21, var21]
        var23 = ':):ijBSTBjV'
        var24 = {var23: var21, var23: var22}
        var25 = module0.tzUTC(*var22, **var24)
        assert var25 is not None
        var26 = var25.utcoffset(var20)
        assert var26 is not None
        var27 = module0.tzUTC()
        assert var27 is not None
        var28 = None
        var29 = {}
        var30 = module0.tzUTC(**var29)
        assert var30 is not None
        var31 = var30.dst(var28)
        assert var31 is not None
        var32 = [var28, var29, var31]
        var33 = module0.tzUTC(*var32)
        assert var33 is not None
        var34 = module0.tzUTC()
        assert var34 is not None
        var35 = None
        var36 = {}
        var37 = module0.tzUTC(**var36)
        assert var37 is not None
        var38 = var37.dst(var35)
        assert var38 is not None
        var39 = [var35, var36, var38]
        var40 = module0.tzUTC(*var39)
        assert var40 is not None
        var41 = None
        var42 = var40.dst(var41)
        assert var42 is not None
        var43 = None
        var44 = {}
        var45 = module0.tzUTC(**var44)
        assert var45 is not None
        var46 = var45.dst(var43)
        assert var46 is not None
        var47 = b'J\xc2-p\xc7l\xa7\xcd\xa7 \xacM>\xbc\xbb'
        var48 = {}
        var49 = module0.tzUTC(**var48)
        assert var49 is not None
        var50 = var49.dst(var47)
        assert var50 is not None
        var51 = module0.tzUTC()
        assert var51 is not None
        var52 = module0.tzUTC()
        assert var52 is not None
        var53 = var52.utcoffset(var51)
        assert var53 is not None
        var54 = '%qGFj'
        var55 = module0.isoformat(var54)
    except BaseException:
        pass


def test_case_118():
    try:
        var0 = None
        var1 = module0.isoformat(var0)
    except BaseException:
        pass


def test_case_119():
    try:
        var0 = 'EJ'
        var1 = {var0: var0, var0: var0, var0: var0}
        var2 = module0.tzUTC(**var1)
        assert var2 is not None
        var3 = module0.isoformat(var2)
    except BaseException:
        pass


def test_case_120():
    try:
        var0 = ()
        var1 = module0.tzUTC()
        assert var1 is not None
        var2 = [var1]
        var3 = module0.tzUTC(*var2)
        assert var3 is not None
        var4 = [var3]
        var5 = module0.tzUTC(*var4)
        assert var5 is not None
        var6 = var5.utcoffset(var0)
        assert var6 is not None
        var7 = {}
        var8 = module0.utc_method(*var2, **var7)
    except BaseException:
        pass


def test_case_121():
    try:
        var0 = None
        var1 = 'read_config_path'
        var2 = False
        var3 = ''
        var4 = {var1: var2, var3: var1}
        var5 = module0.utc_method(*var0, **var4)
    except BaseException:
        pass


def test_case_122():
    try:
        var0 = -2019
        var1 = None
        var2 = [var1]
        var3 = module0.tzUTC(*var2)
        assert var3 is not None
        var4 = var3.dst(var0)
        assert var4 is not None
        var5 = {var4: var2, var4: var0}
        var6 = module0.utc_aware(var5)
        assert var6 is not None
        var7 = module0.tzUTC()
        assert var7 is not None
        var8 = None
        var9 = module0.tzUTC()
        assert var9 is not None
        var10 = var9.utcoffset(var8)
        assert var10 is not None
        var11 = None
        var12 = {}
        var13 = module0.tzUTC(**var12)
        assert var13 is not None
        var14 = var13.dst(var11)
        assert var14 is not None
        var15 = module0.tzUTC()
        assert var15 is not None
        var16 = var15.utcoffset(var8)
        assert var16 is not None
        var17 = module0.utc_method(*var2, **var12)
    except BaseException:
        pass


def test_case_123():
    try:
        var0 = True
        var1 = {var0: var0, var0: var0, var0: var0, var0: var0}
        var2 = module0.tzUTC()
        assert var2 is not None
        var3 = var2.utcoffset(var1)
        assert var3 is not None
        var4 = None
        var5 = var4,
        var6 = module0.tzUTC()
        assert var6 is not None
        var7 = var6.dst(var5)
        assert var7 is not None
        var8 = module0.tzUTC()
        assert var8 is not None
        var9 = None
        var10 = {}
        var11 = module0.tzUTC(**var10)
        assert var11 is not None
        var12 = var11.dst(var9)
        assert var12 is not None
        var13 = [var9, var10, var12]
        var14 = module0.tzUTC(*var13)
        assert var14 is not None
        var15 = -416
        var16 = {var15, var15}
        var17 = [var16, var15]
        var18 = b'7\r\xbf\xc5\x83P\xd2\x1fZ8\x1e\xf8 \xb1@\xe4kg'
        var19 = [var18, var18, var18]
        var20 = module0.tzUTC(*var19)
        assert var20 is not None
        var21 = var20.dst(var17)
        assert var21 is not None
        var22 = -2060.41
        var23 = var20.utcoffset(var22)
        assert var23 is not None
        var24 = module0.tzUTC()
        assert var24 is not None
        var25 = module0.tzUTC()
        assert var25 is not None
        var26 = var25.utcoffset(var24)
        assert var26 is not None
        var27 = 2445
        var28 = var25.utcoffset(var27)
        assert var28 is not None
        var29 = 2994
        var30 = module0.utc_aware(var29)
        assert var30 is not None
        var31 = -2019
        var32 = None
        var33 = [var32]
        var34 = module0.tzUTC(*var33)
        assert var34 is not None
        var35 = var34.dst(var31)
        assert var35 is not None
        var36 = {var35: var33, var35: var31}
        var37 = module0.utc_aware(var36)
        assert var37 is not None
        var38 = module0.utc_method()
    except BaseException:
        pass


def test_case_124():
    try:
        var0 = b'\x0b@\xa8\x92\x18\xf75~y\xb6\xfbJ\x81\t'
        var1 = module0.utc_aware(var0)
        assert var1 is not None
        var2 = module0.tzUTC()
        assert var2 is not None
        var3 = module0.tzUTC()
        assert var3 is not None
        var4 = var3.utcoffset(var2)
        assert var4 is not None
        var5 = 2445
        var6 = var3.utcoffset(var5)
        assert var6 is not None
        var7 = b'J\xc2-p\xc7l\xa7\xcd\xa7 \xacM>\xbc\xbb'
        var8 = {}
        var9 = module0.tzUTC(**var8)
        assert var9 is not None
        var10 = var9.dst(var7)
        assert var10 is not None
        var11 = set()
        var12 = var9.dst(var11)
        assert var12 is not None
        var13 = -416
        var14 = {var13, var13}
        var15 = [var14, var13]
        var16 = b'7\r\xbf\xc5\x83P\xd2\x1fZ8\x1e\xf8 \xb1@\xe4kg'
        var17 = [var16, var16, var16]
        var18 = module0.tzUTC(*var17)
        assert var18 is not None
        var19 = var18.dst(var15)
        assert var19 is not None
        var20 = -2060.41
        var21 = var18.utcoffset(var20)
        assert var21 is not None
        var22 = module0.tzUTC()
        assert var22 is not None
        var23 = None
        var24 = {}
        var25 = module0.tzUTC(**var24)
        assert var25 is not None
        var26 = var25.dst(var23)
        assert var26 is not None
        var27 = [var23, var24, var26]
        var28 = module0.tzUTC(*var27)
        assert var28 is not None
        var29 = None
        var30 = var28.dst(var29)
        assert var30 is not None
        var31 = 0.8
        var32 = module0.tzUTC()
        assert var32 is not None
        var33 = var32.utcoffset(var31)
        assert var33 is not None
        var34 = -2019
        var35 = None
        var36 = [var35]
        var37 = module0.tzUTC(*var36)
        assert var37 is not None
        var38 = var37.dst(var34)
        assert var38 is not None
        var39 = None
        var40 = module0.tzUTC()
        assert var40 is not None
        var41 = var40.utcoffset(var39)
        assert var41 is not None
        var42 = None
        var43 = {}
        var44 = module0.tzUTC(**var43)
        assert var44 is not None
        var45 = var44.dst(var42)
        assert var45 is not None
        var46 = module0.tzUTC()
        assert var46 is not None
        var47 = var46.utcoffset(var39)
        assert var47 is not None
        var48 = None
        var49 = {}
        var50 = module0.tzUTC(**var49)
        assert var50 is not None
        var51 = var50.dst(var48)
        assert var51 is not None
        var52 = module0.utc_method()
    except BaseException:
        pass


def test_case_125():
    try:
        var0 = True
        var1 = {var0: var0, var0: var0, var0: var0, var0: var0}
        var2 = module0.tzUTC()
        assert var2 is not None
        var3 = var2.utcoffset(var1)
        assert var3 is not None
        var4 = None
        var5 = var4,
        var6 = module0.tzUTC()
        assert var6 is not None
        var7 = var6.dst(var5)
        assert var7 is not None
        var8 = None
        var9 = module0.tzUTC()
        assert var9 is not None
        var10 = var9.utcoffset(var8)
        assert var10 is not None
        var11 = module0.utc_method()
    except BaseException:
        pass


def test_case_126():
    try:
        var0 = None
        var1 = [var0]
        var2 = ';'
        var3 = "R1'$U:wG16\x0bQv|91{b5"
        var4 = {var2: var2, var3: var1, var2: var0, var2: var1}
        var5 = module0.utc_method(*var1, **var4)
    except BaseException:
        pass


def test_case_127():
    try:
        var0 = None
        var1 = module0.tzUTC()
        assert var1 is not None
        var2 = var1.utcoffset(var0)
        assert var2 is not None
        var3 = None
        var4 = var1.utcoffset(var3)
        assert var4 is not None
        var5 = module0.utc_aware(var3)
        assert var5 is not None
        var6 = 2994
        var7 = module0.utc_aware(var6)
        assert var7 is not None
        var8 = None
        var9 = module0.tzUTC()
        assert var9 is not None
        var10 = var9.utcoffset(var8)
        assert var10 is not None
        var11 = None
        var12 = {}
        var13 = module0.tzUTC(**var12)
        assert var13 is not None
        var14 = var13.dst(var11)
        assert var14 is not None
        var15 = module0.tzUTC()
        assert var15 is not None
        var16 = var15.utcoffset(var8)
        assert var16 is not None
        var17 = b'J\xc2-p\xc7l\xa7\xcd\xa7 \xacM>\xbc\xbb'
        var18 = {}
        var19 = module0.tzUTC(**var18)
        assert var19 is not None
        var20 = var19.dst(var17)
        assert var20 is not None
        var21 = set()
        var22 = var19.dst(var21)
        assert var22 is not None
        var23 = module0.utc_method()
    except BaseException:
        pass


def test_case_128():
    try:
        var0 = True
        var1 = {var0: var0, var0: var0, var0: var0, var0: var0}
        var2 = module0.tzUTC()
        assert var2 is not None
        var3 = var2.utcoffset(var1)
        assert var3 is not None
        var4 = None
        var5 = var4,
        var6 = module0.tzUTC()
        assert var6 is not None
        var7 = var6.dst(var5)
        assert var7 is not None
        var8 = b'\x0b@\xa8\x92\x18\xf75~y\xb6\xfbJ\x81\t'
        var9 = module0.utc_aware(var8)
        assert var9 is not None
        var10 = -2019
        var11 = None
        var12 = [var11]
        var13 = module0.tzUTC(*var12)
        assert var13 is not None
        var14 = var13.dst(var10)
        assert var14 is not None
        var15 = {var14: var12, var14: var10}
        var16 = module0.utc_aware(var15)
        assert var16 is not None
        var17 = -2019
        var18 = None
        var19 = [var18]
        var20 = module0.tzUTC(*var19)
        assert var20 is not None
        var21 = var20.dst(var17)
        assert var21 is not None
        var22 = {var21: var19, var21: var17}
        var23 = module0.utc_aware(var22)
        assert var23 is not None
        var24 = module0.tzUTC()
        assert var24 is not None
        var25 = {}
        var26 = module0.utc_method(*var19, **var25)
    except BaseException:
        pass


def test_case_129():
    try:
        var0 = None
        var1 = {}
        var2 = module0.tzUTC(**var1)
        assert var2 is not None
        var3 = var2.dst(var0)
        assert var3 is not None
        var4 = -2019
        var5 = None
        var6 = [var5]
        var7 = module0.tzUTC(*var6)
        assert var7 is not None
        var8 = var7.dst(var4)
        assert var8 is not None
        var9 = None
        var10 = module0.tzUTC()
        assert var10 is not None
        var11 = var10.utcoffset(var9)
        assert var11 is not None
        var12 = None
        var13 = var10.utcoffset(var12)
        assert var13 is not None
        var14 = module0.utc_aware(var12)
        assert var14 is not None
        var15 = -2019
        var16 = None
        var17 = [var16]
        var18 = module0.tzUTC(*var17)
        assert var18 is not None
        var19 = var18.dst(var15)
        assert var19 is not None
        var20 = {var19: var17, var19: var15}
        var21 = module0.utc_aware(var20)
        assert var21 is not None
        var22 = module0.tzUTC()
        assert var22 is not None
        var23 = None
        var24 = module0.tzUTC()
        assert var24 is not None
        var25 = var24.utcoffset(var23)
        assert var25 is not None
        var26 = -416
        var27 = {var26, var26}
        var28 = [var27, var26]
        var29 = b'7\r\xbf\xc5\x83P\xd2\x1fZ8\x1e\xf8 \xb1@\xe4kg'
        var30 = [var29, var29, var29]
        var31 = module0.tzUTC(*var30)
        assert var31 is not None
        var32 = var31.dst(var28)
        assert var32 is not None
        var33 = 2994
        var34 = module0.utc_aware(var33)
        assert var34 is not None
        var35 = -2019
        var36 = None
        var37 = [var36]
        var38 = module0.tzUTC(*var37)
        assert var38 is not None
        var39 = var38.dst(var35)
        assert var39 is not None
        var40 = module0.tzUTC()
        assert var40 is not None
        var41 = '5\x0cMtw@-H)M4(\tky/4q'
        var42 = var38.utcoffset(var41)
        assert var42 is not None
        var43 = None
        var44 = module0.tzUTC()
        assert var44 is not None
        var45 = [var44, var44]
        var46 = ':):ijBSTBjV'
        var47 = {var46: var44, var46: var45}
        var48 = module0.tzUTC(*var45, **var47)
        assert var48 is not None
        var49 = var48.utcoffset(var43)
        assert var49 is not None
        var50 = b'J\xc2-p\xc7l\xa7\xcd\xa7 \xacM>\xbc\xbb'
        var51 = {}
        var52 = module0.tzUTC(**var51)
        assert var52 is not None
        var53 = var52.dst(var50)
        assert var53 is not None
        var54 = None
        var55 = var27, var54, var36, var20
        var56 = module0.isoformat(var55)
    except BaseException:
        pass


def test_case_130():
    try:
        var0 = None
        var1 = {}
        var2 = module0.tzUTC(**var1)
        assert var2 is not None
        var3 = var2.dst(var0)
        assert var3 is not None
        var4 = b'\x0b@\xa8\x92\x18\xf75~y\xb6\xfbJ\x81\t'
        var5 = module0.utc_aware(var4)
        assert var5 is not None
        var6 = ()
        var7 = module0.tzUTC()
        assert var7 is not None
        var8 = [var7]
        var9 = module0.tzUTC(*var8)
        assert var9 is not None
        var10 = [var9]
        var11 = module0.tzUTC(*var10)
        assert var11 is not None
        var12 = var11.utcoffset(var6)
        assert var12 is not None
        var13 = b'J\xc2-p\xc7l\xa7\xcd\xa7 \xacM>\xbc\xbb'
        var14 = {}
        var15 = module0.tzUTC(**var14)
        assert var15 is not None
        var16 = var15.dst(var13)
        assert var16 is not None
        var17 = set()
        var18 = var15.dst(var17)
        assert var18 is not None
        var19 = None
        var20 = module0.tzUTC()
        assert var20 is not None
        var21 = var20.utcoffset(var19)
        assert var21 is not None
        var22 = module0.tzUTC()
        assert var22 is not None
        var23 = None
        var24 = {}
        var25 = module0.tzUTC(**var24)
        assert var25 is not None
        var26 = var25.dst(var23)
        assert var26 is not None
        var27 = [var23, var24, var26]
        var28 = module0.tzUTC(*var27)
        assert var28 is not None
        var29 = None
        var30 = module0.tzUTC()
        assert var30 is not None
        var31 = [var30, var30]
        var32 = ':):ijBSTBjV'
        var33 = {var32: var30, var32: var31}
        var34 = module0.tzUTC(*var31, **var33)
        assert var34 is not None
        var35 = var34.utcoffset(var29)
        assert var35 is not None
        var36 = 2608.3
        var37 = module0.isoformat(var36)
    except BaseException:
        pass


def test_case_131():
    try:
        var0 = -2019
        var1 = None
        var2 = [var1]
        var3 = module0.tzUTC(*var2)
        assert var3 is not None
        var4 = var3.dst(var0)
        assert var4 is not None
        var5 = {var4: var2, var4: var0}
        var6 = module0.utc_aware(var5)
        assert var6 is not None
        var7 = module0.tzUTC()
        assert var7 is not None
        var8 = module0.tzUTC()
        assert var8 is not None
        var9 = module0.tzUTC()
        assert var9 is not None
        var10 = var9.utcoffset(var8)
        assert var10 is not None
        var11 = module0.tzUTC()
        assert var11 is not None
        var12 = None
        var13 = {}
        var14 = module0.tzUTC(**var13)
        assert var14 is not None
        var15 = var14.dst(var12)
        assert var15 is not None
        var16 = [var12, var13, var15]
        var17 = module0.tzUTC(*var16)
        assert var17 is not None
        var18 = -2019
        var19 = None
        var20 = [var19]
        var21 = module0.tzUTC(*var20)
        assert var21 is not None
        var22 = var21.dst(var18)
        assert var22 is not None
        var23 = module0.tzUTC()
        assert var23 is not None
        var24 = None
        var25 = {}
        var26 = module0.tzUTC(**var25)
        assert var26 is not None
        var27 = var26.dst(var24)
        assert var27 is not None
        var28 = [var24, var25, var27]
        var29 = module0.tzUTC(*var28)
        assert var29 is not None
        var30 = None
        var31 = var29.dst(var30)
        assert var31 is not None
        var32 = 0.8
        var33 = module0.tzUTC()
        assert var33 is not None
        var34 = var33.utcoffset(var32)
        assert var34 is not None
        var35 = b'J\xc2-p\xc7l\xa7\xcd\xa7 \xacM>\xbc\xbb'
        var36 = {}
        var37 = module0.tzUTC(**var36)
        assert var37 is not None
        var38 = var37.dst(var35)
        assert var38 is not None
        var39 = set()
        var40 = var37.dst(var39)
        assert var40 is not None
        var41 = -416
        var42 = {var41, var41}
        var43 = [var42, var41]
        var44 = b'7\r\xbf\xc5\x83P\xd2\x1fZ8\x1e\xf8 \xb1@\xe4kg'
        var45 = [var44, var44, var44]
        var46 = module0.tzUTC(*var45)
        assert var46 is not None
        var47 = var46.dst(var43)
        assert var47 is not None
        var48 = -2060.41
        var49 = var46.utcoffset(var48)
        assert var49 is not None
        var50 = [var19, var4]
        var51 = module0.utc_method(*var50)
    except BaseException:
        pass


def test_case_132():
    try:
        var0 = -416
        var1 = {var0, var0}
        var2 = [var1, var0]
        var3 = b'7\r\xbf\xc5\x83P\xd2\x1fZ8\x1e\xf8 \xb1@\xe4kg'
        var4 = [var3, var3, var3]
        var5 = module0.tzUTC(*var4)
        assert var5 is not None
        var6 = var5.dst(var2)
        assert var6 is not None
        var7 = -2060.41
        var8 = var5.utcoffset(var7)
        assert var8 is not None
        var9 = -575
        var10 = module0.utc_aware(var9)
        assert var10 is not None
        var11 = -2019
        var12 = None
        var13 = [var12]
        var14 = module0.tzUTC(*var13)
        assert var14 is not None
        var15 = var14.dst(var11)
        assert var15 is not None
        var16 = module0.tzUTC()
        assert var16 is not None
        var17 = True
        var18 = {var17: var17, var17: var17, var17: var17, var17: var17}
        var19 = module0.tzUTC()
        assert var19 is not None
        var20 = var19.utcoffset(var18)
        assert var20 is not None
        var21 = ()
        var22 = module0.tzUTC()
        assert var22 is not None
        var23 = [var22]
        var24 = module0.tzUTC(*var23)
        assert var24 is not None
        var25 = [var24]
        var26 = module0.tzUTC(*var25)
        assert var26 is not None
        var27 = var26.utcoffset(var21)
        assert var27 is not None
        var28 = None
        var29 = {}
        var30 = module0.tzUTC(**var29)
        assert var30 is not None
        var31 = var30.dst(var28)
        assert var31 is not None
        var32 = 'q` ?1f\n\x0b$$kh1D~$x\n'
        var33 = module0.isoformat(var32)
    except BaseException:
        pass


def test_case_133():
    try:
        var0 = True
        var1 = {var0: var0, var0: var0, var0: var0, var0: var0}
        var2 = module0.tzUTC()
        assert var2 is not None
        var3 = var2.utcoffset(var1)
        assert var3 is not None
        var4 = None
        var5 = module0.tzUTC()
        assert var5 is not None
        var6 = var5.utcoffset(var4)
        assert var6 is not None
        var7 = None
        var8 = var5.utcoffset(var7)
        assert var8 is not None
        var9 = module0.utc_aware(var7)
        assert var9 is not None
        var10 = b'\xf0r\x84\x8d\x80c\xf0\xa1\xa9\xd5\x90y'
        var11 = {var2, var10, var1}
    except BaseException:
        pass


def test_case_134():
    try:
        var0 = -2019
        var1 = None
        var2 = [var1]
        var3 = module0.tzUTC(*var2)
        assert var3 is not None
        var4 = var3.dst(var0)
        assert var4 is not None
        var5 = module0.tzUTC()
        assert var5 is not None
        var6 = '5\x0cMtw@-H)M4(\tky/4q'
        var7 = var3.utcoffset(var6)
        assert var7 is not None
        var8 = -575
        var9 = module0.utc_aware(var8)
        assert var9 is not None
        var10 = module0.tzUTC()
        assert var10 is not None
        var11 = module0.tzUTC()
        assert var11 is not None
        var12 = var11.utcoffset(var10)
        assert var12 is not None
        var13 = 2445
        var14 = var11.utcoffset(var13)
        assert var14 is not None
        var15 = -2019
        var16 = None
        var17 = [var16]
        var18 = module0.tzUTC(*var17)
        assert var18 is not None
        var19 = var18.dst(var15)
        assert var19 is not None
        var20 = None
        var21 = module0.tzUTC()
        assert var21 is not None
        var22 = var21.utcoffset(var20)
        assert var22 is not None
        var23 = -2019
        var24 = None
        var25 = [var24]
        var26 = module0.tzUTC(*var25)
        assert var26 is not None
        var27 = var26.dst(var23)
        assert var27 is not None
        var28 = {var27: var25, var27: var23}
        var29 = module0.utc_aware(var28)
        assert var29 is not None
        var30 = True
        var31 = {var30: var30, var30: var30, var30: var30, var30: var30}
        var32 = module0.tzUTC()
        assert var32 is not None
        var33 = var32.utcoffset(var31)
        assert var33 is not None
        var34 = None
        var35 = var34,
        var36 = module0.tzUTC()
        assert var36 is not None
        var37 = var36.dst(var35)
        assert var37 is not None
        var38 = None
        var39 = module0.tzUTC()
        assert var39 is not None
        var40 = [var39, var39]
        var41 = ':):ijBSTBjV'
        var42 = {var41: var39, var41: var40}
        var43 = module0.tzUTC(*var40, **var42)
        assert var43 is not None
        var44 = var43.utcoffset(var38)
        assert var44 is not None
        var45 = module0.utc_method()
    except BaseException:
        pass


def test_case_135():
    try:
        var0 = None
        var1 = module0.tzUTC()
        assert var1 is not None
        var2 = var1.utcoffset(var0)
        assert var2 is not None
        var3 = None
        var4 = var1.utcoffset(var3)
        assert var4 is not None
        var5 = True
        var6 = {var5: var5, var5: var5, var5: var5, var5: var5}
        var7 = module0.tzUTC()
        assert var7 is not None
        var8 = var7.utcoffset(var6)
        assert var8 is not None
        var9 = 2994
        var10 = module0.utc_aware(var9)
        assert var10 is not None
        var11 = None
        var12 = var7.dst(var11)
        assert var12 is not None
        var13 = module0.tzUTC()
        assert var13 is not None
        var14 = module0.tzUTC()
        assert var14 is not None
        var15 = var14.utcoffset(var13)
        assert var15 is not None
        var16 = module0.utc_method()
    except BaseException:
        pass


def test_case_136():
    try:
        var0 = module0.tzUTC()
        assert var0 is not None
        var1 = -2019
        var2 = None
        var3 = [var2]
        var4 = module0.tzUTC(*var3)
        assert var4 is not None
        var5 = var4.dst(var1)
        assert var5 is not None
        var6 = None
        var7 = module0.utc_aware(var6)
        assert var7 is not None
        var8 = '|wc2|&OBk\n?H\x0c.h`'
        var9 = {var8: var8, var8: var0}
        var10 = module0.utc_method(**var9)
    except BaseException:
        pass


def test_case_137():
    try:
        var0 = None
        var1 = module0.tzUTC()
        assert var1 is not None
        var2 = var1.utcoffset(var0)
        assert var2 is not None
        var3 = None
        var4 = {}
        var5 = module0.tzUTC(*var3, **var4)
    except BaseException:
        pass


def test_case_138():
    try:
        var0 = -4178
        var1 = module0.isoformat(var0)
    except BaseException:
        pass


def test_case_139():
    try:
        var0 = ()
        var1 = module0.tzUTC()
        assert var1 is not None
        var2 = [var1]
        var3 = module0.tzUTC(*var2)
        assert var3 is not None
        var4 = [var3]
        var5 = module0.tzUTC(*var4)
        assert var5 is not None
        var6 = var5.utcoffset(var0)
        assert var6 is not None
        var7 = module0.tzUTC()
        assert var7 is not None
        var8 = None
        var9 = module0.isoformat(var8)
    except BaseException:
        pass


def test_case_140():
    try:
        var0 = 2994
        var1 = module0.utc_aware(var0)
        assert var1 is not None
        var2 = module0.tzUTC()
        assert var2 is not None
        var3 = None
        var4 = {}
        var5 = module0.tzUTC(**var4)
        assert var5 is not None
        var6 = var5.dst(var3)
        assert var6 is not None
        var7 = [var3, var4, var6]
        var8 = module0.tzUTC(*var7)
        assert var8 is not None
        var9 = None
        var10 = var8.dst(var9)
        assert var10 is not None
        var11 = -2019
        var12 = None
        var13 = [var12]
        var14 = module0.tzUTC(*var13)
        assert var14 is not None
        var15 = var14.dst(var11)
        assert var15 is not None
        var16 = module0.tzUTC()
        assert var16 is not None
        var17 = 'Akbe`@a~EQ{/?mH@%'
        var18 = var14.dst(var17)
        assert var18 is not None
        var19 = True
        var20 = {var19: var19, var19: var19, var19: var19, var19: var19}
        var21 = module0.tzUTC()
        assert var21 is not None
        var22 = var21.utcoffset(var20)
        assert var22 is not None
        var23 = None
        var24 = var23,
        var25 = module0.tzUTC()
        assert var25 is not None
        var26 = var25.dst(var24)
        assert var26 is not None
        var27 = -2019
        var28 = None
        var29 = [var28]
        var30 = module0.tzUTC(*var29)
        assert var30 is not None
        var31 = var30.dst(var27)
        assert var31 is not None
        var32 = {var31: var29, var31: var27}
        var33 = module0.utc_aware(var32)
        assert var33 is not None
        var34 = module0.tzUTC()
        assert var34 is not None
        var35 = None
        var36 = {}
        var37 = module0.tzUTC(**var36)
        assert var37 is not None
        var38 = var37.dst(var35)
        assert var38 is not None
        var39 = None
        var40 = module0.tzUTC()
        assert var40 is not None
        var41 = [var40, var40]
        var42 = ':):ijBSTBjV'
        var43 = {var42: var40, var42: var41}
        var44 = module0.tzUTC(*var41, **var43)
        assert var44 is not None
        var45 = var44.utcoffset(var39)
        assert var45 is not None
        var46 = module0.tzUTC()
        assert var46 is not None
        var47 = -2019
        var48 = None
        var49 = [var48]
        var50 = module0.tzUTC(*var49)
        assert var50 is not None
        var51 = var50.dst(var47)
        assert var51 is not None
        var52 = module0.tzUTC()
        assert var52 is not None
        var53 = {var51, var52}
        var54 = module0.utc_aware(var53)
        assert var54 is not None
        var55 = -575
        var56 = module0.utc_aware(var55)
        assert var56 is not None
        var57 = -416
        var58 = {var57, var57}
        var59 = [var58, var57]
        var60 = b'7\r\xbf\xc5\x83P\xd2\x1fZ8\x1e\xf8 \xb1@\xe4kg'
        var61 = [var60, var60, var60]
        var62 = module0.tzUTC(*var61)
        assert var62 is not None
        var63 = var62.dst(var59)
        assert var63 is not None
        var64 = module0.utc_method()
    except BaseException:
        pass


def test_case_141():
    try:
        var0 = b'\x0b@\xa8\x92\x18\xf75~y\xb6\xfbJ\x81\t'
        var1 = module0.utc_aware(var0)
        assert var1 is not None
        var2 = -1473.5683
        var3 = module0.utc_aware(var2)
        assert var3 is not None
        var4 = -2019
        var5 = None
        var6 = [var5]
        var7 = module0.tzUTC(*var6)
        assert var7 is not None
        var8 = var7.dst(var4)
        assert var8 is not None
        var9 = {var8: var6, var8: var4}
        var10 = module0.utc_aware(var9)
        assert var10 is not None
        var11 = module0.tzUTC()
        assert var11 is not None
        var12 = module0.tzUTC()
        assert var12 is not None
        var13 = -2019
        var14 = None
        var15 = [var14]
        var16 = module0.tzUTC(*var15)
        assert var16 is not None
        var17 = var16.dst(var13)
        assert var17 is not None
        var18 = {var17: var15, var17: var13}
        var19 = module0.utc_aware(var18)
        assert var19 is not None
        var20 = None
        var21 = module0.tzUTC()
        assert var21 is not None
        var22 = [var21, var21]
        var23 = ':):ijBSTBjV'
        var24 = {var23: var21, var23: var22}
        var25 = module0.tzUTC(*var22, **var24)
        assert var25 is not None
        var26 = var25.utcoffset(var20)
        assert var26 is not None
        var27 = True
        var28 = {var27: var27, var27: var27, var27: var27, var27: var27}
        var29 = module0.tzUTC()
        assert var29 is not None
        var30 = var29.utcoffset(var28)
        assert var30 is not None
        var31 = None
        var32 = var31,
        var33 = module0.tzUTC()
        assert var33 is not None
        var34 = var33.dst(var32)
        assert var34 is not None
        var35 = b'\x0b@\xa8\x92\x18\xf75~y\xb6\xfbJ\x81\t'
        var36 = module0.utc_aware(var35)
        assert var36 is not None
        var37 = b'J\xc2-p\xc7l\xa7\xcd\xa7 \xacM>\xbc\xbb'
        var38 = {}
        var39 = module0.tzUTC(**var38)
        assert var39 is not None
        var40 = var39.dst(var37)
        assert var40 is not None
        var41 = -416
        var42 = {var41, var41}
        var43 = [var42, var41]
        var44 = b'7\r\xbf\xc5\x83P\xd2\x1fZ8\x1e\xf8 \xb1@\xe4kg'
        var45 = [var44, var44, var44]
        var46 = module0.tzUTC(*var45)
        assert var46 is not None
        var47 = var46.dst(var43)
        assert var47 is not None
        var48 = -2060.41
        var49 = var46.utcoffset(var48)
        assert var49 is not None
        var50 = module0.utc_method()
    except BaseException:
        pass


def test_case_142():
    try:
        var0 = None
        var1 = module0.tzUTC()
        assert var1 is not None
        var2 = var1.utcoffset(var0)
        assert var2 is not None
        var3 = None
        var4 = {}
        var5 = module0.tzUTC(**var4)
        assert var5 is not None
        var6 = var5.dst(var3)
        assert var6 is not None
        var7 = module0.tzUTC()
        assert var7 is not None
        var8 = var7.utcoffset(var0)
        assert var8 is not None
        var9 = -2019
        var10 = None
        var11 = [var10]
        var12 = module0.tzUTC(*var11)
        assert var12 is not None
        var13 = var12.dst(var9)
        assert var13 is not None
        var14 = module0.tzUTC()
        assert var14 is not None
        var15 = 'Akbe`@a~EQ{/?mH@%'
        var16 = var12.dst(var15)
        assert var16 is not None
        var17 = ()
        var18 = var3.dst(var17)
    except BaseException:
        pass


def test_case_143():
    try:
        var0 = -2019
        var1 = None
        var2 = [var1]
        var3 = module0.tzUTC(*var2)
        assert var3 is not None
        var4 = var3.dst(var0)
        assert var4 is not None
        var5 = module0.tzUTC()
        assert var5 is not None
        var6 = ()
        var7 = module0.tzUTC()
        assert var7 is not None
        var8 = [var7]
        var9 = module0.tzUTC(*var8)
        assert var9 is not None
        var10 = [var9]
        var11 = module0.tzUTC(*var10)
        assert var11 is not None
        var12 = var11.utcoffset(var6)
        assert var12 is not None
        var13 = module0.tzUTC()
        assert var13 is not None
        var14 = module0.tzUTC()
        assert var14 is not None
        var15 = var14.utcoffset(var13)
        assert var15 is not None
        var16 = 2445
        var17 = var14.utcoffset(var16)
        assert var17 is not None
        var18 = None
        var19 = module0.tzUTC()
        assert var19 is not None
        var20 = var19.utcoffset(var18)
        assert var20 is not None
        var21 = None
        var22 = var19.utcoffset(var21)
        assert var22 is not None
        var23 = module0.utc_aware(var21)
        assert var23 is not None
        var24 = module0.tzUTC()
        assert var24 is not None
        var25 = -2019
        var26 = None
        var27 = [var26]
        var28 = module0.tzUTC(*var27)
        assert var28 is not None
        var29 = var28.dst(var25)
        assert var29 is not None
        var30 = module0.tzUTC()
        assert var30 is not None
        var31 = 'Akbe`@a~EQ{/?mH@%'
        var32 = var28.dst(var31)
        assert var32 is not None
        var33 = -2019
        var34 = None
        var35 = [var34]
        var36 = module0.tzUTC(*var35)
        assert var36 is not None
        var37 = var36.dst(var33)
        assert var37 is not None
        var38 = {var37: var35, var37: var33}
        var39 = module0.utc_aware(var38)
        assert var39 is not None
        var40 = module0.tzUTC()
        assert var40 is not None
        var41 = module0.tzUTC()
        assert var41 is not None
        var42 = None
        var43 = {}
        var44 = module0.tzUTC(**var43)
        assert var44 is not None
        var45 = var44.dst(var42)
        assert var45 is not None
        var46 = [var42, var43, var45]
        var47 = module0.tzUTC(*var46)
        assert var47 is not None
        var48 = module0.isoformat(var34)
    except BaseException:
        pass


def test_case_144():
    try:
        var0 = None
        var1 = module0.tzUTC()
        assert var1 is not None
        var2 = var1.utcoffset(var0)
        assert var2 is not None
        var3 = None
        var4 = {}
        var5 = module0.tzUTC(**var4)
        assert var5 is not None
        var6 = var5.dst(var3)
        assert var6 is not None
        var7 = module0.tzUTC()
        assert var7 is not None
        var8 = var7.utcoffset(var0)
        assert var8 is not None
        var9 = -2019
        var10 = None
        var11 = [var10]
        var12 = module0.tzUTC(*var11)
        assert var12 is not None
        var13 = var12.dst(var9)
        assert var13 is not None
        var14 = {var13: var11, var13: var9}
        var15 = module0.utc_aware(var14)
        assert var15 is not None
        var16 = module0.tzUTC()
        assert var16 is not None
        var17 = module0.tzUTC()
        assert var17 is not None
        var18 = b'\x1by9\xaf\x8a921\xe35'
        var19 = module0.isoformat(var18)
    except BaseException:
        pass


def test_case_145():
    try:
        var0 = -2019
        var1 = None
        var2 = [var1]
        var3 = module0.tzUTC(*var2)
        assert var3 is not None
        var4 = var3.dst(var0)
        assert var4 is not None
        var5 = {var4: var2, var4: var0}
        var6 = module0.utc_aware(var5)
        assert var6 is not None
        var7 = -2019
        var8 = None
        var9 = [var8]
        var10 = module0.tzUTC(*var9)
        assert var10 is not None
        var11 = var10.dst(var7)
        assert var11 is not None
        var12 = module0.tzUTC()
        assert var12 is not None
        var13 = '5\x0cMtw@-H)M4(\tky/4q'
        var14 = var10.utcoffset(var13)
        assert var14 is not None
        var15 = -2019
        var16 = None
        var17 = [var16]
        var18 = module0.tzUTC(*var17)
        assert var18 is not None
        var19 = var18.dst(var15)
        assert var19 is not None
        var20 = module0.tzUTC()
        assert var20 is not None
        var21 = b'\x0b@\xa8\x92\x18\xf75~y\xb6\xfbJ\x81\t'
        var22 = module0.utc_aware(var21)
        assert var22 is not None
        var23 = -1473.5683
        var24 = module0.utc_aware(var23)
        assert var24 is not None
        var25 = 0.8
        var26 = module0.tzUTC()
        assert var26 is not None
        var27 = var26.utcoffset(var25)
        assert var27 is not None
        var28 = -416
        var29 = {var28, var28}
        var30 = [var29, var28]
        var31 = b'7\r\xbf\xc5\x83P\xd2\x1fZ8\x1e\xf8 \xb1@\xe4kg'
        var32 = [var31, var31, var31]
        var33 = module0.tzUTC(*var32)
        assert var33 is not None
        var34 = var33.dst(var30)
        assert var34 is not None
        var35 = -2060.41
        var36 = var33.utcoffset(var35)
        assert var36 is not None
        var37 = None
        var38 = module0.tzUTC()
        assert var38 is not None
        var39 = [var38, var38]
        var40 = ':):ijBSTBjV'
        var41 = {var40: var38, var40: var39}
        var42 = module0.tzUTC(*var39, **var41)
        assert var42 is not None
        var43 = var42.utcoffset(var37)
        assert var43 is not None
        var44 = -575
        var45 = module0.utc_aware(var44)
        assert var45 is not None
        var46 = None
        var47 = module0.tzUTC()
        assert var47 is not None
        var48 = var47.utcoffset(var46)
        assert var48 is not None
        var49 = module0.tzUTC()
        assert var49 is not None
        var50 = module0.tzUTC()
        assert var50 is not None
        var51 = var50.utcoffset(var49)
        assert var51 is not None
        var52 = module0.utc_method(*var2)
    except BaseException:
        pass


def test_case_146():
    try:
        var0 = b'J\xc2-p\xc7l\xa7\xcd\xa7 \xacM>\xbc\xbb'
        var1 = {}
        var2 = module0.tzUTC(**var1)
        assert var2 is not None
        var3 = var2.dst(var0)
        assert var3 is not None
        var4 = module0.tzUTC()
        assert var4 is not None
        var5 = module0.tzUTC()
        assert var5 is not None
        var6 = var5.utcoffset(var4)
        assert var6 is not None
        var7 = -575
        var8 = module0.utc_aware(var7)
        assert var8 is not None
        var9 = module0.tzUTC()
        assert var9 is not None
        var10 = -2019
        var11 = None
        var12 = [var11]
        var13 = module0.tzUTC(*var12)
        assert var13 is not None
        var14 = var13.dst(var10)
        assert var14 is not None
        var15 = module0.tzUTC()
        assert var15 is not None
        var16 = {var14, var15}
        var17 = module0.utc_aware(var16)
        assert var17 is not None
        var18 = -2019
        var19 = None
        var20 = [var19]
        var21 = module0.tzUTC(*var20)
        assert var21 is not None
        var22 = var21.dst(var18)
        assert var22 is not None
        var23 = {var22: var20, var22: var18}
        var24 = module0.utc_aware(var23)
        assert var24 is not None
        var25 = module0.tzUTC()
        assert var25 is not None
        var26 = module0.tzUTC()
        assert var26 is not None
        var27 = -2019
        var28 = None
        var29 = [var28]
        var30 = module0.tzUTC(*var29)
        assert var30 is not None
        var31 = var30.dst(var27)
        assert var31 is not None
        var32 = {var31: var29, var31: var27}
        var33 = module0.utc_aware(var32)
        assert var33 is not None
        var34 = module0.tzUTC()
        assert var34 is not None
        var35 = b'J\xc2-p\xc7l\xa7\xcd\xa7 \xacM>\xbc\xbb'
        var36 = {}
        var37 = module0.tzUTC(**var36)
        assert var37 is not None
        var38 = var37.dst(var35)
        assert var38 is not None
        var39 = set()
        var40 = var37.dst(var39)
        assert var40 is not None
        var41 = None
        var42 = module0.tzUTC()
        assert var42 is not None
        var43 = var42.utcoffset(var41)
        assert var43 is not None
        var44 = None
        var45 = {}
        var46 = module0.tzUTC(**var45)
        assert var46 is not None
        var47 = var46.dst(var44)
        assert var47 is not None
        var48 = module0.tzUTC()
        assert var48 is not None
        var49 = var48.utcoffset(var41)
        assert var49 is not None
        var50 = -2019
        var51 = None
        var52 = [var51]
        var53 = module0.tzUTC(*var52)
        assert var53 is not None
        var54 = var53.dst(var50)
        assert var54 is not None
        var55 = module0.tzUTC()
        assert var55 is not None
        var56 = 'Akbe`@a~EQ{/?mH@%'
        var57 = var53.dst(var56)
        assert var57 is not None
        var58 = None
        var59 = module0.tzUTC()
        assert var59 is not None
        var60 = var59.utcoffset(var58)
        assert var60 is not None
        var61 = None
        var62 = var59.utcoffset(var61)
        assert var62 is not None
        var63 = module0.utc_aware(var61)
        assert var63 is not None
        var64 = module0.utc_method(*var29)
    except BaseException:
        pass


def test_case_147():
    try:
        var0 = b'J\xc2-p\xc7l\xa7\xcd\xa7 \xacM>\xbc\xbb'
        var1 = {}
        var2 = module0.tzUTC(**var1)
        assert var2 is not None
        var3 = var2.dst(var0)
        assert var3 is not None
        var4 = set()
        var5 = var2.dst(var4)
        assert var5 is not None
        var6 = True
        var7 = {var6: var6, var6: var6, var6: var6, var6: var6}
        var8 = module0.tzUTC()
        assert var8 is not None
        var9 = var8.utcoffset(var7)
        assert var9 is not None
        var10 = -575
        var11 = module0.utc_aware(var10)
        assert var11 is not None
        var12 = module0.tzUTC()
        assert var12 is not None
        var13 = -2019
        var14 = None
        var15 = [var14]
        var16 = module0.tzUTC(*var15)
        assert var16 is not None
        var17 = var16.dst(var13)
        assert var17 is not None
        var18 = {var17: var15, var17: var13}
        var19 = module0.utc_aware(var18)
        assert var19 is not None
        var20 = module0.tzUTC()
        assert var20 is not None
        var21 = module0.tzUTC()
        assert var21 is not None
        var22 = None
        var23 = module0.tzUTC()
        assert var23 is not None
        var24 = [var23, var23]
        var25 = ':):ijBSTBjV'
        var26 = {var25: var23, var25: var24}
        var27 = module0.tzUTC(*var24, **var26)
        assert var27 is not None
        var28 = var27.utcoffset(var22)
        assert var28 is not None
        var29 = module0.tzUTC()
        assert var29 is not None
        var30 = None
        var31 = {}
        var32 = module0.tzUTC(**var31)
        assert var32 is not None
        var33 = var32.dst(var30)
        assert var33 is not None
        var34 = [var30, var31, var33]
        var35 = module0.tzUTC(*var34)
        assert var35 is not None
        var36 = None
        var37 = module0.tzUTC()
        assert var37 is not None
        var38 = var37.utcoffset(var36)
        assert var38 is not None
        var39 = None
        var40 = {}
        var41 = module0.tzUTC(**var40)
        assert var41 is not None
        var42 = var41.dst(var39)
        assert var42 is not None
        var43 = module0.tzUTC()
        assert var43 is not None
        var44 = var43.utcoffset(var36)
        assert var44 is not None
        var45 = None
        var46 = {}
        var47 = module0.tzUTC(**var46)
        assert var47 is not None
        var48 = var47.dst(var45)
        assert var48 is not None
        var49 = -2019
        var50 = None
        var51 = [var50]
        var52 = module0.tzUTC(*var51)
        assert var52 is not None
        var53 = var52.dst(var49)
        assert var53 is not None
        var54 = {var53: var51, var53: var49}
        var55 = module0.utc_aware(var54)
        assert var55 is not None
        var56 = module0.tzUTC()
        assert var56 is not None
        var57 = module0.utc_method()
    except BaseException:
        pass


def test_case_148():
    try:
        var0 = -2019
        var1 = None
        var2 = [var1]
        var3 = module0.tzUTC(*var2)
        assert var3 is not None
        var4 = var3.dst(var0)
        assert var4 is not None
        var5 = module0.tzUTC()
        assert var5 is not None
        var6 = '5\x0cMtw@-H)M4(\tky/4q'
        var7 = var3.utcoffset(var6)
        assert var7 is not None
        var8 = -2019
        var9 = None
        var10 = [var9]
        var11 = module0.tzUTC(*var10)
        assert var11 is not None
        var12 = var11.dst(var8)
        assert var12 is not None
        var13 = module0.tzUTC()
        assert var13 is not None
        var14 = False
        var15 = var13.dst(var14)
        assert var15 is not None
        var16 = module0.tzUTC()
        assert var16 is not None
        var17 = module0.tzUTC()
        assert var17 is not None
        var18 = var17.utcoffset(var16)
        assert var18 is not None
        var19 = 2445
        var20 = var17.utcoffset(var19)
        assert var20 is not None
        var21 = module0.tzUTC()
        assert var21 is not None
        var22 = None
        var23 = {}
        var24 = module0.tzUTC(**var23)
        assert var24 is not None
        var25 = var24.dst(var22)
        assert var25 is not None
        var26 = [var22, var23, var25]
        var27 = module0.tzUTC(*var26)
        assert var27 is not None
        var28 = -2019
        var29 = None
        var30 = [var29]
        var31 = module0.tzUTC(*var30)
        assert var31 is not None
        var32 = var31.dst(var28)
        assert var32 is not None
        var33 = {var32: var30, var32: var28}
        var34 = module0.utc_aware(var33)
        assert var34 is not None
        var35 = None
        var36 = module0.tzUTC()
        assert var36 is not None
        var37 = var36.utcoffset(var35)
        assert var37 is not None
        var38 = True
        var39 = var38, var0
        var40 = [var28, var39, var3]
        var41 = module0.utc_method(*var40)
    except BaseException:
        pass


def test_case_149():
    try:
        var0 = 2994
        var1 = module0.utc_aware(var0)
        assert var1 is not None
        var2 = None
        var3 = 'KL`}y-rr>r\x0b(Lci'
        var4 = module0.tzUTC(*var2)
    except BaseException:
        pass


def test_case_150():
    try:
        var0 = b'J\xc2-p\xc7l\xa7\xcd\xa7 \xacM>\xbc\xbb'
        var1 = {}
        var2 = module0.tzUTC(**var1)
        assert var2 is not None
        var3 = var2.dst(var0)
        assert var3 is not None
        var4 = -2019
        var5 = None
        var6 = [var5]
        var7 = module0.tzUTC(*var6)
        assert var7 is not None
        var8 = var7.dst(var4)
        assert var8 is not None
        var9 = {var8: var6, var8: var4}
        var10 = module0.utc_aware(var9)
        assert var10 is not None
        var11 = module0.tzUTC()
        assert var11 is not None
        var12 = module0.tzUTC()
        assert var12 is not None
        var13 = -2019
        var14 = None
        var15 = [var14]
        var16 = module0.tzUTC(*var15)
        assert var16 is not None
        var17 = var16.dst(var13)
        assert var17 is not None
        var18 = b'\x0b@\xa8\x92\x18\xf75~y\xb6\xfbJ\x81\t'
        var19 = module0.utc_aware(var18)
        assert var19 is not None
        var20 = None
        var21 = module0.tzUTC()
        assert var21 is not None
        var22 = [var21, var21]
        var23 = ':):ijBSTBjV'
        var24 = {var23: var21, var23: var22}
        var25 = module0.tzUTC(*var22, **var24)
        assert var25 is not None
        var26 = var25.utcoffset(var20)
        assert var26 is not None
        var27 = -575
        var28 = module0.utc_aware(var27)
        assert var28 is not None
        var29 = module0.tzUTC()
        assert var29 is not None
        var30 = module0.tzUTC()
        assert var30 is not None
        var31 = var30.utcoffset(var29)
        assert var31 is not None
        var32 = True
        var33 = module0.isoformat(var32)
    except BaseException:
        pass


def test_case_151():
    try:
        var0 = True
        var1 = {var0: var0, var0: var0, var0: var0, var0: var0}
        var2 = module0.tzUTC()
        assert var2 is not None
        var3 = var2.utcoffset(var1)
        assert var3 is not None
        var4 = None
        var5 = var4,
        var6 = module0.tzUTC()
        assert var6 is not None
        var7 = var6.dst(var5)
        assert var7 is not None
        var8 = ()
        var9 = module0.tzUTC()
        assert var9 is not None
        var10 = [var9]
        var11 = module0.tzUTC(*var10)
        assert var11 is not None
        var12 = [var11]
        var13 = module0.tzUTC(*var12)
        assert var13 is not None
        var14 = var13.utcoffset(var8)
        assert var14 is not None
        var15 = None
        var16 = module0.tzUTC()
        assert var16 is not None
        var17 = var16.utcoffset(var15)
        assert var17 is not None
        var18 = None
        var19 = var16.utcoffset(var18)
        assert var19 is not None
        var20 = module0.utc_aware(var18)
        assert var20 is not None
        var21 = 2994
        var22 = module0.utc_aware(var21)
        assert var22 is not None
        var23 = module0.isoformat(var8)
    except BaseException:
        pass


def test_case_152():
    try:
        var0 = -2019
        var1 = None
        var2 = [var1]
        var3 = module0.tzUTC(*var2)
        assert var3 is not None
        var4 = var3.dst(var0)
        assert var4 is not None
        var5 = module0.tzUTC()
        assert var5 is not None
        var6 = b'J\xc2-p\xc7l\xa7\xcd\xa7 \xacM>\xbc\xbb'
        var7 = {}
        var8 = module0.tzUTC(**var7)
        assert var8 is not None
        var9 = var8.dst(var6)
        assert var9 is not None
        var10 = set()
        var11 = var8.dst(var10)
        assert var11 is not None
        var12 = b'\x0b@\xa8\x92\x18\xf75~y\xb6\xfbJ\x81\t'
        var13 = module0.utc_aware(var12)
        assert var13 is not None
        var14 = module0.tzUTC()
        assert var14 is not None
        var15 = -2019
        var16 = None
        var17 = [var16]
        var18 = module0.tzUTC(*var17)
        assert var18 is not None
        var19 = var18.dst(var15)
        assert var19 is not None
        var20 = module0.tzUTC()
        assert var20 is not None
        var21 = {var19, var20}
        var22 = module0.utc_aware(var21)
        assert var22 is not None
        var23 = True
        var24 = {var23: var23, var23: var23, var23: var23, var23: var23}
        var25 = module0.tzUTC()
        assert var25 is not None
        var26 = var25.utcoffset(var24)
        assert var26 is not None
        var27 = 2994
        var28 = module0.utc_aware(var27)
        assert var28 is not None
        var29 = None
        var30 = var25.dst(var29)
        assert var30 is not None
        var31 = module0.utc_method(**var7)
    except BaseException:
        pass


def test_case_153():
    try:
        var0 = 2994
        var1 = module0.utc_aware(var0)
        assert var1 is not None
        var2 = None
        var3 = module0.tzUTC()
        assert var3 is not None
        var4 = var3.utcoffset(var2)
        assert var4 is not None
        var5 = None
        var6 = var3.utcoffset(var5)
        assert var6 is not None
        var7 = -2019
        var8 = None
        var9 = [var8]
        var10 = module0.tzUTC(*var9)
        assert var10 is not None
        var11 = var10.dst(var7)
        assert var11 is not None
        var12 = {var11: var9, var11: var7}
        var13 = module0.utc_aware(var12)
        assert var13 is not None
        var14 = module0.tzUTC()
        assert var14 is not None
        var15 = module0.tzUTC()
        assert var15 is not None
        var16 = None
        var17 = module0.tzUTC()
        assert var17 is not None
        var18 = var17.utcoffset(var16)
        assert var18 is not None
        var19 = None
        var20 = {}
        var21 = module0.tzUTC(**var20)
        assert var21 is not None
        var22 = var21.dst(var19)
        assert var22 is not None
        var23 = module0.tzUTC()
        assert var23 is not None
        var24 = var23.utcoffset(var16)
        assert var24 is not None
        var25 = None
        var26 = module0.tzUTC()
        assert var26 is not None
        var27 = var26.utcoffset(var25)
        assert var27 is not None
        var28 = None
        var29 = var26.utcoffset(var28)
        assert var29 is not None
        var30 = module0.utc_aware(var28)
        assert var30 is not None
        var31 = module0.isoformat(var16)
    except BaseException:
        pass


def test_case_154():
    try:
        var0 = 0.8
        var1 = module0.tzUTC()
        assert var1 is not None
        var2 = var1.utcoffset(var0)
        assert var2 is not None
        var3 = None
        var4 = {}
        var5 = module0.tzUTC(**var4)
        assert var5 is not None
        var6 = var5.dst(var3)
        assert var6 is not None
        var7 = b'J\xc2-p\xc7l\xa7\xcd\xa7 \xacM>\xbc\xbb'
        var8 = {}
        var9 = module0.tzUTC(**var8)
        assert var9 is not None
        var10 = var9.dst(var7)
        assert var10 is not None
        var11 = set()
        var12 = var9.dst(var11)
        assert var12 is not None
        var13 = 0.8
        var14 = [var13, var9, var7]
        var15 = module0.utc_method(*var14)
    except BaseException:
        pass


def test_case_155():
    try:
        var0 = None
        var1 = module0.tzUTC()
        assert var1 is not None
        var2 = var1.utcoffset(var0)
        assert var2 is not None
        var3 = None
        var4 = var1.utcoffset(var3)
        assert var4 is not None
        var5 = True
        var6 = {var5: var5, var5: var5, var5: var5, var5: var5}
        var7 = module0.tzUTC()
        assert var7 is not None
        var8 = var7.utcoffset(var6)
        assert var8 is not None
        var9 = b'\x0b@\xa8\x92\x18\xf75~y\xb6\xfbJ\x81\t'
        var10 = module0.utc_aware(var9)
        assert var10 is not None
        var11 = -1473.5683
        var12 = module0.utc_aware(var11)
        assert var12 is not None
        var13 = None
        var14 = module0.tzUTC()
        assert var14 is not None
        var15 = var14.utcoffset(var13)
        assert var15 is not None
        var16 = None
        var17 = var14.utcoffset(var16)
        assert var17 is not None
        var18 = module0.utc_aware(var16)
        assert var18 is not None
        var19 = -2019
        var20 = None
        var21 = [var20]
        var22 = module0.tzUTC(*var21)
        assert var22 is not None
        var23 = var22.dst(var19)
        assert var23 is not None
        var24 = module0.tzUTC()
        assert var24 is not None
        var25 = '5\x0cMtw@-H)M4(\tky/4q'
        var26 = var22.utcoffset(var25)
        assert var26 is not None
        var27 = -2019
        var28 = None
        var29 = [var28]
        var30 = module0.tzUTC(*var29)
        assert var30 is not None
        var31 = var30.dst(var27)
        assert var31 is not None
        var32 = module0.tzUTC()
        assert var32 is not None
        var33 = None
        var34 = module0.utc_method(**var33)
    except BaseException:
        pass


def test_case_156():
    try:
        var0 = b'\x0b@\xa8\x92\x18\xf75~y\xb6\xfbJ\x81\t'
        var1 = module0.utc_aware(var0)
        assert var1 is not None
        var2 = module0.tzUTC()
        assert var2 is not None
        var3 = None
        var4 = {}
        var5 = module0.tzUTC(**var4)
        assert var5 is not None
        var6 = var5.dst(var3)
        assert var6 is not None
        var7 = [var3, var4, var6]
        var8 = module0.tzUTC(*var7)
        assert var8 is not None
        var9 = None
        var10 = var8.dst(var9)
        assert var10 is not None
        var11 = -416
        var12 = {var11, var11}
        var13 = [var12, var11]
        var14 = b'7\r\xbf\xc5\x83P\xd2\x1fZ8\x1e\xf8 \xb1@\xe4kg'
        var15 = [var14, var14, var14]
        var16 = module0.tzUTC(*var15)
        assert var16 is not None
        var17 = var16.dst(var13)
        assert var17 is not None
        var18 = -2060.41
        var19 = var16.utcoffset(var18)
        assert var19 is not None
        var20 = True
        var21 = {var20: var20, var20: var20, var20: var20, var20: var20}
        var22 = module0.tzUTC()
        assert var22 is not None
        var23 = var22.utcoffset(var21)
        assert var23 is not None
        var24 = None
        var25 = var24,
        var26 = module0.tzUTC()
        assert var26 is not None
        var27 = var26.dst(var25)
        assert var27 is not None
        var28 = module0.tzUTC()
        assert var28 is not None
        var29 = None
        var30 = {}
        var31 = module0.tzUTC(**var30)
        assert var31 is not None
        var32 = var31.dst(var29)
        assert var32 is not None
        var33 = [var29, var30, var32]
        var34 = module0.tzUTC(*var33)
        assert var34 is not None
        var35 = -2019
        var36 = None
        var37 = [var36]
        var38 = module0.tzUTC(*var37)
        assert var38 is not None
        var39 = var38.dst(var35)
        assert var39 is not None
        var40 = {var39: var37, var39: var35}
        var41 = module0.utc_aware(var40)
        assert var41 is not None
        var42 = b'J\xc2-p\xc7l\xa7\xcd\xa7 \xacM>\xbc\xbb'
        var43 = {}
        var44 = module0.tzUTC(**var43)
        assert var44 is not None
        var45 = var44.dst(var42)
        assert var45 is not None
        var46 = set()
        var47 = var44.dst(var46)
        assert var47 is not None
        var48 = module0.tzUTC()
        assert var48 is not None
        var49 = module0.tzUTC()
        assert var49 is not None
        var50 = var49.utcoffset(var48)
        assert var50 is not None
        var51 = 2445
        var52 = var49.utcoffset(var51)
        assert var52 is not None
        var53 = module0.tzUTC()
        assert var53 is not None
        var54 = -2019
        var55 = None
        var56 = [var55]
        var57 = module0.tzUTC(*var56)
        assert var57 is not None
        var58 = var57.dst(var54)
        assert var58 is not None
        var59 = None
        var60 = module0.utc_aware(var59)
        assert var60 is not None
        var61 = 1.0
        var62 = var29.utcoffset(var61)
    except BaseException:
        pass


def test_case_157():
    try:
        var0 = -2019
        var1 = None
        var2 = [var1]
        var3 = module0.tzUTC(*var2)
        assert var3 is not None
        var4 = var3.dst(var0)
        assert var4 is not None
        var5 = module0.tzUTC()
        assert var5 is not None
        var6 = False
        var7 = var5.dst(var6)
        assert var7 is not None
        var8 = True
        var9 = {var8: var8, var8: var8, var8: var8, var8: var8}
        var10 = module0.tzUTC()
        assert var10 is not None
        var11 = var10.utcoffset(var9)
        assert var11 is not None
        var12 = None
        var13 = var12,
        var14 = module0.tzUTC()
        assert var14 is not None
        var15 = var14.dst(var13)
        assert var15 is not None
        var16 = None
        var17 = module0.tzUTC()
        assert var17 is not None
        var18 = [var17, var17]
        var19 = ':):ijBSTBjV'
        var20 = {var19: var17, var19: var18}
        var21 = module0.tzUTC(*var18, **var20)
        assert var21 is not None
        var22 = var21.utcoffset(var16)
        assert var22 is not None
        var23 = module0.tzUTC()
        assert var23 is not None
        var24 = None
        var25 = {}
        var26 = module0.tzUTC(**var25)
        assert var26 is not None
        var27 = var26.dst(var24)
        assert var27 is not None
        var28 = [var24, var25, var27]
        var29 = module0.tzUTC(*var28)
        assert var29 is not None
        var30 = None
        var31 = var29.dst(var30)
        assert var31 is not None
        var32 = -2019
        var33 = None
        var34 = [var33]
        var35 = module0.tzUTC(*var34)
        assert var35 is not None
        var36 = var35.dst(var32)
        assert var36 is not None
        var37 = module0.tzUTC()
        assert var37 is not None
        var38 = 'Akbe`@a~EQ{/?mH@%'
        var39 = var35.dst(var38)
        assert var39 is not None
        var40 = 0.8
        var41 = module0.tzUTC()
        assert var41 is not None
        var42 = var41.utcoffset(var40)
        assert var42 is not None
        var43 = None
        var44 = module0.tzUTC()
        assert var44 is not None
        var45 = var44.utcoffset(var43)
        assert var45 is not None
        var46 = None
        var47 = var44.utcoffset(var46)
        assert var47 is not None
        var48 = module0.utc_aware(var46)
        assert var48 is not None
        var49 = -416
        var50 = {var49, var49}
        var51 = [var50, var49]
        var52 = b'7\r\xbf\xc5\x83P\xd2\x1fZ8\x1e\xf8 \xb1@\xe4kg'
        var53 = [var52, var52, var52]
        var54 = module0.tzUTC(*var53)
        assert var54 is not None
        var55 = var54.dst(var51)
        assert var55 is not None
        var56 = -2060.41
        var57 = var54.utcoffset(var56)
        assert var57 is not None
        var58 = -2019
        var59 = None
        var60 = [var59]
        var61 = module0.tzUTC(*var60)
        assert var61 is not None
        var62 = var61.dst(var58)
        assert var62 is not None
        var63 = {var62: var60, var62: var58}
        var64 = module0.utc_aware(var63)
        assert var64 is not None
        var65 = module0.tzUTC()
        assert var65 is not None
        var66 = module0.tzUTC()
        assert var66 is not None
        var67 = module0.utc_method(**var20)
    except BaseException:
        pass


def test_case_158():
    try:
        var0 = -2019
        var1 = None
        var2 = [var1]
        var3 = module0.tzUTC(*var2)
        assert var3 is not None
        var4 = var3.dst(var0)
        assert var4 is not None
        var5 = module0.tzUTC()
        assert var5 is not None
        var6 = None
        var7 = {var6: var0}
        var8 = module0.utc_method(**var7)
    except BaseException:
        pass


def test_case_159():
    try:
        var0 = None
        var1 = module0.tzUTC()
        assert var1 is not None
        var2 = var1.utcoffset(var0)
        assert var2 is not None
        var3 = None
        var4 = {}
        var5 = module0.tzUTC(**var4)
        assert var5 is not None
        var6 = var5.dst(var3)
        assert var6 is not None
        var7 = module0.tzUTC()
        assert var7 is not None
        var8 = var7.utcoffset(var0)
        assert var8 is not None
        var9 = {var4: var8, var0: var7, var5: var1}
    except BaseException:
        pass


def test_case_160():
    try:
        var0 = -2019
        var1 = None
        var2 = [var1]
        var3 = module0.tzUTC(*var2)
        assert var3 is not None
        var4 = var3.dst(var0)
        assert var4 is not None
        var5 = True
        var6 = {var5: var5, var5: var5, var5: var5, var5: var5}
        var7 = module0.tzUTC()
        assert var7 is not None
        var8 = var7.utcoffset(var6)
        assert var8 is not None
        var9 = 2994
        var10 = module0.utc_aware(var9)
        assert var10 is not None
        var11 = None
        var12 = var7.dst(var11)
        assert var12 is not None
        var13 = -2019
        var14 = None
        var15 = [var14]
        var16 = module0.tzUTC(*var15)
        assert var16 is not None
        var17 = var16.dst(var13)
        assert var17 is not None
        var18 = module0.tzUTC()
        assert var18 is not None
        var19 = False
        var20 = var18.dst(var19)
        assert var20 is not None
        var21 = module0.isoformat(var14)
    except BaseException:
        pass


def test_case_161():
    try:
        var0 = module0.tzUTC()
        assert var0 is not None
        var1 = -2019
        var2 = None
        var3 = [var2]
        var4 = module0.tzUTC(*var3)
        assert var4 is not None
        var5 = var4.dst(var1)
        assert var5 is not None
        var6 = module0.tzUTC()
        assert var6 is not None
        var7 = {var5, var6}
        var8 = module0.utc_aware(var7)
        assert var8 is not None
        var9 = "Terminal name 'new' is reserved."
        var10 = set()
        var11 = """Finish handling kernel_info reply
        
        Set up protocol adaptation, if needed,
        and signal that connection can continue.
        """
        var12 = {var9: var4, var9: var10, var11: var0, var11: var5}
        var13 = module0.utc_method(**var12)
    except BaseException:
        pass


def test_case_162():
    try:
        var0 = -2019
        var1 = None
        var2 = [var1]
        var3 = module0.tzUTC(*var2)
        assert var3 is not None
        var4 = var3.dst(var0)
        assert var4 is not None
        var5 = module0.tzUTC()
        assert var5 is not None
        var6 = '5\x0cMtw@-H)M4(\tky/4q'
        var7 = var3.utcoffset(var6)
        assert var7 is not None
        var8 = module0.tzUTC()
        assert var8 is not None
        var9 = module0.tzUTC()
        assert var9 is not None
        var10 = var9.utcoffset(var8)
        assert var10 is not None
        var11 = 2445
        var12 = var9.utcoffset(var11)
        assert var12 is not None
        var13 = -2019
        var14 = None
        var15 = [var14]
        var16 = module0.tzUTC(*var15)
        assert var16 is not None
        var17 = var16.dst(var13)
        assert var17 is not None
        var18 = {var17: var15, var17: var13}
        var19 = module0.utc_aware(var18)
        assert var19 is not None
        var20 = module0.tzUTC()
        assert var20 is not None
        var21 = -416
        var22 = {var21, var21}
        var23 = [var22, var21]
        var24 = b'7\r\xbf\xc5\x83P\xd2\x1fZ8\x1e\xf8 \xb1@\xe4kg'
        var25 = [var24, var24, var24]
        var26 = module0.tzUTC(*var25)
        assert var26 is not None
        var27 = var26.dst(var23)
        assert var27 is not None
        var28 = -2060.41
        var29 = var26.utcoffset(var28)
        assert var29 is not None
        var30 = module0.utc_method()
    except BaseException:
        pass


def test_case_163():
    try:
        var0 = module0.tzUTC()
        assert var0 is not None
        var1 = module0.tzUTC()
        assert var1 is not None
        var2 = var1.utcoffset(var0)
        assert var2 is not None
        var3 = -1079.201
        var4 = {var0: var3}
        var5 = var0.dst(var4)
        assert var5 is not None
        var6 = b'\x0b@\xa8\x92\x18\xf75~y\xb6\xfbJ\x81\t'
        var7 = module0.utc_aware(var6)
        assert var7 is not None
        var8 = -1473.5683
        var9 = module0.utc_aware(var8)
        assert var9 is not None
        var10 = module0.tzUTC()
        assert var10 is not None
        var11 = module0.tzUTC()
        assert var11 is not None
        var12 = var11.utcoffset(var10)
        assert var12 is not None
        var13 = None
        var14 = module0.tzUTC()
        assert var14 is not None
        var15 = var14.utcoffset(var13)
        assert var15 is not None
        var16 = None
        var17 = {}
        var18 = module0.tzUTC(**var17)
        assert var18 is not None
        var19 = var18.dst(var16)
        assert var19 is not None
        var20 = module0.tzUTC()
        assert var20 is not None
        var21 = var20.utcoffset(var13)
        assert var21 is not None
        var22 = module0.utc_method(**var17)
    except BaseException:
        pass


def test_case_164():
    try:
        var0 = 0.8
        var1 = module0.tzUTC()
        assert var1 is not None
        var2 = var1.utcoffset(var0)
        assert var2 is not None
        var3 = None
        var4 = module0.tzUTC()
        assert var4 is not None
        var5 = var4.utcoffset(var3)
        assert var5 is not None
        var6 = None
        var7 = {}
        var8 = module0.tzUTC(**var7)
        assert var8 is not None
        var9 = var8.dst(var6)
        assert var9 is not None
        var10 = module0.tzUTC()
        assert var10 is not None
        var11 = var10.utcoffset(var3)
        assert var11 is not None
        var12 = -2019
        var13 = None
        var14 = [var13]
        var15 = module0.tzUTC(*var14)
        assert var15 is not None
        var16 = var15.dst(var12)
        assert var16 is not None
        var17 = {var16: var14, var16: var12}
        var18 = module0.utc_aware(var17)
        assert var18 is not None
        var19 = None
        var20 = module0.tzUTC()
        assert var20 is not None
        var21 = var20.utcoffset(var19)
        assert var21 is not None
        var22 = None
        var23 = var20.utcoffset(var22)
        assert var23 is not None
        var24 = module0.tzUTC()
        assert var24 is not None
        var25 = module0.isoformat(var24)
    except BaseException:
        pass


def test_case_165():
    try:
        var0 = b'J\xc2-p\xc7l\xa7\xcd\xa7 \xacM>\xbc\xbb'
        var1 = {}
        var2 = module0.tzUTC(**var1)
        assert var2 is not None
        var3 = var2.dst(var0)
        assert var3 is not None
        var4 = set()
        var5 = var2.dst(var4)
        assert var5 is not None
        var6 = -2019
        var7 = None
        var8 = [var7]
        var9 = module0.tzUTC(*var8)
        assert var9 is not None
        var10 = var9.dst(var6)
        assert var10 is not None
        var11 = module0.tzUTC()
        assert var11 is not None
        var12 = b'J\xc2-p\xc7l\xa7\xcd\xa7 \xacM>\xbc\xbb'
        var13 = {}
        var14 = module0.tzUTC(**var13)
        assert var14 is not None
        var15 = var14.dst(var12)
        assert var15 is not None
        var16 = module0.tzUTC()
        assert var16 is not None
        var17 = module0.tzUTC()
        assert var17 is not None
        var18 = var17.utcoffset(var16)
        assert var18 is not None
        var19 = module0.tzUTC()
        assert var19 is not None
        var20 = ()
        var21 = module0.tzUTC()
        assert var21 is not None
        var22 = [var21]
        var23 = module0.tzUTC(*var22)
        assert var23 is not None
        var24 = [var23]
        var25 = module0.tzUTC(*var24)
        assert var25 is not None
        var26 = var25.utcoffset(var20)
        assert var26 is not None
        var27 = module0.utc_method()
    except BaseException:
        pass


def test_case_166():
    try:
        var0 = None
        var1 = module0.tzUTC()
        assert var1 is not None
        var2 = var1.utcoffset(var0)
        assert var2 is not None
        var3 = None
        var4 = var1.utcoffset(var3)
        assert var4 is not None
        var5 = module0.tzUTC()
        assert var5 is not None
        var6 = module0.tzUTC()
        assert var6 is not None
        var7 = var6.utcoffset(var5)
        assert var7 is not None
        var8 = -1079.201
        var9 = {var5: var8}
        var10 = var5.dst(var9)
        assert var10 is not None
        var11 = -2019
        var12 = None
        var13 = [var12]
        var14 = module0.tzUTC(*var13)
        assert var14 is not None
        var15 = var14.dst(var11)
        assert var15 is not None
        var16 = module0.tzUTC()
        assert var16 is not None
        var17 = '5\x0cMtw@-H)M4(\tky/4q'
        var18 = var14.utcoffset(var17)
        assert var18 is not None
        var19 = module0.utc_method()
    except BaseException:
        pass


def test_case_167():
    try:
        var0 = module0.tzUTC()
        assert var0 is not None
        var1 = module0.tzUTC()
        assert var1 is not None
        var2 = var1.utcoffset(var0)
        assert var2 is not None
        var3 = -1079.201
        var4 = {var0: var3}
        var5 = var0.dst(var4)
        assert var5 is not None
        var6 = None
        var7 = module0.tzUTC()
        assert var7 is not None
        var8 = var7.utcoffset(var6)
        assert var8 is not None
        var9 = module0.tzUTC()
        assert var9 is not None
        var10 = 2994
        var11 = module0.utc_aware(var10)
        assert var11 is not None
        var12 = None
        var13 = module0.tzUTC()
        assert var13 is not None
        var14 = var13.utcoffset(var12)
        assert var14 is not None
        var15 = None
        var16 = var13.utcoffset(var15)
        assert var16 is not None
        var17 = module0.utc_aware(var15)
        assert var17 is not None
        var18 = 2074
        var19 = module0.tzUTC()
        assert var19 is not None
        var20 = var19.utcoffset(var18)
        assert var20 is not None
        var21 = b'J\xc2-p\xc7l\xa7\xcd\xa7 \xacM>\xbc\xbb'
        var22 = {}
        var23 = module0.tzUTC(**var22)
        assert var23 is not None
        var24 = var23.dst(var21)
        assert var24 is not None
        var25 = module0.tzUTC()
        assert var25 is not None
        var26 = -2019
        var27 = None
        var28 = [var27]
        var29 = module0.tzUTC(*var28)
        assert var29 is not None
        var30 = var29.dst(var26)
        assert var30 is not None
        var31 = None
        var32 = module0.utc_aware(var31)
        assert var32 is not None
        var33 = module0.utc_method()
    except BaseException:
        pass


def test_case_168():
    try:
        var0 = 2074
        var1 = module0.tzUTC()
        assert var1 is not None
        var2 = var1.utcoffset(var0)
        assert var2 is not None
        var3 = True
        var4 = {var3: var3, var3: var3, var3: var3, var3: var3}
        var5 = module0.tzUTC()
        assert var5 is not None
        var6 = var5.utcoffset(var4)
        assert var6 is not None
        var7 = 2994
        var8 = module0.utc_aware(var7)
        assert var8 is not None
        var9 = None
        var10 = var5.dst(var9)
        assert var10 is not None
        var11 = b'\x0b@\xa8\x92\x18\xf75~y\xb6\xfbJ\x81\t'
        var12 = module0.utc_aware(var11)
        assert var12 is not None
        var13 = True
        var14 = {var13: var13, var13: var13, var13: var13, var13: var13}
        var15 = module0.tzUTC()
        assert var15 is not None
        var16 = var15.utcoffset(var14)
        assert var16 is not None
        var17 = None
        var18 = var17,
        var19 = module0.tzUTC()
        assert var19 is not None
        var20 = var19.dst(var18)
        assert var20 is not None
        var21 = 0.8
        var22 = module0.tzUTC()
        assert var22 is not None
        var23 = var22.utcoffset(var21)
        assert var23 is not None
        var24 = None
        var25 = {}
        var26 = module0.tzUTC(**var25)
        assert var26 is not None
        var27 = var26.dst(var24)
        assert var27 is not None
        var28 = None
        var29 = module0.tzUTC()
        assert var29 is not None
        var30 = var29.utcoffset(var28)
        assert var30 is not None
        var31 = None
        var32 = {}
        var33 = module0.tzUTC(**var32)
        assert var33 is not None
        var34 = var33.dst(var31)
        assert var34 is not None
        var35 = module0.tzUTC()
        assert var35 is not None
        var36 = var35.utcoffset(var28)
        assert var36 is not None
        var37 = True
        var38 = {var37: var37, var37: var37, var37: var37, var37: var37}
        var39 = module0.tzUTC()
        assert var39 is not None
        var40 = var39.utcoffset(var38)
        assert var40 is not None
        var41 = set()
        var42 = module0.isoformat(var41)
    except BaseException:
        pass


def test_case_169():
    try:
        var0 = -2019
        var1 = None
        var2 = [var1]
        var3 = module0.tzUTC(*var2)
        assert var3 is not None
        var4 = var3.dst(var0)
        assert var4 is not None
        var5 = module0.tzUTC()
        assert var5 is not None
        var6 = b'J\xc2-p\xc7l\xa7\xcd\xa7 \xacM>\xbc\xbb'
        var7 = {}
        var8 = module0.tzUTC(**var7)
        assert var8 is not None
        var9 = var8.dst(var6)
        assert var9 is not None
        var10 = b'J\xc2-p\xc7l\xa7\xcd\xa7 \xacM>\xbc\xbb'
        var11 = {}
        var12 = module0.tzUTC(**var11)
        assert var12 is not None
        var13 = var12.dst(var10)
        assert var13 is not None
        var14 = set()
        var15 = var12.dst(var14)
        assert var15 is not None
        var16 = -416
        var17 = {var16, var16}
        var18 = [var17, var16]
        var19 = b'7\r\xbf\xc5\x83P\xd2\x1fZ8\x1e\xf8 \xb1@\xe4kg'
        var20 = [var19, var19, var19]
        var21 = module0.tzUTC(*var20)
        assert var21 is not None
        var22 = var21.dst(var18)
        assert var22 is not None
        var23 = -2060.41
        var24 = var21.utcoffset(var23)
        assert var24 is not None
        var25 = b'\x0b@\xa8\x92\x18\xf75~y\xb6\xfbJ\x81\t'
        var26 = module0.utc_aware(var25)
        assert var26 is not None
        var27 = 2074
        var28 = module0.tzUTC()
        assert var28 is not None
        var29 = var28.utcoffset(var27)
        assert var29 is not None
        var30 = module0.utc_method()
    except BaseException:
        pass


def test_case_170():
    try:
        var0 = -575
        var1 = module0.utc_aware(var0)
        assert var1 is not None
        var2 = True
        var3 = {var2: var2, var2: var2, var2: var2, var2: var2}
        var4 = module0.tzUTC()
        assert var4 is not None
        var5 = var4.utcoffset(var3)
        assert var5 is not None
        var6 = 2994
        var7 = module0.utc_aware(var6)
        assert var7 is not None
        var8 = None
        var9 = var4.dst(var8)
        assert var9 is not None
        var10 = ()
        var11 = module0.tzUTC()
        assert var11 is not None
        var12 = [var11]
        var13 = module0.tzUTC(*var12)
        assert var13 is not None
        var14 = [var13]
        var15 = module0.tzUTC(*var14)
        assert var15 is not None
        var16 = var15.utcoffset(var10)
        assert var16 is not None
        var17 = module0.tzUTC()
        assert var17 is not None
        var18 = b'\x0b@\xa8\x92\x18\xf75~y\xb6\xfbJ\x81\t'
        var19 = module0.utc_aware(var18)
        assert var19 is not None
        var20 = -1473.5683
        var21 = module0.utc_aware(var20)
        assert var21 is not None
        var22 = None
        var23 = module0.tzUTC()
        assert var23 is not None
        var24 = var23.utcoffset(var22)
        assert var24 is not None
        var25 = None
        var26 = var23.utcoffset(var25)
        assert var26 is not None
        var27 = module0.utc_aware(var25)
        assert var27 is not None
        var28 = module0.tzUTC()
        assert var28 is not None
        var29 = None
        var30 = {}
        var31 = module0.tzUTC(**var30)
        assert var31 is not None
        var32 = var31.dst(var29)
        assert var32 is not None
        var33 = [var29, var30, var32]
        var34 = module0.tzUTC(*var33)
        assert var34 is not None
        var35 = True
        var36 = {var35: var35, var35: var35, var35: var35, var35: var35}
        var37 = module0.tzUTC()
        assert var37 is not None
        var38 = var37.utcoffset(var36)
        assert var38 is not None
        var39 = None
        var40 = var39,
        var41 = module0.tzUTC()
        assert var41 is not None
        var42 = var41.dst(var40)
        assert var42 is not None
        var43 = module0.isoformat(var37)
    except BaseException:
        pass


def test_case_171():
    try:
        var0 = None
        var1 = module0.tzUTC()
        assert var1 is not None
        var2 = var1.utcoffset(var0)
        assert var2 is not None
        var3 = -575
        var4 = module0.utc_aware(var3)
        assert var4 is not None
        var5 = 'B*:(S=T7\t]!;+~hHz'
        var6 = module0.tzUTC()
        assert var6 is not None
        var7 = var6.utcoffset(var5)
        assert var7 is not None
        var8 = 0.8
        var9 = {var8: var8, var8: var8, var8: var8, var8: var8}
        var10 = module0.tzUTC()
        assert var10 is not None
        var11 = var10.utcoffset(var9)
        assert var11 is not None
        var12 = module0.tzUTC()
        assert var12 is not None
        var13 = module0.utc_method()
    except BaseException:
        pass


def test_case_172():
    try:
        var0 = module0.tzUTC()
        assert var0 is not None
        var1 = None
        var2 = {}
        var3 = module0.tzUTC(**var2)
        assert var3 is not None
        var4 = var3.dst(var1)
        assert var4 is not None
        var5 = [var1, var2, var4]
        var6 = module0.tzUTC(*var5)
        assert var6 is not None
        var7 = module0.tzUTC()
        assert var7 is not None
        var8 = None
        var9 = {}
        var10 = module0.tzUTC(**var9)
        assert var10 is not None
        var11 = var10.dst(var8)
        assert var11 is not None
        var12 = module0.utc_method()
    except BaseException:
        pass


def test_case_173():
    try:
        var0 = None
        var1 = module0.tzUTC()
        assert var1 is not None
        var2 = var1.utcoffset(var0)
        assert var2 is not None
        var3 = None
        var4 = {}
        var5 = module0.tzUTC(**var4)
        assert var5 is not None
        var6 = var5.dst(var3)
        assert var6 is not None
        var7 = module0.tzUTC()
        assert var7 is not None
        var8 = var7.utcoffset(var0)
        assert var8 is not None
        var9 = -575
        var10 = module0.utc_aware(var9)
        assert var10 is not None
        var11 = module0.tzUTC()
        assert var11 is not None
        var12 = -2019
        var13 = None
        var14 = [var13]
        var15 = module0.tzUTC(*var14)
        assert var15 is not None
        var16 = var15.dst(var12)
        assert var16 is not None
        var17 = None
        var18 = module0.utc_aware(var17)
        assert var18 is not None
        var19 = -2019
        var20 = None
        var21 = [var20]
        var22 = module0.tzUTC(*var21)
        assert var22 is not None
        var23 = var22.dst(var19)
        assert var23 is not None
        var24 = module0.tzUTC()
        assert var24 is not None
        var25 = False
        var26 = var24.dst(var25)
        assert var26 is not None
        var27 = -575
        var28 = module0.utc_aware(var27)
        assert var28 is not None
        var29 = 'B*:(S=T7\t]!;+~hHz'
        var30 = module0.tzUTC()
        assert var30 is not None
        var31 = var30.utcoffset(var29)
        assert var31 is not None
        var32 = None
        var33 = module0.tzUTC()
        assert var33 is not None
        var34 = var33.utcoffset(var32)
        assert var34 is not None
        var35 = None
        var36 = var33.utcoffset(var35)
        assert var36 is not None
        var37 = module0.tzUTC()
        assert var37 is not None
        var38 = module0.tzUTC()
        assert var38 is not None
        var39 = var38.utcoffset(var37)
        assert var39 is not None
        var40 = -1079.201
        var41 = {var37: var40}
        var42 = var37.dst(var41)
        assert var42 is not None
        var43 = -416
        var44 = {var43, var43}
        var45 = [var44, var43]
        var46 = b'7\r\xbf\xc5\x83P\xd2\x1fZ8\x1e\xf8 \xb1@\xe4kg'
        var47 = [var46, var46, var46]
        var48 = module0.tzUTC(*var47)
        assert var48 is not None
        var49 = var48.dst(var45)
        assert var49 is not None
        var50 = None
        var51 = module0.tzUTC()
        assert var51 is not None
        var52 = var51.utcoffset(var50)
        assert var52 is not None
        var53 = module0.isoformat(var45)
    except BaseException:
        pass


def test_case_174():
    try:
        var0 = module0.tzUTC()
        assert var0 is not None
        var1 = None
        var2 = {}
        var3 = module0.tzUTC(**var2)
        assert var3 is not None
        var4 = var3.dst(var1)
        assert var4 is not None
        var5 = [var1, var2, var4]
        var6 = module0.tzUTC(*var5)
        assert var6 is not None
        var7 = -575
        var8 = module0.utc_aware(var7)
        assert var8 is not None
        var9 = None
        var10 = module0.tzUTC()
        assert var10 is not None
        var11 = var10.utcoffset(var9)
        assert var11 is not None
        var12 = None
        var13 = var10.utcoffset(var12)
        assert var13 is not None
        var14 = True
        var15 = {var14: var14, var14: var14, var14: var14, var14: var14}
        var16 = module0.tzUTC()
        assert var16 is not None
        var17 = var16.utcoffset(var15)
        assert var17 is not None
        var18 = None
        var19 = var18,
        var20 = module0.tzUTC()
        assert var20 is not None
        var21 = var20.dst(var19)
        assert var21 is not None
        var22 = var1.dst(var14)
    except BaseException:
        pass


def test_case_175():
    try:
        var0 = None
        var1 = module0.tzUTC()
        assert var1 is not None
        var2 = [var1, var1]
        var3 = ':):ijBSTBjV'
        var4 = {var3: var1, var3: var2}
        var5 = module0.tzUTC(*var2, **var4)
        assert var5 is not None
        var6 = var5.utcoffset(var0)
        assert var6 is not None
        var7 = module0.tzUTC()
        assert var7 is not None
        var8 = None
        var9 = {}
        var10 = module0.tzUTC(**var9)
        assert var10 is not None
        var11 = var10.dst(var8)
        assert var11 is not None
        var12 = [var8, var9, var11]
        var13 = module0.tzUTC(*var12)
        assert var13 is not None
        var14 = None
        var15 = var13.dst(var14)
        assert var15 is not None
        var16 = b'\x0b@\xa8\x92\x18\xf75~y\xb6\xfbJ\x81\t'
        var17 = module0.utc_aware(var16)
        assert var17 is not None
        var18 = -1473.5683
        var19 = module0.utc_aware(var18)
        assert var19 is not None
        var20 = module0.tzUTC()
        assert var20 is not None
        var21 = module0.tzUTC()
        assert var21 is not None
        var22 = var21.utcoffset(var20)
        assert var22 is not None
        var23 = 2445
        var24 = var21.utcoffset(var23)
        assert var24 is not None
        var25 = None
        var26 = {var25, var2}
    except BaseException:
        pass


def test_case_176():
    try:
        var0 = -2019
        var1 = None
        var2 = [var1]
        var3 = module0.tzUTC(*var2)
        assert var3 is not None
        var4 = var3.dst(var0)
        assert var4 is not None
        var5 = module0.tzUTC()
        assert var5 is not None
        var6 = 0.8
        var7 = module0.tzUTC()
        assert var7 is not None
        var8 = var7.utcoffset(var6)
        assert var8 is not None
        var9 = b'7\x9d\xccV\x1e5\xd0a\xb6\xc8\x02\xb6'
        var10 = var7.utcoffset(var9)
        assert var10 is not None
        var11 = None
        var12 = module0.tzUTC()
        assert var12 is not None
        var13 = var12.utcoffset(var11)
        assert var13 is not None
        var14 = None
        var15 = {}
        var16 = module0.tzUTC(**var15)
        assert var16 is not None
        var17 = var16.dst(var14)
        assert var17 is not None
        var18 = module0.tzUTC()
        assert var18 is not None
        var19 = var18.utcoffset(var11)
        assert var19 is not None
        var20 = module0.tzUTC()
        assert var20 is not None
        var21 = -2019
        var22 = None
        var23 = [var22]
        var24 = module0.tzUTC(*var23)
        assert var24 is not None
        var25 = var24.dst(var21)
        assert var25 is not None
        var26 = None
        var27 = module0.utc_aware(var26)
        assert var27 is not None
        var28 = None
        var29 = module0.tzUTC()
        assert var29 is not None
        var30 = var29.utcoffset(var28)
        assert var30 is not None
        var31 = None
        var32 = var29.utcoffset(var31)
        assert var32 is not None
        var33 = module0.tzUTC()
        assert var33 is not None
        var34 = -2019
        var35 = None
        var36 = [var35]
        var37 = module0.tzUTC(*var36)
        assert var37 is not None
        var38 = var37.dst(var34)
        assert var38 is not None
        var39 = module0.tzUTC()
        assert var39 is not None
        var40 = {var38, var39}
        var41 = module0.utc_aware(var40)
        assert var41 is not None
        var42 = module0.tzUTC()
        assert var42 is not None
        var43 = None
        var44 = {}
        var45 = module0.tzUTC(**var44)
        assert var45 is not None
        var46 = var45.dst(var43)
        assert var46 is not None
        var47 = [var43, var44, var46]
        var48 = module0.tzUTC(*var47)
        assert var48 is not None
        var49 = None
        var50 = var48.dst(var49)
        assert var50 is not None
        var51 = module0.utc_method()
    except BaseException:
        pass


def test_case_177():
    try:
        var0 = b'\x191\\\x82~.\x18\xaf\x95\xc6\xaf'
        var1 = [var0, var0, var0]
        var2 = module0.tzUTC(*var1)
        assert var2 is not None
        var3 = '%s not found'
        var4 = {var3: var3, var3: var3, var3: var3}
        var5 = module0.tzUTC(**var4)
        assert var5 is not None
        var6 = var5.dst(var2)
        assert var6 is not None
        var7 = module0.utc_method()
    except BaseException:
        pass


def test_case_178():
    try:
        var0 = True
        var1 = {var0: var0, var0: var0, var0: var0, var0: var0}
        var2 = module0.tzUTC()
        assert var2 is not None
        var3 = var2.utcoffset(var1)
        assert var3 is not None
        var4 = 2994
        var5 = module0.utc_aware(var4)
        assert var5 is not None
        var6 = None
        var7 = var2.dst(var6)
        assert var7 is not None
        var8 = None
        var9 = module0.tzUTC()
        assert var9 is not None
        var10 = var9.utcoffset(var8)
        assert var10 is not None
        var11 = None
        var12 = var9.utcoffset(var11)
        assert var12 is not None
        var13 = module0.utc_aware(var11)
        assert var13 is not None
        var14 = -2019
        var15 = None
        var16 = [var15]
        var17 = module0.tzUTC(*var16)
        assert var17 is not None
        var18 = var17.dst(var14)
        assert var18 is not None
        var19 = module0.tzUTC()
        assert var19 is not None
        var20 = True
        var21 = {var20: var20, var20: var20, var20: var20, var20: var20}
        var22 = module0.tzUTC()
        assert var22 is not None
        var23 = var22.utcoffset(var21)
        assert var23 is not None
        var24 = None
        var25 = var24,
        var26 = module0.tzUTC()
        assert var26 is not None
        var27 = var26.dst(var25)
        assert var27 is not None
        var28 = -575
        var29 = module0.utc_aware(var28)
        assert var29 is not None
        var30 = '\x0ckn;5G.5(\r\ne(9}FTAI'
        var31 = {var30: var1}
        var32 = module0.utc_method(**var31)
    except BaseException:
        pass


def test_case_179():
    try:
        var0 = b'\x0b@\xa8\x92\x18\xf75~y\xb6\xfbJ\x81\t'
        var1 = module0.utc_aware(var0)
        assert var1 is not None
        var2 = -1473.5683
        var3 = module0.utc_aware(var2)
        assert var3 is not None
        var4 = None
        var5 = module0.tzUTC()
        assert var5 is not None
        var6 = var5.utcoffset(var4)
        assert var6 is not None
        var7 = None
        var8 = var5.utcoffset(var7)
        assert var8 is not None
        var9 = -575
        var10 = module0.utc_aware(var9)
        assert var10 is not None
        var11 = 'B*:(S=T7\t]!;+~hHz'
        var12 = module0.tzUTC()
        assert var12 is not None
        var13 = var12.utcoffset(var11)
        assert var13 is not None
        var14 = -416
        var15 = {var14, var14}
        var16 = [var15, var14]
        var17 = b'7\r\xbf\xc5\x83P\xd2\x1fZ8\x1e\xf8 \xb1@\xe4kg'
        var18 = [var17, var17, var17]
        var19 = module0.tzUTC(*var18)
        assert var19 is not None
        var20 = var19.dst(var16)
        assert var20 is not None
        var21 = 0.8
        var22 = module0.tzUTC()
        assert var22 is not None
        var23 = var22.utcoffset(var21)
        assert var23 is not None
        var24 = b'7\x9d\xccV\x1e5\xd0a\xb6\xc8\x02\xb6'
        var25 = var22.utcoffset(var24)
        assert var25 is not None
        var26 = module0.tzUTC()
        assert var26 is not None
        var27 = module0.tzUTC()
        assert var27 is not None
        var28 = var27.utcoffset(var26)
        assert var28 is not None
        var29 = -1079.201
        var30 = {var26: var29}
        var31 = var26.dst(var30)
        assert var31 is not None
        var32 = 0.8
        var33 = {var32: var32, var32: var32, var32: var32, var32: var32}
        var34 = module0.tzUTC()
        assert var34 is not None
        var35 = var34.utcoffset(var33)
        assert var35 is not None
        var36 = '}UBL-2aJ%rPM7-f?'
        var37 = var36, var36
        var38 = module0.utc_aware(var37)
        assert var38 is not None
        var39 = b'J\xc2-p\xc7l\xa7\xcd\xa7 \xacM>\xbc\xbb'
        var40 = {}
        var41 = module0.tzUTC(**var40)
        assert var41 is not None
        var42 = var41.dst(var39)
        assert var42 is not None
        var43 = set()
        var44 = var41.dst(var43)
        assert var44 is not None
        var45 = '&,"|sSOV/De-j;@sQ#NF'
        var46 = {var11: var9, var45: var35, var36: var38}
        var47 = module0.utc_method(**var46)
    except BaseException:
        pass


def test_case_180():
    try:
        var0 = module0.tzUTC()
        assert var0 is not None
        var1 = 0.8
        var2 = module0.tzUTC()
        assert var2 is not None
        var3 = var2.utcoffset(var1)
        assert var3 is not None
        var4 = None
        var5 = module0.tzUTC()
        assert var5 is not None
        var6 = [var5, var5]
        var7 = ':):ijBSTBjV'
        var8 = {var7: var5, var7: var6}
        var9 = module0.tzUTC(*var6, **var8)
        assert var9 is not None
        var10 = var9.utcoffset(var4)
        assert var10 is not None
        var11 = b'J\xc2-p\xc7l\xa7\xcd\xa7 \xacM>\xbc\xbb'
        var12 = {}
        var13 = module0.tzUTC(**var12)
        assert var13 is not None
        var14 = var13.dst(var11)
        assert var14 is not None
        var15 = set()
        var16 = var13.dst(var15)
        assert var16 is not None
        var17 = None
        var18 = module0.tzUTC()
        assert var18 is not None
        var19 = var18.utcoffset(var17)
        assert var19 is not None
        var20 = None
        var21 = var18.utcoffset(var20)
        assert var21 is not None
        var22 = b'\x0b@\xa8\x92\x18\xf75~y\xb6\xfbJ\x81\t'
        var23 = module0.utc_aware(var22)
        assert var23 is not None
        var24 = -1473.5683
        var25 = module0.utc_aware(var24)
        assert var25 is not None
        var26 = ' ;bC"0-`5ZN'
        var27 = module0.tzUTC()
        assert var27 is not None
        var28 = var27.dst(var26)
        assert var28 is not None
        var29 = None
        var30 = module0.tzUTC()
        assert var30 is not None
        var31 = var30.utcoffset(var29)
        assert var31 is not None
        var32 = -575
        var33 = module0.utc_aware(var32)
        assert var33 is not None
        var34 = 'B*:(S=T7\t]!;+~hHz'
        var35 = module0.tzUTC()
        assert var35 is not None
        var36 = var35.utcoffset(var34)
        assert var36 is not None
        var37 = module0.tzUTC()
        assert var37 is not None
        var38 = module0.tzUTC()
        assert var38 is not None
        var39 = var38.utcoffset(var37)
        assert var39 is not None
        var40 = -1079.201
        var41 = {var37: var40}
        var42 = var37.dst(var41)
        assert var42 is not None
        var43 = ()
        var44 = module0.tzUTC()
        assert var44 is not None
        var45 = [var44]
        var46 = module0.tzUTC(*var45)
        assert var46 is not None
        var47 = [var46]
        var48 = module0.tzUTC(*var47)
        assert var48 is not None
        var49 = var48.utcoffset(var43)
        assert var49 is not None
        var50 = module0.utc_method()
    except BaseException:
        pass


def test_case_181():
    try:
        var0 = module0.tzUTC()
        assert var0 is not None
        var1 = None
        var2 = {}
        var3 = module0.tzUTC(**var2)
        assert var3 is not None
        var4 = var3.dst(var1)
        assert var4 is not None
        var5 = [var1, var2, var4]
        var6 = module0.tzUTC(*var5)
        assert var6 is not None
        var7 = -416
        var8 = {var7, var7}
        var9 = [var8, var7]
        var10 = b'7\r\xbf\xc5\x83P\xd2\x1fZ8\x1e\xf8 \xb1@\xe4kg'
        var11 = [var10, var10, var10]
        var12 = module0.tzUTC(*var11)
        assert var12 is not None
        var13 = var12.dst(var9)
        assert var13 is not None
        var14 = 2994
        var15 = module0.utc_aware(var14)
        assert var15 is not None
        var16 = b'\x0b@\xa8\x92\x18\xf75~y\xb6\xfbJ\x81\t'
        var17 = module0.utc_aware(var16)
        assert var17 is not None
        var18 = -1473.5683
        var19 = module0.utc_aware(var18)
        assert var19 is not None
        var20 = b'\x0b@\xa8\x92\x18\xf75~y\xb6\xfbJ\x81\t'
        var21 = module0.utc_aware(var20)
        assert var21 is not None
        var22 = -1473.5683
        var23 = module0.utc_aware(var22)
        assert var23 is not None
        var24 = ' ;bC"0-`5ZN'
        var25 = module0.tzUTC()
        assert var25 is not None
        var26 = var25.dst(var24)
        assert var26 is not None
        var27 = b'\x0b@\xa8\x92\x18\xf75~y\xb6\xfbJ\x81\t'
        var28 = module0.utc_aware(var27)
        assert var28 is not None
        var29 = '}UBL-2aJ%rPM7-f?'
        var30 = var29, var29
        var31 = module0.utc_aware(var30)
        assert var31 is not None
        var32 = True
        var33 = {var32: var32, var32: var32, var32: var32, var32: var32}
        var34 = module0.tzUTC()
        assert var34 is not None
        var35 = var34.utcoffset(var33)
        assert var35 is not None
        var36 = None
        var37 = var36,
        var38 = module0.tzUTC()
        assert var38 is not None
        var39 = var38.dst(var37)
        assert var39 is not None
        var40 = module0.tzUTC()
        assert var40 is not None
        var41 = -2019
        var42 = None
        var43 = [var42]
        var44 = module0.tzUTC(*var43)
        assert var44 is not None
        var45 = var44.dst(var41)
        assert var45 is not None
        var46 = module0.tzUTC()
        assert var46 is not None
        var47 = {var45, var46}
        var48 = module0.utc_aware(var47)
        assert var48 is not None
        var49 = module0.utc_method()
    except BaseException:
        pass


def test_case_182():
    try:
        var0 = module0.tzUTC()
        assert var0 is not None
        var1 = -2019
        var2 = None
        var3 = [var2]
        var4 = module0.tzUTC(*var3)
        assert var4 is not None
        var5 = var4.dst(var1)
        assert var5 is not None
        var6 = None
        var7 = module0.utc_aware(var6)
        assert var7 is not None
        var8 = -2019
        var9 = None
        var10 = [var9]
        var11 = module0.tzUTC(*var10)
        assert var11 is not None
        var12 = var11.dst(var8)
        assert var12 is not None
        var13 = {var12: var10, var12: var8}
        var14 = module0.utc_aware(var13)
        assert var14 is not None
        var15 = module0.tzUTC()
        assert var15 is not None
        var16 = module0.tzUTC()
        assert var16 is not None
        var17 = -575
        var18 = module0.utc_aware(var17)
        assert var18 is not None
        var19 = module0.tzUTC()
        assert var19 is not None
        var20 = module0.tzUTC()
        assert var20 is not None
        var21 = var20.utcoffset(var19)
        assert var21 is not None
        var22 = -1079.201
        var23 = {var19: var22}
        var24 = var19.dst(var23)
        assert var24 is not None
        var25 = None
        var26 = module0.tzUTC()
        assert var26 is not None
        var27 = var26.utcoffset(var25)
        assert var27 is not None
        var28 = None
        var29 = var26.utcoffset(var28)
        assert var29 is not None
        var30 = module0.utc_aware(var28)
        assert var30 is not None
        var31 = module0.tzUTC()
        assert var31 is not None
        var32 = None
        var33 = {}
        var34 = module0.tzUTC(**var33)
        assert var34 is not None
        var35 = var34.dst(var32)
        assert var35 is not None
        var36 = [var32, var33, var35]
        var37 = module0.tzUTC(*var36)
        assert var37 is not None
        var38 = None
        var39 = module0.tzUTC()
        assert var39 is not None
        var40 = var39.utcoffset(var38)
        assert var40 is not None
        var41 = module0.tzUTC()
        assert var41 is not None
        var42 = None
        var43 = {}
        var44 = module0.tzUTC(**var43)
        assert var44 is not None
        var45 = var44.dst(var42)
        assert var45 is not None
        var46 = [var42, var43, var45]
        var47 = module0.tzUTC(*var46)
        assert var47 is not None
        var48 = None
        var49 = var47.dst(var48)
        assert var49 is not None
        var50 = False
        var51 = module0.isoformat(var50)
    except BaseException:
        pass


def test_case_183():
    try:
        var0 = True
        var1 = {var0: var0, var0: var0, var0: var0, var0: var0}
        var2 = module0.tzUTC()
        assert var2 is not None
        var3 = var2.utcoffset(var1)
        assert var3 is not None
        var4 = None
        var5 = var4,
        var6 = module0.tzUTC()
        assert var6 is not None
        var7 = var6.dst(var5)
        assert var7 is not None
        var8 = module0.tzUTC()
        assert var8 is not None
        var9 = None
        var10 = {}
        var11 = module0.tzUTC(**var10)
        assert var11 is not None
        var12 = var11.dst(var9)
        assert var12 is not None
        var13 = [var9, var10, var12]
        var14 = module0.tzUTC(*var13)
        assert var14 is not None
        var15 = None
        var16 = var14.dst(var15)
        assert var16 is not None
        var17 = module0.tzUTC()
        assert var17 is not None
        var18 = -2019
        var19 = None
        var20 = [var19]
        var21 = module0.tzUTC(*var20)
        assert var21 is not None
        var22 = var21.dst(var18)
        assert var22 is not None
        var23 = None
        var24 = module0.utc_aware(var23)
        assert var24 is not None
        var25 = ()
        var26 = module0.tzUTC()
        assert var26 is not None
        var27 = [var26]
        var28 = module0.tzUTC(*var27)
        assert var28 is not None
        var29 = [var28]
        var30 = module0.tzUTC(*var29)
        assert var30 is not None
        var31 = var30.utcoffset(var25)
        assert var31 is not None
        var32 = -575
        var33 = module0.utc_aware(var32)
        assert var33 is not None
        var34 = 'B*:(S=T7\t]!;+~hHz'
        var35 = module0.tzUTC()
        assert var35 is not None
        var36 = var35.utcoffset(var34)
        assert var36 is not None
        var37 = None
        var38 = module0.tzUTC()
        assert var38 is not None
        var39 = var38.utcoffset(var37)
        assert var39 is not None
        var40 = None
        var41 = var38.utcoffset(var40)
        assert var41 is not None
        var42 = 2994
        var43 = module0.utc_aware(var42)
        assert var43 is not None
        var44 = b'\x191\\\x82~.\x18\xaf\x95\xc6\xaf'
        var45 = [var44, var44, var44]
        var46 = module0.tzUTC(*var45)
        assert var46 is not None
        var47 = '%s not found'
        var48 = {var47: var47, var47: var47, var47: var47}
        var49 = module0.tzUTC(**var48)
        assert var49 is not None
        var50 = var49.dst(var46)
        assert var50 is not None
        var51 = -2019
        var52 = None
        var53 = [var52]
        var54 = module0.tzUTC(*var53)
        assert var54 is not None
        var55 = var54.dst(var51)
        assert var55 is not None
        var56 = {var55: var53, var55: var51}
        var57 = module0.utc_aware(var56)
        assert var57 is not None
        var58 = module0.tzUTC()
        assert var58 is not None
        var59 = b'J\xc2-p\xc7l\xa7\xcd\xa7 \xacM>\xbc\xbb'
        var60 = {}
        var61 = module0.tzUTC(**var60)
        assert var61 is not None
        var62 = var61.dst(var59)
        assert var62 is not None
        var63 = module0.utc_method()
    except BaseException:
        pass


def test_case_184():
    try:
        var0 = 0.8
        var1 = {var0: var0, var0: var0, var0: var0, var0: var0}
        var2 = module0.tzUTC()
        assert var2 is not None
        var3 = var2.utcoffset(var1)
        assert var3 is not None
        var4 = module0.tzUTC()
        assert var4 is not None
        var5 = module0.tzUTC()
        assert var5 is not None
        var6 = var5.utcoffset(var4)
        assert var6 is not None
        var7 = 2074
        var8 = module0.tzUTC()
        assert var8 is not None
        var9 = var8.utcoffset(var7)
        assert var9 is not None
        var10 = -2019
        var11 = None
        var12 = [var11]
        var13 = module0.tzUTC(*var12)
        assert var13 is not None
        var14 = var13.dst(var10)
        assert var14 is not None
        var15 = module0.tzUTC()
        assert var15 is not None
        var16 = '5\x0cMtw@-H)M4(\tky/4q'
        var17 = var13.utcoffset(var16)
        assert var17 is not None
        var18 = -2019
        var19 = None
        var20 = [var19]
        var21 = module0.tzUTC(*var20)
        assert var21 is not None
        var22 = var21.dst(var18)
        assert var22 is not None
        var23 = module0.tzUTC()
        assert var23 is not None
        var24 = -416
        var25 = {var24, var24}
        var26 = [var25, var24]
        var27 = b'7\r\xbf\xc5\x83P\xd2\x1fZ8\x1e\xf8 \xb1@\xe4kg'
        var28 = [var27, var27, var27]
        var29 = module0.tzUTC(*var28)
        assert var29 is not None
        var30 = var29.dst(var26)
        assert var30 is not None
        var31 = -2060.41
        var32 = var29.utcoffset(var31)
        assert var32 is not None
        var33 = module0.isoformat(var26)
    except BaseException:
        pass


def test_case_185():
    try:
        var0 = None
        var1 = module0.tzUTC()
        assert var1 is not None
        var2 = var1.utcoffset(var0)
        assert var2 is not None
        var3 = None
        var4 = var1.utcoffset(var3)
        assert var4 is not None
        var5 = '>sm#tt]j'
        var6 = module0.isoformat(var5)
    except BaseException:
        pass


def test_case_186():
    try:
        var0 = module0.tzUTC()
        assert var0 is not None
        var1 = None
        var2 = {}
        var3 = module0.tzUTC(**var2)
        assert var3 is not None
        var4 = var3.dst(var1)
        assert var4 is not None
        var5 = [var1, var2, var4]
        var6 = module0.tzUTC(*var5)
        assert var6 is not None
        var7 = None
        var8 = var6.dst(var7)
        assert var8 is not None
        var9 = None
        var10 = module0.tzUTC()
        assert var10 is not None
        var11 = var10.utcoffset(var9)
        assert var11 is not None
        var12 = None
        var13 = {}
        var14 = module0.tzUTC(**var13)
        assert var14 is not None
        var15 = var14.dst(var12)
        assert var15 is not None
        var16 = module0.tzUTC()
        assert var16 is not None
        var17 = var16.utcoffset(var9)
        assert var17 is not None
        var18 = module0.tzUTC()
        assert var18 is not None
        var19 = None
        var20 = {}
        var21 = module0.tzUTC(**var20)
        assert var21 is not None
        var22 = var21.dst(var19)
        assert var22 is not None
        var23 = [var19, var20, var22]
        var24 = module0.tzUTC(*var23)
        assert var24 is not None
        var25 = -575
        var26 = module0.utc_aware(var25)
        assert var26 is not None
        var27 = -2019
        var28 = None
        var29 = [var28]
        var30 = module0.tzUTC(*var29)
        assert var30 is not None
        var31 = var30.dst(var27)
        assert var31 is not None
        var32 = {var31: var29, var31: var27}
        var33 = module0.utc_aware(var32)
        assert var33 is not None
        var34 = module0.tzUTC()
        assert var34 is not None
        var35 = module0.tzUTC()
        assert var35 is not None
        var36 = module0.tzUTC()
        assert var36 is not None
        var37 = -2019
        var38 = None
        var39 = [var38]
        var40 = module0.tzUTC(*var39)
        assert var40 is not None
        var41 = var40.dst(var37)
        assert var41 is not None
        var42 = None
        var43 = module0.utc_aware(var42)
        assert var43 is not None
        var44 = module0.tzUTC()
        assert var44 is not None
        var45 = module0.tzUTC()
        assert var45 is not None
        var46 = var45.utcoffset(var44)
        assert var46 is not None
        var47 = -1079.201
        var48 = {var44: var47}
        var49 = var44.dst(var48)
        assert var49 is not None
        var50 = {var20, var11, var16}
    except BaseException:
        pass


def test_case_187():
    try:
        var0 = module0.tzUTC()
        assert var0 is not None
        var1 = {var0: var0, var0: var0}
        var2 = b'\t\x1c\xb3\x9dc+-\t\xbc\xc7'
        var3 = var1, var2
        var4 = {var3, var1}
    except BaseException:
        pass


def test_case_188():
    try:
        var0 = b'B\x16\xbd\xf58\x046\x9b\x8d\xcf\xd7G\xa7\xac9\tz'
        var1 = module0.isoformat(var0)
    except BaseException:
        pass


def test_case_189():
    try:
        var0 = -575
        var1 = module0.utc_aware(var0)
        assert var1 is not None
        var2 = True
        var3 = {var2: var2, var2: var2, var2: var2, var2: var2}
        var4 = module0.tzUTC()
        assert var4 is not None
        var5 = var4.utcoffset(var3)
        assert var5 is not None
        var6 = 2994
        var7 = module0.utc_aware(var6)
        assert var7 is not None
        var8 = None
        var9 = var4.dst(var8)
        assert var9 is not None
        var10 = b'\x0b@\xa8\x92\x18\xf75~y\xb6\xfbJ\x81\t'
        var11 = module0.utc_aware(var10)
        assert var11 is not None
        var12 = -1473.5683
        var13 = module0.utc_aware(var12)
        assert var13 is not None
        var14 = ' ;bC"0-`5ZN'
        var15 = module0.tzUTC()
        assert var15 is not None
        var16 = var15.dst(var14)
        assert var16 is not None
        var17 = module0.utc_method()
    except BaseException:
        pass


def test_case_190():
    try:
        var0 = module0.tzUTC()
        assert var0 is not None
        var1 = module0.tzUTC()
        assert var1 is not None
        var2 = var1.utcoffset(var0)
        assert var2 is not None
        var3 = -1079.201
        var4 = {var0: var3}
        var5 = var0.dst(var4)
        assert var5 is not None
        var6 = -2019
        var7 = None
        var8 = [var7]
        var9 = module0.tzUTC(*var8)
        assert var9 is not None
        var10 = var9.dst(var6)
        assert var10 is not None
        var11 = module0.tzUTC()
        assert var11 is not None
        var12 = False
        var13 = var11.dst(var12)
        assert var13 is not None
        var14 = module0.utc_method()
    except BaseException:
        pass


def test_case_191():
    try:
        var0 = module0.tzUTC()
        assert var0 is not None
        var1 = True
        var2 = {var1: var1, var1: var1, var1: var1, var1: var1}
        var3 = module0.tzUTC()
        assert var3 is not None
        var4 = var3.utcoffset(var2)
        assert var4 is not None
        var5 = 'p=YR#Un\x0bIQQ^h\t9{ns9'
        var6 = {var5: var0}
        var7 = module0.utc_method(**var6)
    except BaseException:
        pass


def test_case_192():
    try:
        var0 = module0.tzUTC()
        assert var0 is not None
        var1 = None
        var2 = {}
        var3 = module0.tzUTC(**var2)
        assert var3 is not None
        var4 = var3.dst(var1)
        assert var4 is not None
        var5 = [var1, var2, var4]
        var6 = module0.tzUTC(*var5)
        assert var6 is not None
        var7 = 0.8
        var8 = {var7: var7, var7: var7, var7: var7, var7: var7}
        var9 = module0.tzUTC()
        assert var9 is not None
        var10 = var9.utcoffset(var8)
        assert var10 is not None
        var11 = -2019
        var12 = None
        var13 = [var12]
        var14 = module0.tzUTC(*var13)
        assert var14 is not None
        var15 = var14.dst(var11)
        assert var15 is not None
        var16 = module0.tzUTC()
        assert var16 is not None
        var17 = False
        var18 = var16.dst(var17)
        assert var18 is not None
        var19 = b'J\xc2-p\xc7l\xa7\xcd\xa7 \xacM>\xbc\xbb'
        var20 = {}
        var21 = module0.tzUTC(**var20)
        assert var21 is not None
        var22 = var21.dst(var19)
        assert var22 is not None
        var23 = set()
        var24 = var21.dst(var23)
        assert var24 is not None
        var25 = module0.tzUTC()
        assert var25 is not None
        var26 = b'\x0b@\xa8\x92\x18\xf75~y\xb6\xfbJ\x81\t'
        var27 = module0.utc_aware(var26)
        assert var27 is not None
        var28 = -1473.5683
        var29 = module0.utc_aware(var28)
        assert var29 is not None
        var30 = ' ;bC"0-`5ZN'
        var31 = module0.tzUTC()
        assert var31 is not None
        var32 = var31.dst(var30)
        assert var32 is not None
        var33 = ()
        var34 = module0.isoformat(var33)
    except BaseException:
        pass


def test_case_193():
    try:
        var0 = module0.tzUTC()
        assert var0 is not None
        var1 = module0.tzUTC()
        assert var1 is not None
        var2 = -2019
        var3 = None
        var4 = [var3]
        var5 = module0.tzUTC(*var4)
        assert var5 is not None
        var6 = var5.dst(var2)
        assert var6 is not None
        var7 = None
        var8 = module0.utc_aware(var7)
        assert var8 is not None
        var9 = b'\x0b@\xa8\x92\x18\xf75~y\xb6\xfbJ\x81\t'
        var10 = module0.utc_aware(var9)
        assert var10 is not None
        var11 = -1473.5683
        var12 = module0.utc_aware(var11)
        assert var12 is not None
        var13 = module0.utc_method()
    except BaseException:
        pass


def test_case_194():
    try:
        var0 = module0.tzUTC()
        assert var0 is not None
        var1 = None
        var2 = {}
        var3 = module0.tzUTC(**var2)
        assert var3 is not None
        var4 = var3.dst(var1)
        assert var4 is not None
        var5 = [var1, var2, var4]
        var6 = module0.tzUTC(*var5)
        assert var6 is not None
        var7 = module0.tzUTC()
        assert var7 is not None
        var8 = None
        var9 = {}
        var10 = module0.tzUTC(**var9)
        assert var10 is not None
        var11 = var10.dst(var8)
        assert var11 is not None
        var12 = [var8, var9, var11]
        var13 = module0.tzUTC(*var12)
        assert var13 is not None
        var14 = None
        var15 = var13.dst(var14)
        assert var15 is not None
        var16 = None
        var17 = var8.dst(var16)
    except BaseException:
        pass


def test_case_195():
    try:
        var0 = None
        var1 = module0.tzUTC()
        assert var1 is not None
        var2 = [var1, var1]
        var3 = ':):ijBSTBjV'
        var4 = {var3: var1, var3: var2}
        var5 = module0.tzUTC(*var2, **var4)
        assert var5 is not None
        var6 = var5.utcoffset(var0)
        assert var6 is not None
        var7 = -2019
        var8 = None
        var9 = [var8]
        var10 = module0.tzUTC(*var9)
        assert var10 is not None
        var11 = var10.dst(var7)
        assert var11 is not None
        var12 = module0.tzUTC()
        assert var12 is not None
        var13 = 'Akbe`@a~EQ{/?mH@%'
        var14 = var10.dst(var13)
        assert var14 is not None
        var15 = 2074
        var16 = module0.tzUTC()
        assert var16 is not None
        var17 = var16.utcoffset(var15)
        assert var17 is not None
        var18 = -2019
        var19 = None
        var20 = [var19]
        var21 = module0.tzUTC(*var20)
        assert var21 is not None
        var22 = var21.dst(var18)
        assert var22 is not None
        var23 = module0.tzUTC()
        assert var23 is not None
        var24 = module0.tzUTC()
        assert var24 is not None
        var25 = var24.utcoffset(var23)
        assert var25 is not None
        var26 = -1079.201
        var27 = {var23: var26}
        var28 = var23.dst(var27)
        assert var28 is not None
        var29 = b'J\xc2-p\xc7l\xa7\xcd\xa7 \xacM>\xbc\xbb'
        var30 = {}
        var31 = module0.tzUTC(**var30)
        assert var31 is not None
        var32 = var31.dst(var29)
        assert var32 is not None
        var33 = set()
        var34 = var31.dst(var33)
        assert var34 is not None
        var35 = module0.tzUTC()
        assert var35 is not None
        var36 = 0.8
        var37 = {var36: var36, var36: var36, var36: var36, var36: var36}
        var38 = module0.tzUTC()
        assert var38 is not None
        var39 = var38.utcoffset(var37)
        assert var39 is not None
        var40 = module0.tzUTC()
        assert var40 is not None
        var41 = 0.8
        var42 = module0.tzUTC()
        assert var42 is not None
        var43 = var42.utcoffset(var41)
        assert var43 is not None
        var44 = b'7\x9d\xccV\x1e5\xd0a\xb6\xc8\x02\xb6'
        var45 = var42.utcoffset(var44)
        assert var45 is not None
        var46 = module0.utc_method()
    except BaseException:
        pass


def test_case_196():
    try:
        var0 = module0.tzUTC()
        assert var0 is not None
        var1 = b'\x191\\\x82~.\x18\xaf\x95\xc6\xaf'
        var2 = [var1, var1, var1]
        var3 = module0.tzUTC(*var2)
        assert var3 is not None
        var4 = '%s not found'
        var5 = {var4: var4, var4: var4, var4: var4}
        var6 = module0.tzUTC(**var5)
        assert var6 is not None
        var7 = var6.dst(var3)
        assert var7 is not None
        var8 = -416
        var9 = {var8, var8}
        var10 = [var9, var8]
        var11 = b'7\r\xbf\xc5\x83P\xd2\x1fZ8\x1e\xf8 \xb1@\xe4kg'
        var12 = [var11, var11, var11]
        var13 = module0.tzUTC(*var12)
        assert var13 is not None
        var14 = var13.dst(var10)
        assert var14 is not None
        var15 = -2060.41
        var16 = var13.utcoffset(var15)
        assert var16 is not None
        var17 = module0.utc_method(*var12)
    except BaseException:
        pass


def test_case_197():
    try:
        var0 = b'\x0b@\xa8\x92\x18\xf75~y\xb6\xfbJ\x81\t'
        var1 = module0.utc_aware(var0)
        assert var1 is not None
        var2 = module0.tzUTC()
        assert var2 is not None
        var3 = module0.tzUTC()
        assert var3 is not None
        var4 = var3.utcoffset(var2)
        assert var4 is not None
        var5 = -1079.201
        var6 = {var2: var5}
        var7 = var2.dst(var6)
        assert var7 is not None
        var8 = None
        var9 = module0.tzUTC()
        assert var9 is not None
        var10 = var9.utcoffset(var8)
        assert var10 is not None
        var11 = None
        var12 = var9.utcoffset(var11)
        assert var12 is not None
        var13 = module0.utc_aware(var11)
        assert var13 is not None
        var14 = b'\x0b@\xa8\x92\x18\xf75~y\xb6\xfbJ\x81\t'
        var15 = module0.utc_aware(var14)
        assert var15 is not None
        var16 = -1473.5683
        var17 = module0.utc_aware(var16)
        assert var17 is not None
        var18 = ' ;bC"0-`5ZN'
        var19 = module0.tzUTC()
        assert var19 is not None
        var20 = var19.dst(var18)
        assert var20 is not None
        var21 = b'J\xc2-p\xc7l\xa7\xcd\xa7 \xacM>\xbc\xbb'
        var22 = {}
        var23 = module0.tzUTC(**var22)
        assert var23 is not None
        var24 = var23.dst(var21)
        assert var24 is not None
        var25 = '}UBL-2aJ%rPM7-f?'
        var26 = var25, var25
        var27 = module0.utc_aware(var26)
        assert var27 is not None
        var28 = None
        var29 = module0.tzUTC()
        assert var29 is not None
        var30 = var29.utcoffset(var28)
        assert var30 is not None
        var31 = None
        var32 = var29.utcoffset(var31)
        assert var32 is not None
        var33 = module0.utc_aware(var31)
        assert var33 is not None
        var34 = var29.dst(var29)
        assert var34 is not None
        var35 = None
        var36 = module0.tzUTC()
        assert var36 is not None
        var37 = var36.utcoffset(var35)
        assert var37 is not None
        var38 = None
        var39 = {}
        var40 = module0.tzUTC(**var39)
        assert var40 is not None
        var41 = var40.dst(var38)
        assert var41 is not None
        var42 = module0.tzUTC()
        assert var42 is not None
        var43 = var42.utcoffset(var35)
        assert var43 is not None
        var44 = [var32, var43, var29, var29]
        var45 = module0.utc_method(*var44)
    except BaseException:
        pass


def test_case_198():
    try:
        var0 = -2019
        var1 = None
        var2 = [var1]
        var3 = module0.tzUTC(*var2)
        assert var3 is not None
        var4 = var3.dst(var0)
        assert var4 is not None
        var5 = module0.tzUTC()
        assert var5 is not None
        var6 = '5\x0cMtw@-H)M4(\tky/4q'
        var7 = var3.utcoffset(var6)
        assert var7 is not None
        var8 = 2074
        var9 = module0.tzUTC()
        assert var9 is not None
        var10 = var9.utcoffset(var8)
        assert var10 is not None
        var11 = None
        var12 = module0.tzUTC()
        assert var12 is not None
        var13 = [var12, var12]
        var14 = ':):ijBSTBjV'
        var15 = {var14: var12, var14: var13}
        var16 = module0.tzUTC(*var13, **var15)
        assert var16 is not None
        var17 = var16.utcoffset(var11)
        assert var17 is not None
        var18 = 'Xf^\nCnUL\ni(M 8+'
        var19 = module0.isoformat(var18)
    except BaseException:
        pass


def test_case_199():
    try:
        var0 = ()
        var1 = module0.tzUTC()
        assert var1 is not None
        var2 = [var1]
        var3 = module0.tzUTC(*var2)
        assert var3 is not None
        var4 = [var3]
        var5 = module0.tzUTC(*var4)
        assert var5 is not None
        var6 = var5.utcoffset(var0)
        assert var6 is not None
        var7 = -416
        var8 = {var7, var7}
        var9 = [var8, var7]
        var10 = b'7\r\xbf\xc5\x83P\xd2\x1fZ8\x1e\xf8 \xb1@\xe4kg'
        var11 = [var10, var10, var10]
        var12 = module0.tzUTC(*var11)
        assert var12 is not None
        var13 = var12.dst(var9)
        assert var13 is not None
        var14 = -2060.41
        var15 = var12.utcoffset(var14)
        assert var15 is not None
        var16 = b'J\xc2-p\xc7l\xa7\xcd\xa7 \xacM>\xbc\xbb'
        var17 = {}
        var18 = module0.tzUTC(**var17)
        assert var18 is not None
        var19 = var18.dst(var16)
        assert var19 is not None
        var20 = set()
        var21 = var18.dst(var20)
        assert var21 is not None
        var22 = [var2]
        var23 = module0.utc_method(*var22)
    except BaseException:
        pass


def test_case_200():
    try:
        var0 = -2019
        var1 = None
        var2 = [var1]
        var3 = module0.tzUTC(*var2)
        assert var3 is not None
        var4 = var3.dst(var0)
        assert var4 is not None
        var5 = module0.tzUTC()
        assert var5 is not None
        var6 = module0.tzUTC()
        assert var6 is not None
        var7 = b'\x191\\\x82~.\x18\xaf\x95\xc6\xaf'
        var8 = [var7, var7, var7]
        var9 = module0.tzUTC(*var8)
        assert var9 is not None
        var10 = '%s not found'
        var11 = {var10: var10, var10: var10, var10: var10}
        var12 = module0.tzUTC(**var11)
        assert var12 is not None
        var13 = var12.dst(var9)
        assert var13 is not None
        var14 = module0.utc_method()
    except BaseException:
        pass


def test_case_201():
    try:
        var0 = b'\x0b@\xa8\x92\x18\xf75~y\xb6\xfbJ\x81\t'
        var1 = module0.utc_aware(var0)
        assert var1 is not None
        var2 = -1473.5683
        var3 = module0.utc_aware(var2)
        assert var3 is not None
        var4 = module0.utc_method()
    except BaseException:
        pass


def test_case_202():
    try:
        var0 = True
        var1 = {var0: var0, var0: var0, var0: var0, var0: var0}
        var2 = module0.tzUTC()
        assert var2 is not None
        var3 = var2.utcoffset(var1)
        assert var3 is not None
        var4 = 0.8
        var5 = module0.tzUTC()
        assert var5 is not None
        var6 = var5.utcoffset(var4)
        assert var6 is not None
        var7 = module0.tzUTC()
        assert var7 is not None
        var8 = module0.tzUTC()
        assert var8 is not None
        var9 = var8.utcoffset(var7)
        assert var9 is not None
        var10 = -575
        var11 = module0.utc_aware(var10)
        assert var11 is not None
        var12 = 'B*:(S=T7\t]!;+~hHz'
        var13 = module0.tzUTC()
        assert var13 is not None
        var14 = var13.utcoffset(var12)
        assert var14 is not None
        var15 = b'J\xc2-p\xc7l\xa7\xcd\xa7 \xacM>\xbc\xbb'
        var16 = {}
        var17 = module0.tzUTC(**var16)
        assert var17 is not None
        var18 = var17.dst(var15)
        assert var18 is not None
        var19 = set()
        var20 = var17.dst(var19)
        assert var20 is not None
        var21 = module0.tzUTC()
        assert var21 is not None
        var22 = None
        var23 = {}
        var24 = module0.tzUTC(**var23)
        assert var24 is not None
        var25 = var24.dst(var22)
        assert var25 is not None
        var26 = [var22, var23, var25]
        var27 = module0.tzUTC(*var26)
        assert var27 is not None
        var28 = module0.utc_method()
    except BaseException:
        pass


def test_case_203():
    try:
        var0 = -416
        var1 = {var0, var0}
        var2 = [var1, var0]
        var3 = b'7\r\xbf\xc5\x83P\xd2\x1fZ8\x1e\xf8 \xb1@\xe4kg'
        var4 = [var3, var3, var3]
        var5 = module0.tzUTC(*var4)
        assert var5 is not None
        var6 = var5.dst(var2)
        assert var6 is not None
        var7 = -2060.41
        var8 = var5.utcoffset(var7)
        assert var8 is not None
        var9 = 0.8
        var10 = {var9: var9, var9: var9, var9: var9, var9: var9}
        var11 = module0.tzUTC()
        assert var11 is not None
        var12 = var11.utcoffset(var10)
        assert var12 is not None
        var13 = module0.tzUTC()
        assert var13 is not None
        var14 = module0.tzUTC()
        assert var14 is not None
        var15 = module0.tzUTC()
        assert var15 is not None
        var16 = var15.utcoffset(var14)
        assert var16 is not None
        var17 = -2019
        var18 = None
        var19 = [var18]
        var20 = module0.tzUTC(*var19)
        assert var20 is not None
        var21 = var20.dst(var17)
        assert var21 is not None
        var22 = {var21: var19, var21: var17}
        var23 = module0.utc_aware(var22)
        assert var23 is not None
        var24 = module0.tzUTC()
        assert var24 is not None
        var25 = module0.tzUTC()
        assert var25 is not None
        var26 = -416
        var27 = {var26, var26}
        var28 = [var27, var26]
        var29 = b'7\r\xbf\xc5\x83P\xd2\x1fZ8\x1e\xf8 \xb1@\xe4kg'
        var30 = [var29, var29, var29]
        var31 = module0.tzUTC(*var30)
        assert var31 is not None
        var32 = var31.dst(var28)
        assert var32 is not None
        var33 = -575
        var34 = module0.utc_aware(var33)
        assert var34 is not None
        var35 = module0.tzUTC()
        assert var35 is not None
        var36 = -2019
        var37 = None
        var38 = [var37]
        var39 = module0.tzUTC(*var38)
        assert var39 is not None
        var40 = var39.dst(var36)
        assert var40 is not None
        var41 = module0.tzUTC()
        assert var41 is not None
        var42 = {var40, var41}
        var43 = module0.utc_aware(var42)
        assert var43 is not None
        var44 = b'\x0b@\xa8\x92\x18\xf75~y\xb6\xfbJ\x81\t'
        var45 = module0.utc_aware(var44)
        assert var45 is not None
        var46 = -1473.5683
        var47 = module0.utc_aware(var46)
        assert var47 is not None
        var48 = {}
        var49 = module0.utc_method(*var30, **var48)
    except BaseException:
        pass


def test_case_204():
    try:
        var0 = None
        var1 = module0.tzUTC()
        assert var1 is not None
        var2 = var1.utcoffset(var0)
        assert var2 is not None
        var3 = None
        var4 = {}
        var5 = module0.tzUTC(**var4)
        assert var5 is not None
        var6 = var5.dst(var3)
        assert var6 is not None
        var7 = module0.tzUTC()
        assert var7 is not None
        var8 = var7.utcoffset(var0)
        assert var8 is not None
        var9 = -2019
        var10 = None
        var11 = [var10]
        var12 = module0.tzUTC(*var11)
        assert var12 is not None
        var13 = var12.dst(var9)
        assert var13 is not None
        var14 = {var13: var11, var13: var9}
        var15 = module0.utc_aware(var14)
        assert var15 is not None
        var16 = module0.tzUTC()
        assert var16 is not None
        var17 = -2019
        var18 = None
        var19 = [var18]
        var20 = module0.tzUTC(*var19)
        assert var20 is not None
        var21 = var20.dst(var17)
        assert var21 is not None
        var22 = {var21: var19, var21: var17}
        var23 = module0.utc_aware(var22)
        assert var23 is not None
        var24 = module0.tzUTC()
        assert var24 is not None
        var25 = module0.tzUTC()
        assert var25 is not None
        var26 = b'\x191\\\x82~.\x18\xaf\x95\xc6\xaf'
        var27 = [var26, var26, var26]
        var28 = module0.tzUTC(*var27)
        assert var28 is not None
        var29 = '%s not found'
        var30 = {var29: var29, var29: var29, var29: var29}
        var31 = module0.tzUTC(**var30)
        assert var31 is not None
        var32 = var31.dst(var28)
        assert var32 is not None
        var33 = module0.utc_method()
    except BaseException:
        pass


def test_case_205():
    try:
        var0 = module0.tzUTC()
        assert var0 is not None
        var1 = -2019
        var2 = None
        var3 = [var2]
        var4 = module0.tzUTC(*var3)
        assert var4 is not None
        var5 = var4.dst(var1)
        assert var5 is not None
        var6 = None
        var7 = module0.utc_aware(var6)
        assert var7 is not None
        var8 = b'\x0b@\xa8\x92\x18\xf75~y\xb6\xfbJ\x81\t'
        var9 = module0.utc_aware(var8)
        assert var9 is not None
        var10 = -1473.5683
        var11 = module0.utc_aware(var10)
        assert var11 is not None
        var12 = module0.tzUTC()
        assert var12 is not None
        var13 = None
        var14 = {}
        var15 = module0.tzUTC(**var14)
        assert var15 is not None
        var16 = var15.dst(var13)
        assert var16 is not None
        var17 = [var13, var14, var16]
        var18 = module0.tzUTC(*var17)
        assert var18 is not None
        var19 = None
        var20 = var18.dst(var19)
        assert var20 is not None
        var21 = module0.tzUTC()
        assert var21 is not None
        var22 = module0.utc_aware(var21)
        assert var22 is not None
        var23 = module0.tzUTC()
        assert var23 is not None
        var24 = None
        var25 = {}
        var26 = module0.tzUTC(**var25)
        assert var26 is not None
        var27 = var26.dst(var24)
        assert var27 is not None
        var28 = [var24, var25, var27]
        var29 = module0.tzUTC(*var28)
        assert var29 is not None
        var30 = None
        var31 = {}
        var32 = module0.tzUTC(**var31)
        assert var32 is not None
        var33 = var32.dst(var30)
        assert var33 is not None
        var34 = -2019
        var35 = None
        var36 = [var35]
        var37 = module0.tzUTC(*var36)
        assert var37 is not None
        var38 = var37.dst(var34)
        assert var38 is not None
        var39 = {var38: var36, var38: var34}
        var40 = module0.utc_aware(var39)
        assert var40 is not None
        var41 = ()
        var42 = module0.tzUTC()
        assert var42 is not None
        var43 = [var42]
        var44 = module0.tzUTC(*var43)
        assert var44 is not None
        var45 = [var44]
        var46 = module0.tzUTC(*var45)
        assert var46 is not None
        var47 = var46.utcoffset(var41)
        assert var47 is not None
        var48 = True
        var49 = {var48: var48, var48: var48, var48: var48, var48: var48}
        var50 = module0.tzUTC()
        assert var50 is not None
        var51 = var50.utcoffset(var49)
        assert var51 is not None
        var52 = None
        var53 = module0.tzUTC()
        assert var53 is not None
        var54 = var53.utcoffset(var52)
        assert var54 is not None
        var55 = None
        var56 = var53.utcoffset(var55)
        assert var56 is not None
        var57 = module0.utc_aware(var55)
        assert var57 is not None
        var58 = var53.dst(var53)
        assert var58 is not None
        var59 = module0.isoformat(var39)
    except BaseException:
        pass


def test_case_206():
    try:
        var0 = True
        var1 = {var0: var0, var0: var0, var0: var0, var0: var0}
        var2 = module0.tzUTC()
        assert var2 is not None
        var3 = var2.utcoffset(var1)
        assert var3 is not None
        var4 = None
        var5 = var4,
        var6 = module0.tzUTC()
        assert var6 is not None
        var7 = var6.dst(var5)
        assert var7 is not None
        var8 = True
        var9 = {var8: var8, var8: var8, var8: var8, var8: var8}
        var10 = module0.tzUTC()
        assert var10 is not None
        var11 = var10.utcoffset(var9)
        assert var11 is not None
        var12 = 2994
        var13 = module0.utc_aware(var12)
        assert var13 is not None
        var14 = None
        var15 = var10.dst(var14)
        assert var15 is not None
        var16 = b'\x191\\\x82~.\x18\xaf\x95\xc6\xaf'
        var17 = [var16, var16, var16]
        var18 = module0.tzUTC(*var17)
        assert var18 is not None
        var19 = '%s not found'
        var20 = {var19: var19, var19: var19, var19: var19}
        var21 = module0.tzUTC(**var20)
        assert var21 is not None
        var22 = var21.dst(var18)
        assert var22 is not None
        var23 = None
        var24 = module0.tzUTC()
        assert var24 is not None
        var25 = var24.utcoffset(var23)
        assert var25 is not None
        var26 = None
        var27 = {}
        var28 = module0.tzUTC(**var27)
        assert var28 is not None
        var29 = var28.dst(var26)
        assert var29 is not None
        var30 = module0.tzUTC()
        assert var30 is not None
        var31 = var30.utcoffset(var23)
        assert var31 is not None
        var32 = True
        var33 = {var32: var32, var32: var32, var32: var32, var32: var32}
        var34 = module0.tzUTC()
        assert var34 is not None
        var35 = var34.utcoffset(var33)
        assert var35 is not None
        var36 = None
        var37 = module0.tzUTC()
        assert var37 is not None
        var38 = var37.utcoffset(var36)
        assert var38 is not None
        var39 = None
        var40 = var37.utcoffset(var39)
        assert var40 is not None
        var41 = module0.utc_aware(var39)
        assert var41 is not None
        var42 = var37.dst(var37)
        assert var42 is not None
        var43 = b'J\xc2-p\xc7l\xa7\xcd\xa7 \xacM>\xbc\xbb'
        var44 = {}
        var45 = module0.tzUTC(**var44)
        assert var45 is not None
        var46 = var45.dst(var43)
        assert var46 is not None
        var47 = set()
        var48 = var45.dst(var47)
        assert var48 is not None
        var49 = module0.utc_method()
    except BaseException:
        pass


def test_case_207():
    try:
        var0 = -2019
        var1 = None
        var2 = [var1]
        var3 = module0.tzUTC(*var2)
        assert var3 is not None
        var4 = var3.dst(var0)
        assert var4 is not None
        var5 = {var4: var2, var4: var0}
        var6 = module0.utc_aware(var5)
        assert var6 is not None
        var7 = module0.tzUTC()
        assert var7 is not None
        var8 = module0.utc_method(*var2)
    except BaseException:
        pass


def test_case_208():
    try:
        var0 = -2019
        var1 = None
        var2 = [var1]
        var3 = module0.tzUTC(*var2)
        assert var3 is not None
        var4 = var3.dst(var0)
        assert var4 is not None
        var5 = module0.tzUTC()
        assert var5 is not None
        var6 = '5\x0cMtw@-H)M4(\tky/4q'
        var7 = var3.utcoffset(var6)
        assert var7 is not None
        var8 = None
        var9 = {}
        var10 = module0.tzUTC(**var9)
        assert var10 is not None
        var11 = var10.dst(var8)
        assert var11 is not None
        var12 = b'J\xc2-p\xc7l\xa7\xcd\xa7 \xacM>\xbc\xbb'
        var13 = {}
        var14 = module0.tzUTC(**var13)
        assert var14 is not None
        var15 = var14.dst(var12)
        assert var15 is not None
        var16 = set()
        var17 = var14.dst(var16)
        assert var17 is not None
        var18 = True
        var19 = {var18: var18, var18: var18, var18: var18, var18: var18}
        var20 = module0.tzUTC()
        assert var20 is not None
        var21 = var20.utcoffset(var19)
        assert var21 is not None
        var22 = None
        var23 = module0.tzUTC()
        assert var23 is not None
        var24 = var23.utcoffset(var22)
        assert var24 is not None
        var25 = None
        var26 = var23.utcoffset(var25)
        assert var26 is not None
        var27 = module0.tzUTC()
        assert var27 is not None
        var28 = module0.tzUTC()
        assert var28 is not None
        var29 = var28.utcoffset(var27)
        assert var29 is not None
        var30 = -1079.201
        var31 = {var27: var30}
        var32 = var27.dst(var31)
        assert var32 is not None
        var33 = -575
        var34 = module0.utc_aware(var33)
        assert var34 is not None
        var35 = module0.tzUTC()
        assert var35 is not None
        var36 = module0.tzUTC()
        assert var36 is not None
        var37 = var36.utcoffset(var35)
        assert var37 is not None
        var38 = module0.tzUTC()
        assert var38 is not None
        var39 = -2019
        var40 = None
        var41 = [var40]
        var42 = module0.tzUTC(*var41)
        assert var42 is not None
        var43 = var42.dst(var39)
        assert var43 is not None
        var44 = None
        var45 = module0.utc_aware(var44)
        assert var45 is not None
        var46 = module0.isoformat(var18)
    except BaseException:
        pass


def test_case_209():
    try:
        var0 = True
        var1 = {var0: var0, var0: var0, var0: var0, var0: var0}
        var2 = module0.tzUTC()
        assert var2 is not None
        var3 = var2.utcoffset(var1)
        assert var3 is not None
        var4 = 2994
        var5 = module0.utc_aware(var4)
        assert var5 is not None
        var6 = None
        var7 = var2.dst(var6)
        assert var7 is not None
        var8 = module0.tzUTC()
        assert var8 is not None
        var9 = None
        var10 = {}
        var11 = module0.tzUTC(**var10)
        assert var11 is not None
        var12 = var11.dst(var9)
        assert var12 is not None
        var13 = [var9, var10, var12]
        var14 = module0.tzUTC(*var13)
        assert var14 is not None
        var15 = -2019
        var16 = None
        var17 = [var16]
        var18 = module0.tzUTC(*var17)
        assert var18 is not None
        var19 = var18.dst(var15)
        assert var19 is not None
        var20 = module0.tzUTC()
        assert var20 is not None
        var21 = False
        var22 = var20.dst(var21)
        assert var22 is not None
        var23 = None
        var24 = module0.tzUTC()
        assert var24 is not None
        var25 = [var24, var24]
        var26 = ':):ijBSTBjV'
        var27 = {var26: var24, var26: var25}
        var28 = module0.tzUTC(*var25, **var27)
        assert var28 is not None
        var29 = var28.utcoffset(var23)
        assert var29 is not None
        var30 = -2019
        var31 = None
        var32 = [var31]
        var33 = module0.tzUTC(*var32)
        assert var33 is not None
        var34 = var33.dst(var30)
        assert var34 is not None
        var35 = 0.8
        var36 = module0.tzUTC()
        assert var36 is not None
        var37 = var36.utcoffset(var35)
        assert var37 is not None
        var38 = b'7\x9d\xccV\x1e5\xd0a\xb6\xc8\x02\xb6'
        var39 = var36.utcoffset(var38)
        assert var39 is not None
        var40 = module0.tzUTC()
        assert var40 is not None
        var41 = None
        var42 = {}
        var43 = module0.tzUTC(**var42)
        assert var43 is not None
        var44 = var43.dst(var41)
        assert var44 is not None
        var45 = [var41, var42, var44]
        var46 = module0.tzUTC(*var45)
        assert var46 is not None
        var47 = None
        var48 = var46.dst(var47)
        assert var48 is not None
        var49 = b'J\xc2-p\xc7l\xa7\xcd\xa7 \xacM>\xbc\xbb'
        var50 = {}
        var51 = module0.tzUTC(**var50)
        assert var51 is not None
        var52 = var51.dst(var49)
        assert var52 is not None
        var53 = set()
        var54 = var51.dst(var53)
        assert var54 is not None
        var55 = module0.tzUTC()
        assert var55 is not None
        var56 = module0.utc_method()
    except BaseException:
        pass


def test_case_210():
    try:
        var0 = module0.tzUTC()
        assert var0 is not None
        var1 = module0.tzUTC()
        assert var1 is not None
        var2 = var1.utcoffset(var0)
        assert var2 is not None
        var3 = module0.tzUTC()
        assert var3 is not None
        var4 = module0.tzUTC()
        assert var4 is not None
        var5 = var4.utcoffset(var3)
        assert var5 is not None
        var6 = -1079.201
        var7 = {var3: var6}
        var8 = var3.dst(var7)
        assert var8 is not None
        var9 = None
        var10 = {}
        var11 = module0.tzUTC(**var10)
        assert var11 is not None
        var12 = var11.dst(var9)
        assert var12 is not None
        var13 = '!V&.T]y^l-&7T8\r"'
        var14 = module0.isoformat(var13)
    except BaseException:
        pass


def test_case_211():
    try:
        var0 = module0.tzUTC()
        assert var0 is not None
        var1 = module0.tzUTC()
        assert var1 is not None
        var2 = var1.utcoffset(var0)
        assert var2 is not None
        var3 = -2019
        var4 = None
        var5 = [var4]
        var6 = module0.tzUTC(*var5)
        assert var6 is not None
        var7 = var6.dst(var3)
        assert var7 is not None
        var8 = module0.tzUTC()
        assert var8 is not None
        var9 = False
        var10 = var8.dst(var9)
        assert var10 is not None
        var11 = None
        var12 = module0.tzUTC()
        assert var12 is not None
        var13 = var12.utcoffset(var11)
        assert var13 is not None
        var14 = None
        var15 = var12.utcoffset(var14)
        assert var15 is not None
        var16 = module0.utc_aware(var14)
        assert var16 is not None
        var17 = var12.dst(var12)
        assert var17 is not None
        var18 = -2019
        var19 = None
        var20 = [var19]
        var21 = module0.tzUTC(*var20)
        assert var21 is not None
        var22 = var21.dst(var18)
        assert var22 is not None
        var23 = {var22: var20, var22: var18}
        var24 = module0.utc_aware(var23)
        assert var24 is not None
        var25 = None
        var26 = {}
        var27 = module0.tzUTC(**var26)
        assert var27 is not None
        var28 = var27.dst(var25)
        assert var28 is not None
        var29 = -2019
        var30 = None
        var31 = [var30]
        var32 = module0.tzUTC(*var31)
        assert var32 is not None
        var33 = var32.dst(var29)
        assert var33 is not None
        var34 = module0.isoformat(var9)
    except BaseException:
        pass


def test_case_212():
    try:
        var0 = module0.tzUTC()
        assert var0 is not None
        var1 = module0.tzUTC()
        assert var1 is not None
        var2 = var1.utcoffset(var0)
        assert var2 is not None
        var3 = 2445
        var4 = var1.utcoffset(var3)
        assert var4 is not None
        var5 = b'\x0b@\xa8\x92\x18\xf75~y\xb6\xfbJ\x81\t'
        var6 = module0.utc_aware(var5)
        assert var6 is not None
        var7 = -1473.5683
        var8 = module0.utc_aware(var7)
        assert var8 is not None
        var9 = ' ;bC"0-`5ZN'
        var10 = module0.tzUTC()
        assert var10 is not None
        var11 = var10.dst(var9)
        assert var11 is not None
        var12 = b'J\xc2-p\xc7l\xa7\xcd\xa7 \xacM>\xbc\xbb'
        var13 = {}
        var14 = module0.tzUTC(**var13)
        assert var14 is not None
        var15 = var14.dst(var12)
        assert var15 is not None
        var16 = set()
        var17 = var14.dst(var16)
        assert var17 is not None
        var18 = module0.tzUTC()
        assert var18 is not None
        var19 = -416
        var20 = {var19, var19}
        var21 = [var20, var19]
        var22 = b'7\r\xbf\xc5\x83P\xd2\x1fZ8\x1e\xf8 \xb1@\xe4kg'
        var23 = [var22, var22, var22]
        var24 = module0.tzUTC(*var23)
        assert var24 is not None
        var25 = var24.dst(var21)
        assert var25 is not None
        var26 = -2019
        var27 = None
        var28 = [var27]
        var29 = module0.tzUTC(*var28)
        assert var29 is not None
        var30 = var29.dst(var26)
        assert var30 is not None
        var31 = module0.tzUTC()
        assert var31 is not None
        var32 = 'Akbe`@a~EQ{/?mH@%'
        var33 = var29.dst(var32)
        assert var33 is not None
        var34 = {var17: var8, var33: var25, var30: var27}
        var35 = module0.isoformat(var34)
    except BaseException:
        pass


def test_case_213():
    try:
        var0 = -416
        var1 = {var0, var0}
        var2 = [var1, var0]
        var3 = b'7\r\xbf\xc5\x83P\xd2\x1fZ8\x1e\xf8 \xb1@\xe4kg'
        var4 = [var3, var3, var3]
        var5 = module0.tzUTC(*var4)
        assert var5 is not None
        var6 = var5.dst(var2)
        assert var6 is not None
        var7 = -2060.41
        var8 = var5.utcoffset(var7)
        assert var8 is not None
        var9 = b'J\xc2-p\xc7l\xa7\xcd\xa7 \xacM>\xbc\xbb'
        var10 = {}
        var11 = module0.tzUTC(**var10)
        assert var11 is not None
        var12 = var11.dst(var9)
        assert var12 is not None
        var13 = set()
        var14 = var11.dst(var13)
        assert var14 is not None
        var15 = module0.tzUTC()
        assert var15 is not None
        var16 = -2019
        var17 = None
        var18 = [var17]
        var19 = module0.tzUTC(*var18)
        assert var19 is not None
        var20 = var19.dst(var16)
        assert var20 is not None
        var21 = {var20: var18, var20: var16}
        var22 = module0.utc_aware(var21)
        assert var22 is not None
        var23 = module0.tzUTC()
        assert var23 is not None
        var24 = module0.tzUTC()
        assert var24 is not None
        var25 = module0.tzUTC()
        assert var25 is not None
        var26 = module0.utc_aware(var25)
        assert var26 is not None
        var27 = None
        var28 = {}
        var29 = module0.tzUTC(**var28)
        assert var29 is not None
        var30 = var29.dst(var27)
        assert var30 is not None
        var31 = -2019
        var32 = None
        var33 = [var32]
        var34 = module0.tzUTC(*var33)
        assert var34 is not None
        var35 = var34.dst(var31)
        assert var35 is not None
        var36 = module0.tzUTC()
        assert var36 is not None
        var37 = 'Akbe`@a~EQ{/?mH@%'
        var38 = var34.dst(var37)
        assert var38 is not None
        var39 = None
        var40 = module0.tzUTC()
        assert var40 is not None
        var41 = var40.utcoffset(var39)
        assert var41 is not None
        var42 = None
        var43 = var40.utcoffset(var42)
        assert var43 is not None
        var44 = module0.utc_aware(var42)
        assert var44 is not None
        var45 = var40.dst(var40)
        assert var45 is not None
        var46 = ()
        var47 = module0.isoformat(var46)
    except BaseException:
        pass


def test_case_214():
    try:
        var0 = module0.tzUTC()
        assert var0 is not None
        var1 = None
        var2 = {}
        var3 = module0.tzUTC(**var2)
        assert var3 is not None
        var4 = var3.dst(var1)
        assert var4 is not None
        var5 = [var1, var2, var4]
        var6 = module0.tzUTC(*var5)
        assert var6 is not None
        var7 = None
        var8 = var6.dst(var7)
        assert var8 is not None
        var9 = module0.utc_method()
    except BaseException:
        pass


def test_case_215():
    try:
        var0 = -2019
        var1 = None
        var2 = [var1]
        var3 = module0.tzUTC(*var2)
        assert var3 is not None
        var4 = var3.dst(var0)
        assert var4 is not None
        var5 = module0.tzUTC()
        assert var5 is not None
        var6 = b'\x191\\\x82~.\x18\xaf\x95\xc6\xaf'
        var7 = [var6, var6, var6]
        var8 = module0.tzUTC(*var7)
        assert var8 is not None
        var9 = '%s not found'
        var10 = {var9: var9, var9: var9, var9: var9}
        var11 = module0.tzUTC(**var10)
        assert var11 is not None
        var12 = var11.dst(var8)
        assert var12 is not None
        var13 = module0.utc_method(*var7)
    except BaseException:
        pass


def test_case_216():
    try:
        var0 = module0.tzUTC()
        assert var0 is not None
        var1 = None
        var2 = {}
        var3 = module0.tzUTC(**var2)
        assert var3 is not None
        var4 = var3.dst(var1)
        assert var4 is not None
        var5 = [var1, var2, var4]
        var6 = module0.tzUTC(*var5)
        assert var6 is not None
        var7 = '{R;IM&v#5SGyZ'
        var8 = {var7: var7, var7: var7}
        var9 = module0.tzUTC(**var8)
        assert var9 is not None
        var10 = module0.tzUTC()
        assert var10 is not None
        var11 = -2019
        var12 = None
        var13 = [var12]
        var14 = module0.tzUTC(*var13)
        assert var14 is not None
        var15 = var14.dst(var11)
        assert var15 is not None
        var16 = None
        var17 = module0.utc_aware(var16)
        assert var17 is not None
        var18 = False
        var19 = [var14, var12, var16, var18]
        var20 = {var19, var3, var16, var11}
    except BaseException:
        pass


def test_case_217():
    try:
        var0 = None
        var1 = module0.tzUTC()
        assert var1 is not None
        var2 = var1.utcoffset(var0)
        assert var2 is not None
        var3 = None
        var4 = {}
        var5 = module0.tzUTC(**var4)
        assert var5 is not None
        var6 = var5.dst(var3)
        assert var6 is not None
        var7 = module0.tzUTC()
        assert var7 is not None
        var8 = var7.utcoffset(var0)
        assert var8 is not None
        var9 = -575
        var10 = module0.utc_aware(var9)
        assert var10 is not None
        var11 = None
        var12 = {var11: var11, var10: var11}
        var13 = [var11, var10]
        var14 = var12, var9, var11, var13
        var15 = module0.tzUTC()
        assert var15 is not None
        var16 = var15.utcoffset(var14)
        assert var16 is not None
        var17 = module0.isoformat(var14)
    except BaseException:
        pass


def test_case_218():
    try:
        var0 = 0.8
        var1 = {var0: var0, var0: var0, var0: var0, var0: var0}
        var2 = module0.tzUTC()
        assert var2 is not None
        var3 = var2.utcoffset(var1)
        assert var3 is not None
        var4 = '{R;IM&v#5SGyZ'
        var5 = {var4: var4, var4: var4}
        var6 = module0.tzUTC(**var5)
        assert var6 is not None
        var7 = -1656
        var8 = module0.isoformat(var7)
    except BaseException:
        pass


def test_case_219():
    try:
        var0 = -2019
        var1 = None
        var2 = [var1]
        var3 = module0.tzUTC(*var2)
        assert var3 is not None
        var4 = var3.dst(var0)
        assert var4 is not None
        var5 = None
        var6 = module0.tzUTC()
        assert var6 is not None
        var7 = var6.utcoffset(var5)
        assert var7 is not None
        var8 = None
        var9 = var6.utcoffset(var8)
        assert var9 is not None
        var10 = b'\x191\\\x82~.\x18\xaf\x95\xc6\xaf'
        var11 = [var10, var10, var10]
        var12 = module0.tzUTC(*var11)
        assert var12 is not None
        var13 = '%s not found'
        var14 = {var13: var13, var13: var13, var13: var13}
        var15 = module0.tzUTC(**var14)
        assert var15 is not None
        var16 = var15.dst(var12)
        assert var16 is not None
        var17 = None
        var18 = module0.tzUTC()
        assert var18 is not None
        var19 = var18.utcoffset(var17)
        assert var19 is not None
        var20 = None
        var21 = {}
        var22 = module0.tzUTC(**var21)
        assert var22 is not None
        var23 = var22.dst(var20)
        assert var23 is not None
        var24 = module0.tzUTC()
        assert var24 is not None
        var25 = var24.utcoffset(var17)
        assert var25 is not None
        var26 = -2019
        var27 = None
        var28 = [var27]
        var29 = module0.tzUTC(*var28)
        assert var29 is not None
        var30 = var29.dst(var26)
        assert var30 is not None
        var31 = {var30: var28, var30: var26}
        var32 = module0.utc_aware(var31)
        assert var32 is not None
        var33 = -416
        var34 = {var33, var33}
        var35 = [var34, var33]
        var36 = b'7\r\xbf\xc5\x83P\xd2\x1fZ8\x1e\xf8 \xb1@\xe4kg'
        var37 = [var36, var36, var36]
        var38 = module0.tzUTC(*var37)
        assert var38 is not None
        var39 = var38.dst(var35)
        assert var39 is not None
        var40 = -2019
        var41 = None
        var42 = [var41]
        var43 = module0.tzUTC(*var42)
        assert var43 is not None
        var44 = var43.dst(var40)
        assert var44 is not None
        var45 = module0.tzUTC()
        assert var45 is not None
        var46 = '5\x0cMtw@-H)M4(\tky/4q'
        var47 = var43.utcoffset(var46)
        assert var47 is not None
        var48 = b'J\xc2-p\xc7l\xa7\xcd\xa7 \xacM>\xbc\xbb'
        var49 = {}
        var50 = module0.tzUTC(**var49)
        assert var50 is not None
        var51 = var50.dst(var48)
        assert var51 is not None
        var52 = module0.utc_method(**var21)
    except BaseException:
        pass


def test_case_220():
    try:
        var0 = None
        var1 = {}
        var2 = module0.tzUTC(**var1)
        assert var2 is not None
        var3 = var2.dst(var0)
        assert var3 is not None
        var4 = b'J\xc2-p\xc7l\xa7\xcd\xa7 \xacM>\xbc\xbb'
        var5 = {}
        var6 = module0.tzUTC(**var5)
        assert var6 is not None
        var7 = var6.dst(var4)
        assert var7 is not None
        var8 = set()
        var9 = var6.dst(var8)
        assert var9 is not None
        var10 = module0.tzUTC()
        assert var10 is not None
        var11 = module0.tzUTC()
        assert var11 is not None
        var12 = module0.tzUTC()
        assert var12 is not None
        var13 = var12.utcoffset(var11)
        assert var13 is not None
        var14 = 2445
        var15 = var12.utcoffset(var14)
        assert var15 is not None
        var16 = module0.isoformat(var10)
    except BaseException:
        pass


def test_case_221():
    try:
        var0 = -2019
        var1 = None
        var2 = [var1]
        var3 = module0.tzUTC(*var2)
        assert var3 is not None
        var4 = var3.dst(var0)
        assert var4 is not None
        var5 = module0.tzUTC()
        assert var5 is not None
        var6 = 'Akbe`@a~EQ{/?mH@%'
        var7 = var3.dst(var6)
        assert var7 is not None
        var8 = b'\x191\\\x82~.\x18\xaf\x95\xc6\xaf'
        var9 = [var8, var8, var8]
        var10 = module0.tzUTC(*var9)
        assert var10 is not None
        var11 = '%s not found'
        var12 = {var11: var11, var11: var11, var11: var11}
        var13 = module0.tzUTC(**var12)
        assert var13 is not None
        var14 = var13.dst(var10)
        assert var14 is not None
        var15 = '{R;IM&v#5SGyZ'
        var16 = {var15: var15, var15: var15}
        var17 = module0.tzUTC(**var16)
        assert var17 is not None
        var18 = module0.utc_method()
    except BaseException:
        pass


def test_case_222():
    try:
        var0 = None
        var1 = module0.tzUTC()
        assert var1 is not None
        var2 = var1.utcoffset(var0)
        assert var2 is not None
        var3 = None
        var4 = var1.utcoffset(var3)
        assert var4 is not None
        var5 = module0.utc_aware(var3)
        assert var5 is not None
        var6 = var1.dst(var1)
        assert var6 is not None
        var7 = module0.tzUTC()
        assert var7 is not None
        var8 = -2019
        var9 = None
        var10 = [var9]
        var11 = module0.tzUTC(*var10)
        assert var11 is not None
        var12 = var11.dst(var8)
        assert var12 is not None
        var13 = module0.tzUTC()
        assert var13 is not None
        var14 = {var12, var13}
        var15 = module0.utc_aware(var14)
        assert var15 is not None
        var16 = 0.8
        var17 = module0.tzUTC()
        assert var17 is not None
        var18 = var17.utcoffset(var16)
        assert var18 is not None
        var19 = module0.utc_method(*var10)
    except BaseException:
        pass


def test_case_223():
    try:
        var0 = module0.tzUTC()
        assert var0 is not None
        var1 = module0.tzUTC()
        assert var1 is not None
        var2 = module0.tzUTC()
        assert var2 is not None
        var3 = var2.utcoffset(var1)
        assert var3 is not None
        var4 = 2445
        var5 = var2.utcoffset(var4)
        assert var5 is not None
        var6 = module0.tzUTC()
        assert var6 is not None
        var7 = None
        var8 = {}
        var9 = module0.tzUTC(**var8)
        assert var9 is not None
        var10 = var9.dst(var7)
        assert var10 is not None
        var11 = [var7, var8, var10]
        var12 = module0.tzUTC(*var11)
        assert var12 is not None
        var13 = -2019
        var14 = None
        var15 = [var14]
        var16 = module0.tzUTC(*var15)
        assert var16 is not None
        var17 = var16.dst(var13)
        assert var17 is not None
        var18 = module0.tzUTC()
        assert var18 is not None
        var19 = False
        var20 = var18.dst(var19)
        assert var20 is not None
        var21 = module0.tzUTC()
        assert var21 is not None
        var22 = -2019
        var23 = None
        var24 = [var23]
        var25 = module0.tzUTC(*var24)
        assert var25 is not None
        var26 = var25.dst(var22)
        assert var26 is not None
        var27 = module0.tzUTC()
        assert var27 is not None
        var28 = {var26, var27}
        var29 = module0.utc_aware(var28)
        assert var29 is not None
        var30 = None
        var31 = module0.tzUTC()
        assert var31 is not None
        var32 = var31.utcoffset(var30)
        assert var32 is not None
        var33 = 2074
        var34 = module0.tzUTC()
        assert var34 is not None
        var35 = var34.utcoffset(var33)
        assert var35 is not None
        var36 = 0.8
        var37 = module0.tzUTC()
        assert var37 is not None
        var38 = var37.utcoffset(var36)
        assert var38 is not None
        var39 = None
        var40 = module0.tzUTC()
        assert var40 is not None
        var41 = var40.utcoffset(var39)
        assert var41 is not None
        var42 = None
        var43 = var40.utcoffset(var42)
        assert var43 is not None
        var44 = module0.utc_aware(var42)
        assert var44 is not None
        var45 = 2701
        var46 = module0.isoformat(var45)
    except BaseException:
        pass


def test_case_224():
    try:
        var0 = -416
        var1 = {var0, var0}
        var2 = [var1, var0]
        var3 = b'7\r\xbf\xc5\x83P\xd2\x1fZ8\x1e\xf8 \xb1@\xe4kg'
        var4 = [var3, var3, var3]
        var5 = module0.tzUTC(*var4)
        assert var5 is not None
        var6 = var5.dst(var2)
        assert var6 is not None
        var7 = -2060.41
        var8 = var5.utcoffset(var7)
        assert var8 is not None
        var9 = None
        var10 = module0.tzUTC()
        assert var10 is not None
        var11 = [var10, var10]
        var12 = ':):ijBSTBjV'
        var13 = {var12: var10, var12: var11}
        var14 = module0.tzUTC(*var11, **var13)
        assert var14 is not None
        var15 = var14.utcoffset(var9)
        assert var15 is not None
        var16 = 0.8
        var17 = {var16: var16, var16: var16, var16: var16, var16: var16}
        var18 = module0.tzUTC()
        assert var18 is not None
        var19 = var18.utcoffset(var17)
        assert var19 is not None
        var20 = 0.8
        var21 = module0.tzUTC()
        assert var21 is not None
        var22 = var21.utcoffset(var20)
        assert var22 is not None
        var23 = '}UBL-2aJ%rPM7-f?'
        var24 = var23, var23
        var25 = module0.utc_aware(var24)
        assert var25 is not None
        var26 = module0.tzUTC()
        assert var26 is not None
        var27 = -2019
        var28 = None
        var29 = [var28]
        var30 = module0.tzUTC(*var29)
        assert var30 is not None
        var31 = var30.dst(var27)
        assert var31 is not None
        var32 = None
        var33 = module0.utc_aware(var32)
        assert var33 is not None
        var34 = b'\x0b@\xa8\x92\x18\xf75~y\xb6\xfbJ\x81\t'
        var35 = module0.utc_aware(var34)
        assert var35 is not None
        var36 = -1473.5683
        var37 = module0.utc_aware(var36)
        assert var37 is not None
        var38 = -2019
        var39 = None
        var40 = [var39]
        var41 = module0.tzUTC(*var40)
        assert var41 is not None
        var42 = var41.dst(var38)
        assert var42 is not None
        var43 = module0.tzUTC()
        assert var43 is not None
        var44 = False
        var45 = var43.dst(var44)
        assert var45 is not None
        var46 = b'J\xc2-p\xc7l\xa7\xcd\xa7 \xacM>\xbc\xbb'
        var47 = {}
        var48 = module0.tzUTC(**var47)
        assert var48 is not None
        var49 = var48.dst(var46)
        assert var49 is not None
        var50 = set()
        var51 = var48.dst(var50)
        assert var51 is not None
        var52 = -229
        var53 = var48.utcoffset(var52)
        assert var53 is not None
        var54 = -2019
        var55 = None
        var56 = [var55]
        var57 = module0.tzUTC(*var56)
        assert var57 is not None
        var58 = var57.dst(var54)
        assert var58 is not None
        var59 = module0.utc_method(**var47)
    except BaseException:
        pass


def test_case_225():
    try:
        var0 = -1100.85
        var1 = module0.isoformat(var0)
    except BaseException:
        pass


def test_case_226():
    try:
        var0 = 0.8
        var1 = module0.tzUTC()
        assert var1 is not None
        var2 = var1.utcoffset(var0)
        assert var2 is not None
        var3 = b'7\x9d\xccV\x1e5\xd0a\xb6\xc8\x02\xb6'
        var4 = var1.utcoffset(var3)
        assert var4 is not None
        var5 = None
        var6 = module0.tzUTC()
        assert var6 is not None
        var7 = var6.utcoffset(var5)
        assert var7 is not None
        var8 = None
        var9 = {}
        var10 = module0.tzUTC(**var9)
        assert var10 is not None
        var11 = var10.dst(var8)
        assert var11 is not None
        var12 = module0.tzUTC()
        assert var12 is not None
        var13 = var12.utcoffset(var5)
        assert var13 is not None
        var14 = b'J\xc2-p\xc7l\xa7\xcd\xa7 \xacM>\xbc\xbb'
        var15 = {}
        var16 = module0.tzUTC(**var15)
        assert var16 is not None
        var17 = var16.dst(var14)
        assert var17 is not None
        var18 = set()
        var19 = var16.dst(var18)
        assert var19 is not None
        var20 = -2019
        var21 = None
        var22 = [var21]
        var23 = module0.tzUTC(*var22)
        assert var23 is not None
        var24 = var23.dst(var20)
        assert var24 is not None
        var25 = module0.utc_method()
    except BaseException:
        pass


def test_case_227():
    try:
        var0 = -575
        var1 = module0.utc_aware(var0)
        assert var1 is not None
        var2 = None
        var3 = {var2: var2, var1: var2}
        var4 = [var2, var1]
        var5 = var3, var0, var2, var4
        var6 = module0.tzUTC()
        assert var6 is not None
        var7 = var6.utcoffset(var5)
        assert var7 is not None
        var8 = module0.tzUTC()
        assert var8 is not None
        var9 = None
        var10 = module0.tzUTC()
        assert var10 is not None
        var11 = var10.utcoffset(var9)
        assert var11 is not None
        var12 = None
        var13 = {}
        var14 = module0.tzUTC(**var13)
        assert var14 is not None
        var15 = var14.dst(var12)
        assert var15 is not None
        var16 = module0.tzUTC()
        assert var16 is not None
        var17 = var16.utcoffset(var9)
        assert var17 is not None
        var18 = module0.utc_method()
    except BaseException:
        pass


def test_case_228():
    try:
        var0 = None
        var1 = module0.tzUTC()
        assert var1 is not None
        var2 = var1.utcoffset(var0)
        assert var2 is not None
        var3 = None
        var4 = var1.utcoffset(var3)
        assert var4 is not None
        var5 = b'\x0b@\xa8\x92\x18\xf75~y\xb6\xfbJ\x81\t'
        var6 = module0.utc_aware(var5)
        assert var6 is not None
        var7 = -1473.5683
        var8 = module0.utc_aware(var7)
        assert var8 is not None
        var9 = None
        var10 = {}
        var11 = module0.tzUTC(**var10)
        assert var11 is not None
        var12 = var11.dst(var9)
        assert var12 is not None
        var13 = '}UBL-2aJ%rPM7-f?'
        var14 = var13, var13
        var15 = module0.utc_aware(var14)
        assert var15 is not None
        var16 = b'J\xc2-p\xc7l\xa7\xcd\xa7 \xacM>\xbc\xbb'
        var17 = {}
        var18 = module0.tzUTC(**var17)
        assert var18 is not None
        var19 = var18.dst(var16)
        assert var19 is not None
        var20 = set()
        var21 = var18.dst(var20)
        assert var21 is not None
        var22 = -2019
        var23 = None
        var24 = [var23]
        var25 = module0.tzUTC(*var24)
        assert var25 is not None
        var26 = var25.dst(var22)
        assert var26 is not None
        var27 = {var26: var24, var26: var22}
        var28 = module0.utc_aware(var27)
        assert var28 is not None
        var29 = module0.tzUTC()
        assert var29 is not None
        var30 = -2019
        var31 = None
        var32 = [var31]
        var33 = module0.tzUTC(*var32)
        assert var33 is not None
        var34 = var33.dst(var30)
        assert var34 is not None
        var35 = None
        var36 = module0.utc_aware(var35)
        assert var36 is not None
        var37 = -575
        var38 = module0.utc_aware(var37)
        assert var38 is not None
        var39 = None
        var40 = {var39: var39, var38: var39}
        var41 = [var39, var38]
        var42 = var40, var37, var39, var41
        var43 = module0.tzUTC()
        assert var43 is not None
        var44 = var43.utcoffset(var42)
        assert var44 is not None
        var45 = None
        var46 = module0.tzUTC()
        assert var46 is not None
        var47 = var46.utcoffset(var45)
        assert var47 is not None
        var48 = None
        var49 = {}
        var50 = module0.tzUTC(**var49)
        assert var50 is not None
        var51 = var50.dst(var48)
        assert var51 is not None
        var52 = module0.tzUTC()
        assert var52 is not None
        var53 = var52.utcoffset(var45)
        assert var53 is not None
        var54 = b'\x0b@\xa8\x92\x18\xf75~y\xb6\xfbJ\x81\t'
        var55 = module0.utc_aware(var54)
        assert var55 is not None
        var56 = module0.utc_method()
    except BaseException:
        pass


def test_case_229():
    try:
        var0 = None
        var1 = module0.tzUTC()
        assert var1 is not None
        var2 = var1.utcoffset(var0)
        assert var2 is not None
        var3 = None
        var4 = var1.utcoffset(var3)
        assert var4 is not None
        var5 = 254
        var6 = None
        var7 = var1, var5, var6
        var8 = module0.isoformat(var7)
    except BaseException:
        pass


def test_case_230():
    try:
        var0 = -2019
        var1 = None
        var2 = [var1]
        var3 = module0.tzUTC(*var2)
        assert var3 is not None
        var4 = var3.dst(var0)
        assert var4 is not None
        var5 = module0.tzUTC()
        assert var5 is not None
        var6 = '5\x0cMtw@-H)M4(\tky/4q'
        var7 = var3.utcoffset(var6)
        assert var7 is not None
        var8 = module0.tzUTC()
        assert var8 is not None
        var9 = None
        var10 = {}
        var11 = module0.tzUTC(**var10)
        assert var11 is not None
        var12 = var11.dst(var9)
        assert var12 is not None
        var13 = [var9, var10, var12]
        var14 = module0.tzUTC(*var13)
        assert var14 is not None
        var15 = None
        var16 = var14.dst(var15)
        assert var16 is not None
        var17 = -575
        var18 = module0.utc_aware(var17)
        assert var18 is not None
        var19 = 0.8
        var20 = {var19: var19, var19: var19, var19: var19, var19: var19}
        var21 = module0.tzUTC()
        assert var21 is not None
        var22 = var21.utcoffset(var20)
        assert var22 is not None
        var23 = module0.tzUTC()
        assert var23 is not None
        var24 = b'J\xc2-p\xc7l\xa7\xcd\xa7 \xacM>\xbc\xbb'
        var25 = {}
        var26 = module0.tzUTC(**var25)
        assert var26 is not None
        var27 = var26.dst(var24)
        assert var27 is not None
        var28 = set()
        var29 = var26.dst(var28)
        assert var29 is not None
        var30 = module0.tzUTC()
        assert var30 is not None
        var31 = b'J\xc2-p\xc7l\xa7\xcd\xa7 \xacM>\xbc\xbb'
        var32 = {}
        var33 = module0.tzUTC(**var32)
        assert var33 is not None
        var34 = var33.dst(var31)
        assert var34 is not None
        var35 = set()
        var36 = var33.dst(var35)
        assert var36 is not None
        var37 = -229
        var38 = var33.utcoffset(var37)
        assert var38 is not None
        var39 = ()
        var40 = module0.tzUTC()
        assert var40 is not None
        var41 = [var40]
        var42 = module0.tzUTC(*var41)
        assert var42 is not None
        var43 = [var42]
        var44 = module0.tzUTC(*var43)
        assert var44 is not None
        var45 = var44.utcoffset(var39)
        assert var45 is not None
        var46 = 2994
        var47 = module0.utc_aware(var46)
        assert var47 is not None
        var48 = module0.utc_method()
    except BaseException:
        pass


def test_case_231():
    try:
        var0 = None
        var1 = module0.tzUTC()
        assert var1 is not None
        var2 = var1.utcoffset(var0)
        assert var2 is not None
        var3 = None
        var4 = {}
        var5 = module0.tzUTC(**var4)
        assert var5 is not None
        var6 = var5.dst(var3)
        assert var6 is not None
        var7 = module0.tzUTC()
        assert var7 is not None
        var8 = var7.utcoffset(var0)
        assert var8 is not None
        var9 = True
        var10 = {var9: var9, var9: var9, var9: var9, var9: var9}
        var11 = module0.tzUTC()
        assert var11 is not None
        var12 = var11.utcoffset(var10)
        assert var12 is not None
        var13 = -2019
        var14 = None
        var15 = [var14]
        var16 = module0.tzUTC(*var15)
        assert var16 is not None
        var17 = var16.dst(var13)
        assert var17 is not None
        var18 = {var17: var15, var17: var13}
        var19 = module0.utc_aware(var18)
        assert var19 is not None
        var20 = module0.tzUTC()
        assert var20 is not None
        var21 = b'\x0b@\xa8\x92\x18\xf75~y\xb6\xfbJ\x81\t'
        var22 = module0.utc_aware(var21)
        assert var22 is not None
        var23 = -1473.5683
        var24 = module0.utc_aware(var23)
        assert var24 is not None
        var25 = 0.8
        var26 = {var25: var25, var25: var25, var25: var25, var25: var25}
        var27 = module0.tzUTC()
        assert var27 is not None
        var28 = var27.utcoffset(var26)
        assert var28 is not None
        var29 = module0.tzUTC()
        assert var29 is not None
        var30 = 0.8
        var31 = {var30: var30, var30: var30, var30: var30, var30: var30}
        var32 = module0.tzUTC()
        assert var32 is not None
        var33 = var32.utcoffset(var31)
        assert var33 is not None
        var34 = module0.tzUTC()
        assert var34 is not None
        var35 = -2019
        var36 = None
        var37 = [var36]
        var38 = module0.tzUTC(*var37)
        assert var38 is not None
        var39 = var38.dst(var35)
        assert var39 is not None
        var40 = None
        var41 = module0.utc_aware(var40)
        assert var41 is not None
        var42 = 'F}hrQWH!f>Z(]l)DI'
        var43 = {var42: var42}
        var44 = module0.tzUTC(**var43)
        assert var44 is not None
        var45 = module0.tzUTC()
        assert var45 is not None
        var46 = var45.utcoffset(var44)
        assert var46 is not None
        var47 = -2958.5
        var48 = module0.isoformat(var47)
    except BaseException:
        pass


def test_case_232():
    try:
        var0 = True
        var1 = {var0: var0, var0: var0, var0: var0, var0: var0}
        var2 = module0.tzUTC()
        assert var2 is not None
        var3 = var2.utcoffset(var1)
        assert var3 is not None
        var4 = '}UBL-2aJ%rPM7-f?'
        var5 = var4, var4
        var6 = module0.utc_aware(var5)
        assert var6 is not None
        var7 = 'z}bO6aQ7'
        var8 = {var7}
        var9 = module0.utc_aware(var8)
        assert var9 is not None
        var10 = 3767
        var11 = 'Vb'
        var12 = {var11: var11}
        var13 = module0.tzUTC(**var12)
        assert var13 is not None
        var14 = var13.dst(var10)
        assert var14 is not None
        var15 = None
        var16 = module0.tzUTC()
        assert var16 is not None
        var17 = var16.utcoffset(var15)
        assert var17 is not None
        var18 = b'J\xc2-p\xc7l\xa7\xcd\xa7 \xacM>\xbc\xbb'
        var19 = {}
        var20 = module0.tzUTC(**var19)
        assert var20 is not None
        var21 = var20.dst(var18)
        assert var21 is not None
        var22 = 'F}hrQWH!f>Z(]l)DI'
        var23 = {var22: var22}
        var24 = module0.tzUTC(**var23)
        assert var24 is not None
        var25 = module0.tzUTC()
        assert var25 is not None
        var26 = var25.utcoffset(var24)
        assert var26 is not None
        var27 = module0.tzUTC()
        assert var27 is not None
        var28 = module0.tzUTC()
        assert var28 is not None
        var29 = var28.utcoffset(var27)
        assert var29 is not None
        var30 = -1079.201
        var31 = {var27: var30}
        var32 = var27.dst(var31)
        assert var32 is not None
        var33 = None
        var34 = module0.tzUTC()
        assert var34 is not None
        var35 = var34.utcoffset(var33)
        assert var35 is not None
        var36 = None
        var37 = var34.utcoffset(var36)
        assert var37 is not None
        var38 = module0.utc_aware(var36)
        assert var38 is not None
        var39 = [var31, var31, var3, var14]
        var40 = module0.utc_method(*var39, **var19)
    except BaseException:
        pass


def test_case_233():
    try:
        var0 = None
        var1 = module0.tzUTC()
        assert var1 is not None
        var2 = var1.utcoffset(var0)
        assert var2 is not None
        var3 = None
        var4 = var1.utcoffset(var3)
        assert var4 is not None
        var5 = module0.utc_aware(var3)
        assert var5 is not None
        var6 = var1.dst(var1)
        assert var6 is not None
        var7 = module0.tzUTC()
        assert var7 is not None
        var8 = -2019
        var9 = None
        var10 = [var9]
        var11 = module0.tzUTC(*var10)
        assert var11 is not None
        var12 = var11.dst(var8)
        assert var12 is not None
        var13 = None
        var14 = module0.utc_aware(var13)
        assert var14 is not None
        var15 = 410
        var16 = module0.tzUTC()
        assert var16 is not None
        var17 = var16.dst(var15)
        assert var17 is not None
        var18 = module0.tzUTC()
        assert var18 is not None
        var19 = None
        var20 = {}
        var21 = module0.tzUTC(**var20)
        assert var21 is not None
        var22 = var21.dst(var19)
        assert var22 is not None
        var23 = [var19, var20, var22]
        var24 = module0.tzUTC(*var23)
        assert var24 is not None
        var25 = None
        var26 = var24.dst(var25)
        assert var26 is not None
        var27 = -416
        var28 = {var27, var27}
        var29 = [var28, var27]
        var30 = b'7\r\xbf\xc5\x83P\xd2\x1fZ8\x1e\xf8 \xb1@\xe4kg'
        var31 = [var30, var30, var30]
        var32 = module0.tzUTC(*var31)
        assert var32 is not None
        var33 = var32.dst(var29)
        assert var33 is not None
        var34 = -575
        var35 = module0.utc_aware(var34)
        assert var35 is not None
        var36 = 0.8
        var37 = {var36: var36, var36: var36, var36: var36, var36: var36}
        var38 = module0.tzUTC()
        assert var38 is not None
        var39 = var38.utcoffset(var37)
        assert var39 is not None
        var40 = module0.tzUTC()
        assert var40 is not None
        var41 = -2019
        var42 = None
        var43 = [var42]
        var44 = module0.tzUTC(*var43)
        assert var44 is not None
        var45 = var44.dst(var41)
        assert var45 is not None
        var46 = module0.tzUTC()
        assert var46 is not None
        var47 = '5\x0cMtw@-H)M4(\tky/4q'
        var48 = var44.utcoffset(var47)
        assert var48 is not None
        var49 = module0.utc_method(*var10)
    except BaseException:
        pass


def test_case_234():
    try:
        var0 = 'W:|K:\r!Dg~j?/yXt'
        var1 = module0.isoformat(var0)
    except BaseException:
        pass


def test_case_235():
    try:
        var0 = -416
        var1 = {var0, var0}
        var2 = [var1, var0]
        var3 = b'7\r\xbf\xc5\x83P\xd2\x1fZ8\x1e\xf8 \xb1@\xe4kg'
        var4 = [var3, var3, var3]
        var5 = module0.tzUTC(*var4)
        assert var5 is not None
        var6 = var5.dst(var2)
        assert var6 is not None
        var7 = -2060.41
        var8 = var5.utcoffset(var7)
        assert var8 is not None
        var9 = 410
        var10 = module0.tzUTC()
        assert var10 is not None
        var11 = var10.dst(var9)
        assert var11 is not None
        var12 = module0.tzUTC()
        assert var12 is not None
        var13 = None
        var14 = {}
        var15 = module0.tzUTC(**var14)
        assert var15 is not None
        var16 = var15.dst(var13)
        assert var16 is not None
        var17 = [var13, var14, var16]
        var18 = module0.tzUTC(*var17)
        assert var18 is not None
        var19 = None
        var20 = var18.dst(var19)
        assert var20 is not None
        var21 = {var17}
    except BaseException:
        pass


def test_case_236():
    try:
        var0 = module0.tzUTC()
        assert var0 is not None
        var1 = module0.tzUTC()
        assert var1 is not None
        var2 = var1.utcoffset(var0)
        assert var2 is not None
        var3 = 2445
        var4 = var1.utcoffset(var3)
        assert var4 is not None
        var5 = b'\x0b@\xa8\x92\x18\xf75~y\xb6\xfbJ\x81\t'
        var6 = module0.utc_aware(var5)
        assert var6 is not None
        var7 = module0.tzUTC()
        assert var7 is not None
        var8 = -2019
        var9 = None
        var10 = [var9]
        var11 = module0.tzUTC(*var10)
        assert var11 is not None
        var12 = var11.dst(var8)
        assert var12 is not None
        var13 = None
        var14 = module0.utc_aware(var13)
        assert var14 is not None
        var15 = -2019
        var16 = None
        var17 = [var16]
        var18 = module0.tzUTC(*var17)
        assert var18 is not None
        var19 = var18.dst(var15)
        assert var19 is not None
        var20 = {var19: var17, var19: var15}
        var21 = module0.utc_aware(var20)
        assert var21 is not None
        var22 = module0.tzUTC()
        assert var22 is not None
        var23 = -2019
        var24 = None
        var25 = [var24]
        var26 = module0.tzUTC(*var25)
        assert var26 is not None
        var27 = var26.dst(var23)
        assert var27 is not None
        var28 = module0.tzUTC()
        assert var28 is not None
        var29 = '5\x0cMtw@-H)M4(\tky/4q'
        var30 = var26.utcoffset(var29)
        assert var30 is not None
        var31 = -2019
        var32 = None
        var33 = [var32]
        var34 = module0.tzUTC(*var33)
        assert var34 is not None
        var35 = var34.dst(var31)
        assert var35 is not None
        var36 = {var35: var33, var35: var31}
        var37 = module0.utc_aware(var36)
        assert var37 is not None
        var38 = 410
        var39 = module0.tzUTC()
        assert var39 is not None
        var40 = var39.dst(var38)
        assert var40 is not None
        var41 = module0.tzUTC()
        assert var41 is not None
        var42 = module0.tzUTC()
        assert var42 is not None
        var43 = var42.utcoffset(var41)
        assert var43 is not None
        var44 = -1079.201
        var45 = {var41: var44}
        var46 = var41.dst(var45)
        assert var46 is not None
        var47 = 0.8
        var48 = {var47: var47, var47: var47, var47: var47, var47: var47}
        var49 = module0.tzUTC()
        assert var49 is not None
        var50 = var49.utcoffset(var48)
        assert var50 is not None
        var51 = module0.tzUTC()
        assert var51 is not None
        var52 = module0.utc_method(*var17)
    except BaseException:
        pass


def test_case_237():
    try:
        var0 = module0.tzUTC()
        assert var0 is not None
        var1 = -2019
        var2 = None
        var3 = [var2]
        var4 = module0.tzUTC(*var3)
        assert var4 is not None
        var5 = var4.dst(var1)
        assert var5 is not None
        var6 = None
        var7 = module0.utc_aware(var6)
        assert var7 is not None
        var8 = -575
        var9 = module0.utc_aware(var8)
        assert var9 is not None
        var10 = 0.8
        var11 = {var10: var10, var10: var10, var10: var10, var10: var10}
        var12 = module0.tzUTC()
        assert var12 is not None
        var13 = var12.utcoffset(var11)
        assert var13 is not None
        var14 = 0.8
        var15 = module0.tzUTC()
        assert var15 is not None
        var16 = var15.utcoffset(var14)
        assert var16 is not None
        var17 = -416
        var18 = {var17, var17}
        var19 = [var18, var17]
        var20 = b'7\r\xbf\xc5\x83P\xd2\x1fZ8\x1e\xf8 \xb1@\xe4kg'
        var21 = [var20, var20, var20]
        var22 = module0.tzUTC(*var21)
        assert var22 is not None
        var23 = var22.dst(var19)
        assert var23 is not None
        var24 = -2060.41
        var25 = var22.utcoffset(var24)
        assert var25 is not None
        var26 = -2019
        var27 = None
        var28 = [var27]
        var29 = module0.tzUTC(*var28)
        assert var29 is not None
        var30 = var29.dst(var26)
        assert var30 is not None
        var31 = module0.tzUTC()
        assert var31 is not None
        var32 = False
        var33 = var31.dst(var32)
        assert var33 is not None
        var34 = 2074
        var35 = module0.tzUTC()
        assert var35 is not None
        var36 = var35.utcoffset(var34)
        assert var36 is not None
        var37 = -416
        var38 = {var37, var37}
        var39 = [var38, var37]
        var40 = b'7\r\xbf\xc5\x83P\xd2\x1fZ8\x1e\xf8 \xb1@\xe4kg'
        var41 = [var40, var40, var40]
        var42 = module0.tzUTC(*var41)
        assert var42 is not None
        var43 = var42.dst(var39)
        assert var43 is not None
        var44 = module0.tzUTC()
        assert var44 is not None
        var45 = module0.utc_aware(var44)
        assert var45 is not None
        var46 = -2019
        var47 = None
        var48 = [var47]
        var49 = module0.tzUTC(*var48)
        assert var49 is not None
        var50 = var49.dst(var46)
        assert var50 is not None
        var51 = {var50: var48, var50: var46}
        var52 = module0.utc_aware(var51)
        assert var52 is not None
        var53 = {}
        var54 = module0.utc_method(**var53)
    except BaseException:
        pass


def test_case_238():
    try:
        var0 = b'J\xc2-p\xc7l\xa7\xcd\xa7 \xacM>\xbc\xbb'
        var1 = {}
        var2 = module0.tzUTC(**var1)
        assert var2 is not None
        var3 = var2.dst(var0)
        assert var3 is not None
        var4 = set()
        var5 = var2.dst(var4)
        assert var5 is not None
        var6 = module0.tzUTC()
        assert var6 is not None
        var7 = None
        var8 = {var7: var2, var4: var0, var7: var0, var0: var5}
    except BaseException:
        pass


def test_case_239():
    try:
        var0 = None
        var1 = module0.tzUTC()
        assert var1 is not None
        var2 = var1.utcoffset(var0)
        assert var2 is not None
        var3 = module0.tzUTC()
        assert var3 is not None
        var4 = None
        var5 = {}
        var6 = module0.tzUTC(**var5)
        assert var6 is not None
        var7 = var6.dst(var4)
        assert var7 is not None
        var8 = [var4, var5, var7]
        var9 = module0.tzUTC(*var8)
        assert var9 is not None
        var10 = None
        var11 = var9.dst(var10)
        assert var11 is not None
        var12 = b'\x0b@\xa8\x92\x18\xf75~y\xb6\xfbJ\x81\t'
        var13 = module0.utc_aware(var12)
        assert var13 is not None
        var14 = module0.tzUTC()
        assert var14 is not None
        var15 = 2074
        var16 = module0.tzUTC()
        assert var16 is not None
        var17 = var16.utcoffset(var15)
        assert var17 is not None
        var18 = 3767
        var19 = 'Vb'
        var20 = {var19: var19}
        var21 = module0.tzUTC(**var20)
        assert var21 is not None
        var22 = var21.dst(var18)
        assert var22 is not None
        var23 = var4.utcoffset(var19)
    except BaseException:
        pass


def test_case_240():
    try:
        var0 = 114.63366
        var1 = [var0, var0, var0]
        var2 = module0.utc_method(*var1)
    except BaseException:
        pass


def test_case_241():
    try:
        var0 = '{R;IM&v#5SGyZ'
        var1 = {var0: var0, var0: var0}
        var2 = module0.tzUTC(**var1)
        assert var2 is not None
        var3 = module0.tzUTC()
        assert var3 is not None
        var4 = None
        var5 = {}
        var6 = module0.tzUTC(**var5)
        assert var6 is not None
        var7 = var6.dst(var4)
        assert var7 is not None
        var8 = [var4, var5, var7]
        var9 = module0.tzUTC(*var8)
        assert var9 is not None
        var10 = None
        var11 = var9.dst(var10)
        assert var11 is not None
        var12 = 0.8
        var13 = {var12: var12, var12: var12, var12: var12, var12: var12}
        var14 = module0.tzUTC()
        assert var14 is not None
        var15 = var14.utcoffset(var13)
        assert var15 is not None
        var16 = module0.tzUTC()
        assert var16 is not None
        var17 = -2019
        var18 = None
        var19 = [var18]
        var20 = module0.tzUTC(*var19)
        assert var20 is not None
        var21 = var20.dst(var17)
        assert var21 is not None
        var22 = {var21: var19, var21: var17}
        var23 = module0.utc_aware(var22)
        assert var23 is not None
        var24 = module0.tzUTC()
        assert var24 is not None
        var25 = -2019
        var26 = None
        var27 = [var26]
        var28 = module0.tzUTC(*var27)
        assert var28 is not None
        var29 = var28.dst(var25)
        assert var29 is not None
        var30 = {var29: var27, var29: var25}
        var31 = module0.utc_aware(var30)
        assert var31 is not None
        var32 = -2019
        var33 = None
        var34 = [var33]
        var35 = module0.tzUTC(*var34)
        assert var35 is not None
        var36 = var35.dst(var32)
        assert var36 is not None
        var37 = module0.tzUTC()
        assert var37 is not None
        var38 = '5\x0cMtw@-H)M4(\tky/4q'
        var39 = var35.utcoffset(var38)
        assert var39 is not None
        var40 = None
        var41 = {}
        var42 = module0.tzUTC(**var41)
        assert var42 is not None
        var43 = var42.dst(var40)
        assert var43 is not None
        var44 = -416
        var45 = {var44, var44}
        var46 = [var45, var44]
        var47 = b'7\r\xbf\xc5\x83P\xd2\x1fZ8\x1e\xf8 \xb1@\xe4kg'
        var48 = [var47, var47, var47]
        var49 = module0.tzUTC(*var48)
        assert var49 is not None
        var50 = var49.dst(var46)
        assert var50 is not None
        var51 = -2060.41
        var52 = var49.utcoffset(var51)
        assert var52 is not None
        var53 = module0.utc_method(*var27)
    except BaseException:
        pass


def test_case_242():
    try:
        var0 = -2019
        var1 = None
        var2 = [var1]
        var3 = module0.tzUTC(*var2)
        assert var3 is not None
        var4 = var3.dst(var0)
        assert var4 is not None
        var5 = -2019
        var6 = None
        var7 = [var6]
        var8 = module0.tzUTC(*var7)
        assert var8 is not None
        var9 = var8.dst(var5)
        assert var9 is not None
        var10 = {var9: var7, var9: var5}
        var11 = module0.utc_aware(var10)
        assert var11 is not None
        var12 = module0.tzUTC()
        assert var12 is not None
        var13 = module0.tzUTC()
        assert var13 is not None
        var14 = module0.tzUTC()
        assert var14 is not None
        var15 = module0.utc_aware(var14)
        assert var15 is not None
        var16 = -575
        var17 = module0.utc_aware(var16)
        assert var17 is not None
        var18 = module0.tzUTC()
        assert var18 is not None
        var19 = module0.tzUTC()
        assert var19 is not None
        var20 = var19.utcoffset(var18)
        assert var20 is not None
        var21 = -2019
        var22 = None
        var23 = [var22]
        var24 = module0.tzUTC(*var23)
        assert var24 is not None
        var25 = var24.dst(var21)
        assert var25 is not None
        var26 = module0.tzUTC()
        assert var26 is not None
        var27 = '5\x0cMtw@-H)M4(\tky/4q'
        var28 = var24.utcoffset(var27)
        assert var28 is not None
        var29 = b'J\xc2-p\xc7l\xa7\xcd\xa7 \xacM>\xbc\xbb'
        var30 = {}
        var31 = module0.tzUTC(**var30)
        assert var31 is not None
        var32 = var31.dst(var29)
        assert var32 is not None
        var33 = set()
        var34 = var31.dst(var33)
        assert var34 is not None
        var35 = -2019
        var36 = None
        var37 = [var36]
        var38 = module0.tzUTC(*var37)
        assert var38 is not None
        var39 = var38.dst(var35)
        assert var39 is not None
        var40 = module0.tzUTC()
        assert var40 is not None
        var41 = False
        var42 = var40.dst(var41)
        assert var42 is not None
        var43 = -575
        var44 = module0.utc_aware(var43)
        assert var44 is not None
        var45 = 'B*:(S=T7\t]!;+~hHz'
        var46 = module0.tzUTC()
        assert var46 is not None
        var47 = var46.utcoffset(var45)
        assert var47 is not None
        var48 = module0.isoformat(var27)
    except BaseException:
        pass


def test_case_243():
    try:
        var0 = -2019
        var1 = None
        var2 = [var1]
        var3 = module0.tzUTC(*var2)
        assert var3 is not None
        var4 = var3.dst(var0)
        assert var4 is not None
        var5 = {var4: var2, var4: var0}
        var6 = module0.utc_aware(var5)
        assert var6 is not None
        var7 = module0.tzUTC()
        assert var7 is not None
        var8 = 0.8
        var9 = {var8: var8, var8: var8, var8: var8, var8: var8}
        var10 = module0.tzUTC()
        assert var10 is not None
        var11 = var10.utcoffset(var9)
        assert var11 is not None
        var12 = b'J\xc2-p\xc7l\xa7\xcd\xa7 \xacM>\xbc\xbb'
        var13 = {}
        var14 = module0.tzUTC(**var13)
        assert var14 is not None
        var15 = var14.dst(var12)
        assert var15 is not None
        var16 = set()
        var17 = var14.dst(var16)
        assert var17 is not None
        var18 = module0.tzUTC()
        assert var18 is not None
        var19 = -575
        var20 = module0.utc_aware(var19)
        assert var20 is not None
        var21 = None
        var22 = {var21: var21, var20: var21}
        var23 = [var21, var20]
        var24 = var22, var19, var21, var23
        var25 = module0.tzUTC()
        assert var25 is not None
        var26 = var25.utcoffset(var24)
        assert var26 is not None
        var27 = '}UBL-2aJ%rPM7-f?'
        var28 = var27, var27
        var29 = module0.utc_aware(var28)
        assert var29 is not None
        var30 = True
        var31 = {var30: var30, var30: var30, var30: var30, var30: var30}
        var32 = module0.tzUTC()
        assert var32 is not None
        var33 = var32.utcoffset(var31)
        assert var33 is not None
        var34 = 2994
        var35 = module0.utc_aware(var34)
        assert var35 is not None
        var36 = None
        var37 = var32.dst(var36)
        assert var37 is not None
        var38 = 'F}hrQWH!f>Z(]l)DI'
        var39 = {var38: var38}
        var40 = module0.tzUTC(**var39)
        assert var40 is not None
        var41 = module0.tzUTC()
        assert var41 is not None
        var42 = var41.utcoffset(var40)
        assert var42 is not None
        var43 = 3767
        var44 = 'Vb'
        var45 = {var44: var44}
        var46 = module0.tzUTC(**var45)
        assert var46 is not None
        var47 = var46.dst(var43)
        assert var47 is not None
        var48 = -2019
        var49 = None
        var50 = [var49]
        var51 = module0.tzUTC(*var50)
        assert var51 is not None
        var52 = var51.dst(var48)
        assert var52 is not None
        var53 = module0.tzUTC()
        assert var53 is not None
        var54 = 'Akbe`@a~EQ{/?mH@%'
        var55 = var51.dst(var54)
        assert var55 is not None
        var56 = -416
        var57 = {var56, var56}
        var58 = [var57, var56]
        var59 = b'7\r\xbf\xc5\x83P\xd2\x1fZ8\x1e\xf8 \xb1@\xe4kg'
        var60 = [var59, var59, var59]
        var61 = module0.tzUTC(*var60)
        assert var61 is not None
        var62 = var61.dst(var58)
        assert var62 is not None
        var63 = module0.utc_method()
    except BaseException:
        pass


def test_case_244():
    try:
        var0 = True
        var1 = {var0: var0, var0: var0, var0: var0, var0: var0}
        var2 = module0.tzUTC()
        assert var2 is not None
        var3 = var2.utcoffset(var1)
        assert var3 is not None
        var4 = 2994
        var5 = module0.utc_aware(var4)
        assert var5 is not None
        var6 = None
        var7 = var2.dst(var6)
        assert var7 is not None
        var8 = None
        var9 = module0.tzUTC()
        assert var9 is not None
        var10 = var9.utcoffset(var8)
        assert var10 is not None
        var11 = None
        var12 = var9.utcoffset(var11)
        assert var12 is not None
        var13 = module0.utc_aware(var11)
        assert var13 is not None
        var14 = ()
        var15 = module0.tzUTC()
        assert var15 is not None
        var16 = [var15]
        var17 = module0.tzUTC(*var16)
        assert var17 is not None
        var18 = [var17]
        var19 = module0.tzUTC(*var18)
        assert var19 is not None
        var20 = var19.utcoffset(var14)
        assert var20 is not None
        var21 = b'J\xc2-p\xc7l\xa7\xcd\xa7 \xacM>\xbc\xbb'
        var22 = {}
        var23 = module0.tzUTC(**var22)
        assert var23 is not None
        var24 = var23.dst(var21)
        assert var24 is not None
        var25 = set()
        var26 = var23.dst(var25)
        assert var26 is not None
        var27 = module0.tzUTC()
        assert var27 is not None
        var28 = -2019
        var29 = None
        var30 = [var29]
        var31 = module0.tzUTC(*var30)
        assert var31 is not None
        var32 = var31.dst(var28)
        assert var32 is not None
        var33 = module0.tzUTC()
        assert var33 is not None
        var34 = 'Akbe`@a~EQ{/?mH@%'
        var35 = var31.dst(var34)
        assert var35 is not None
        var36 = b'J\xc2-p\xc7l\xa7\xcd\xa7 \xacM>\xbc\xbb'
        var37 = {}
        var38 = module0.tzUTC(**var37)
        assert var38 is not None
        var39 = var38.dst(var36)
        assert var39 is not None
        var40 = set()
        var41 = var38.dst(var40)
        assert var41 is not None
        var42 = 2074
        var43 = module0.tzUTC()
        assert var43 is not None
        var44 = var43.utcoffset(var42)
        assert var44 is not None
        var45 = module0.tzUTC()
        assert var45 is not None
        var46 = None
        var47 = {}
        var48 = module0.tzUTC(**var47)
        assert var48 is not None
        var49 = var48.dst(var46)
        assert var49 is not None
        var50 = [var46, var47, var49]
        var51 = module0.tzUTC(*var50)
        assert var51 is not None
        var52 = None
        var53 = var51.dst(var52)
        assert var53 is not None
        var54 = -2019
        var55 = None
        var56 = [var55]
        var57 = module0.tzUTC(*var56)
        assert var57 is not None
        var58 = var57.dst(var54)
        assert var58 is not None
        var59 = {var58: var56, var58: var54}
        var60 = module0.utc_aware(var59)
        assert var60 is not None
        var61 = module0.tzUTC()
        assert var61 is not None
        var62 = module0.tzUTC()
        assert var62 is not None
        var63 = module0.utc_method()
    except BaseException:
        pass


def test_case_245():
    try:
        var0 = '}UBL-2aJ%rPM7-f?'
        var1 = var0, var0
        var2 = module0.utc_aware(var1)
        assert var2 is not None
        var3 = True
        var4 = {var3: var3, var3: var3, var3: var3, var3: var3}
        var5 = module0.tzUTC()
        assert var5 is not None
        var6 = var5.utcoffset(var4)
        assert var6 is not None
        var7 = 2994
        var8 = module0.utc_aware(var7)
        assert var8 is not None
        var9 = None
        var10 = var5.dst(var9)
        assert var10 is not None
        var11 = -2019
        var12 = None
        var13 = [var12]
        var14 = module0.tzUTC(*var13)
        assert var14 is not None
        var15 = var14.dst(var11)
        assert var15 is not None
        var16 = {var15: var13, var15: var11}
        var17 = module0.utc_aware(var16)
        assert var17 is not None
        var18 = module0.tzUTC()
        assert var18 is not None
        var19 = module0.tzUTC()
        assert var19 is not None
        var20 = b'J\xc2-p\xc7l\xa7\xcd\xa7 \xacM>\xbc\xbb'
        var21 = {}
        var22 = module0.tzUTC(**var21)
        assert var22 is not None
        var23 = var22.dst(var20)
        assert var23 is not None
        var24 = -2019
        var25 = None
        var26 = [var25]
        var27 = module0.tzUTC(*var26)
        assert var27 is not None
        var28 = var27.dst(var24)
        assert var28 is not None
        var29 = module0.tzUTC()
        assert var29 is not None
        var30 = False
        var31 = var29.dst(var30)
        assert var31 is not None
        var32 = module0.utc_method()
    except BaseException:
        pass


def test_case_246():
    try:
        var0 = b'J\xc2-p\xc7l\xa7\xcd\xa7 \xacM>\xbc\xbb'
        var1 = {}
        var2 = module0.tzUTC(**var1)
        assert var2 is not None
        var3 = var2.dst(var0)
        assert var3 is not None
        var4 = set()
        var5 = var2.dst(var4)
        assert var5 is not None
        var6 = b'\x191\\\x82~.\x18\xaf\x95\xc6\xaf'
        var7 = [var6, var6, var6]
        var8 = module0.tzUTC(*var7)
        assert var8 is not None
        var9 = '%s not found'
        var10 = {var9: var9, var9: var9, var9: var9}
        var11 = module0.tzUTC(**var10)
        assert var11 is not None
        var12 = var11.dst(var8)
        assert var12 is not None
        var13 = module0.tzUTC()
        assert var13 is not None
        var14 = -2019
        var15 = None
        var16 = [var15]
        var17 = module0.tzUTC(*var16)
        assert var17 is not None
        var18 = var17.dst(var14)
        assert var18 is not None
        var19 = module0.tzUTC()
        assert var19 is not None
        var20 = {var18, var19}
        var21 = module0.utc_aware(var20)
        assert var21 is not None
        var22 = None
        var23 = var22,
        var24 = module0.isoformat(var23)
    except BaseException:
        pass


def test_case_247():
    try:
        var0 = module0.tzUTC()
        assert var0 is not None
        var1 = module0.utc_aware(var0)
        assert var1 is not None
        var2 = True
        var3 = {var2: var2, var2: var2, var2: var2, var2: var2}
        var4 = module0.tzUTC()
        assert var4 is not None
        var5 = var4.utcoffset(var3)
        assert var5 is not None
        var6 = -2019
        var7 = None
        var8 = [var7]
        var9 = module0.tzUTC(*var8)
        assert var9 is not None
        var10 = var9.dst(var6)
        assert var10 is not None
        var11 = {var10: var8, var10: var6}
        var12 = module0.utc_aware(var11)
        assert var12 is not None
        var13 = module0.tzUTC()
        assert var13 is not None
        var14 = module0.tzUTC()
        assert var14 is not None
        var15 = b'\x0b@\xa8\x92\x18\xf75~y\xb6\xfbJ\x81\t'
        var16 = module0.utc_aware(var15)
        assert var16 is not None
        var17 = -2019
        var18 = None
        var19 = [var18]
        var20 = module0.tzUTC(*var19)
        assert var20 is not None
        var21 = var20.dst(var17)
        assert var21 is not None
        var22 = module0.tzUTC()
        assert var22 is not None
        var23 = 'Akbe`@a~EQ{/?mH@%'
        var24 = var20.dst(var23)
        assert var24 is not None
        var25 = None
        var26 = module0.tzUTC()
        assert var26 is not None
        var27 = var26.utcoffset(var25)
        assert var27 is not None
        var28 = None
        var29 = var26.utcoffset(var28)
        assert var29 is not None
        var30 = b'\xd6\x04;\xd4:'
        var31 = 'htE\rQX5vmF-Ym$~|6-'
        var32 = []
        var33 = {var31: var31, var31: var32}
        var34 = [var33]
        var35 = module0.tzUTC(*var34)
        assert var35 is not None
        var36 = var35.dst(var30)
        assert var36 is not None
        var37 = None
        var38 = module0.tzUTC()
        assert var38 is not None
        var39 = var38.utcoffset(var37)
        assert var39 is not None
        var40 = None
        var41 = var38.utcoffset(var40)
        assert var41 is not None
        var42 = module0.utc_aware(var40)
        assert var42 is not None
        var43 = var38.dst(var38)
        assert var43 is not None
        var44 = ()
        var45 = module0.tzUTC()
        assert var45 is not None
        var46 = [var45]
        var47 = module0.tzUTC(*var46)
        assert var47 is not None
        var48 = [var47]
        var49 = module0.tzUTC(*var48)
        assert var49 is not None
        var50 = var49.utcoffset(var44)
        assert var50 is not None
        var51 = -2019
        var52 = None
        var53 = [var52]
        var54 = module0.tzUTC(*var53)
        assert var54 is not None
        var55 = var54.dst(var51)
        assert var55 is not None
        var56 = module0.tzUTC()
        assert var56 is not None
        var57 = module0.isoformat(var32)
    except BaseException:
        pass


def test_case_248():
    try:
        var0 = 0.8
        var1 = module0.tzUTC()
        assert var1 is not None
        var2 = var1.utcoffset(var0)
        assert var2 is not None
        var3 = 3767
        var4 = 'Vb'
        var5 = {var4: var4}
        var6 = module0.tzUTC(**var5)
        assert var6 is not None
        var7 = var6.dst(var3)
        assert var7 is not None
        var8 = []
        var9 = module0.utc_method(*var8)
    except BaseException:
        pass


def test_case_249():
    try:
        var0 = b'J\xc2-p\xc7l\xa7\xcd\xa7 \xacM>\xbc\xbb'
        var1 = {}
        var2 = module0.tzUTC(**var1)
        assert var2 is not None
        var3 = var2.dst(var0)
        assert var3 is not None
        var4 = set()
        var5 = var2.dst(var4)
        assert var5 is not None
        var6 = module0.tzUTC()
        assert var6 is not None
        var7 = b'\x191\\\x82~.\x18\xaf\x95\xc6\xaf'
        var8 = [var7, var7, var7]
        var9 = module0.tzUTC(*var8)
        assert var9 is not None
        var10 = '%s not found'
        var11 = {var10: var10, var10: var10, var10: var10}
        var12 = module0.tzUTC(**var11)
        assert var12 is not None
        var13 = var12.dst(var9)
        assert var13 is not None
        var14 = None
        var15 = {}
        var16 = module0.tzUTC(**var15)
        assert var16 is not None
        var17 = var16.dst(var14)
        assert var17 is not None
        var18 = b'J\xc2-p\xc7l\xa7\xcd\xa7 \xacM>\xbc\xbb'
        var19 = {}
        var20 = module0.tzUTC(**var19)
        assert var20 is not None
        var21 = var20.dst(var18)
        assert var21 is not None
        var22 = True
        var23 = {var22: var22, var22: var22, var22: var22, var22: var22}
        var24 = module0.tzUTC()
        assert var24 is not None
        var25 = var24.utcoffset(var23)
        assert var25 is not None
        var26 = module0.tzUTC()
        assert var26 is not None
        var27 = None
        var28 = {}
        var29 = module0.tzUTC(**var28)
        assert var29 is not None
        var30 = var29.dst(var27)
        assert var30 is not None
        var31 = [var27, var28, var30]
        var32 = module0.tzUTC(*var31)
        assert var32 is not None
        var33 = None
        var34 = var32.dst(var33)
        assert var34 is not None
        var35 = module0.utc_method(*var8)
    except BaseException:
        pass


def test_case_250():
    try:
        var0 = b'J\xc2-p\xc7l\xa7\xcd\xa7 \xacM>\xbc\xbb'
        var1 = {}
        var2 = module0.tzUTC(**var1)
        assert var2 is not None
        var3 = var2.dst(var0)
        assert var3 is not None
        var4 = module0.utc_method()
    except BaseException:
        pass


def test_case_251():
    try:
        var0 = 2074
        var1 = module0.tzUTC()
        assert var1 is not None
        var2 = var1.utcoffset(var0)
        assert var2 is not None
        var3 = b'\x191\\\x82~.\x18\xaf\x95\xc6\xaf'
        var4 = [var3, var3, var3]
        var5 = module0.tzUTC(*var4)
        assert var5 is not None
        var6 = '%s not found'
        var7 = {var6: var6, var6: var6, var6: var6}
        var8 = module0.tzUTC(**var7)
        assert var8 is not None
        var9 = var8.dst(var5)
        assert var9 is not None
        var10 = b'\x0b@\xa8\x92\x18\xf75~y\xb6\xfbJ\x81\t'
        var11 = module0.utc_aware(var10)
        assert var11 is not None
        var12 = -1473.5683
        var13 = module0.utc_aware(var12)
        assert var13 is not None
        var14 = module0.tzUTC()
        assert var14 is not None
        var15 = -2019
        var16 = None
        var17 = [var16]
        var18 = module0.tzUTC(*var17)
        assert var18 is not None
        var19 = var18.dst(var15)
        assert var19 is not None
        var20 = None
        var21 = module0.utc_aware(var20)
        assert var21 is not None
        var22 = module0.utc_method(*var4)
    except BaseException:
        pass


def test_case_252():
    try:
        var0 = -575
        var1 = module0.utc_aware(var0)
        assert var1 is not None
        var2 = 'B*:(S=T7\t]!;+~hHz'
        var3 = module0.tzUTC()
        assert var3 is not None
        var4 = var3.utcoffset(var2)
        assert var4 is not None
        var5 = True
        var6 = {var5: var5, var5: var5, var5: var5, var5: var5}
        var7 = module0.tzUTC()
        assert var7 is not None
        var8 = var7.utcoffset(var6)
        assert var8 is not None
        var9 = 2994
        var10 = module0.utc_aware(var9)
        assert var10 is not None
        var11 = None
        var12 = var7.dst(var11)
        assert var12 is not None
        var13 = '}UBL-2aJ%rPM7-f?'
        var14 = var13, var13
        var15 = module0.utc_aware(var14)
        assert var15 is not None
        var16 = -575
        var17 = module0.utc_aware(var16)
        assert var17 is not None
        var18 = None
        var19 = module0.tzUTC()
        assert var19 is not None
        var20 = var19.utcoffset(var18)
        assert var20 is not None
        var21 = None
        var22 = var19.utcoffset(var21)
        assert var22 is not None
        var23 = -575
        var24 = module0.utc_aware(var23)
        assert var24 is not None
        var25 = None
        var26 = {var25: var25, var24: var25}
        var27 = [var25, var24]
        var28 = var26, var23, var25, var27
        var29 = module0.tzUTC()
        assert var29 is not None
        var30 = var29.utcoffset(var28)
        assert var30 is not None
        var31 = [var10]
        var32 = module0.utc_method(*var31)
    except BaseException:
        pass


def test_case_253():
    try:
        var0 = 0.8
        var1 = module0.tzUTC()
        assert var1 is not None
        var2 = var1.utcoffset(var0)
        assert var2 is not None
        var3 = b'\x0b@\xa8\x92\x18\xf75~y\xb6\xfbJ\x81\t'
        var4 = module0.utc_aware(var3)
        assert var4 is not None
        var5 = -1473.5683
        var6 = module0.utc_aware(var5)
        assert var6 is not None
        var7 = module0.tzUTC()
        assert var7 is not None
        var8 = -2019
        var9 = None
        var10 = [var9]
        var11 = module0.tzUTC(*var10)
        assert var11 is not None
        var12 = var11.dst(var8)
        assert var12 is not None
        var13 = module0.tzUTC()
        assert var13 is not None
        var14 = {var12, var13}
        var15 = module0.utc_aware(var14)
        assert var15 is not None
        var16 = None
        var17 = module0.tzUTC()
        assert var17 is not None
        var18 = var17.utcoffset(var16)
        assert var18 is not None
        var19 = None
        var20 = var17.utcoffset(var19)
        assert var20 is not None
        var21 = module0.utc_aware(var19)
        assert var21 is not None
        var22 = 0.8
        var23 = module0.tzUTC()
        assert var23 is not None
        var24 = var23.utcoffset(var22)
        assert var24 is not None
        var25 = b'7\x9d\xccV\x1e5\xd0a\xb6\xc8\x02\xb6'
        var26 = var23.utcoffset(var25)
        assert var26 is not None
        var27 = -2019
        var28 = None
        var29 = [var28]
        var30 = module0.tzUTC(*var29)
        assert var30 is not None
        var31 = var30.dst(var27)
        assert var31 is not None
        var32 = module0.tzUTC()
        assert var32 is not None
        var33 = -2019
        var34 = None
        var35 = [var34]
        var36 = module0.tzUTC(*var35)
        assert var36 is not None
        var37 = var36.dst(var33)
        assert var37 is not None
        var38 = None
        var39 = module0.utc_aware(var38)
        assert var39 is not None
        var40 = '^'
        var41 = module0.isoformat(var40)
    except BaseException:
        pass


def test_case_254():
    try:
        var0 = -2019
        var1 = None
        var2 = [var1]
        var3 = module0.tzUTC(*var2)
        assert var3 is not None
        var4 = var3.dst(var0)
        assert var4 is not None
        var5 = {var4: var2, var4: var0}
        var6 = module0.utc_aware(var5)
        assert var6 is not None
        var7 = module0.tzUTC()
        assert var7 is not None
        var8 = None
        var9 = module0.tzUTC()
        assert var9 is not None
        var10 = var9.utcoffset(var8)
        assert var10 is not None
        var11 = None
        var12 = var9.utcoffset(var11)
        assert var12 is not None
        var13 = module0.utc_aware(var11)
        assert var13 is not None
        var14 = var9.dst(var9)
        assert var14 is not None
        var15 = module0.tzUTC()
        assert var15 is not None
        var16 = None
        var17 = {}
        var18 = module0.tzUTC(**var17)
        assert var18 is not None
        var19 = var18.dst(var16)
        assert var19 is not None
        var20 = [var16, var17, var19]
        var21 = module0.tzUTC(*var20)
        assert var21 is not None
        var22 = None
        var23 = var21.dst(var22)
        assert var23 is not None
        var24 = module0.tzUTC()
        assert var24 is not None
        var25 = module0.tzUTC()
        assert var25 is not None
        var26 = var25.utcoffset(var24)
        assert var26 is not None
        var27 = -1079.201
        var28 = {var24: var27}
        var29 = var24.dst(var28)
        assert var29 is not None
        var30 = module0.tzUTC()
        assert var30 is not None
        var31 = None
        var32 = {}
        var33 = module0.tzUTC(**var32)
        assert var33 is not None
        var34 = var33.dst(var31)
        assert var34 is not None
        var35 = [var31, var32, var34]
        var36 = module0.tzUTC(*var35)
        assert var36 is not None
        var37 = ()
        var38 = module0.tzUTC()
        assert var38 is not None
        var39 = [var38]
        var40 = module0.tzUTC(*var39)
        assert var40 is not None
        var41 = [var40]
        var42 = module0.tzUTC(*var41)
        assert var42 is not None
        var43 = var42.utcoffset(var37)
        assert var43 is not None
        var44 = module0.utc_method(**var32)
    except BaseException:
        pass


def test_case_255():
    try:
        var0 = None
        var1 = module0.tzUTC()
        assert var1 is not None
        var2 = var1.utcoffset(var0)
        assert var2 is not None
        var3 = None
        var4 = var1.utcoffset(var3)
        assert var4 is not None
        var5 = 'gC}jBd7cvHp(E\x0cL&'
        var6 = {var3: var5, var5: var3, var5: var3}
        var7 = module0.utc_method(**var6)
    except BaseException:
        pass


def test_case_256():
    try:
        var0 = b'J\xc2-p\xc7l\xa7\xcd\xa7 \xacM>\xbc\xbb'
        var1 = {}
        var2 = module0.tzUTC(**var1)
        assert var2 is not None
        var3 = var2.dst(var0)
        assert var3 is not None
        var4 = set()
        var5 = var2.dst(var4)
        assert var5 is not None
        var6 = -229
        var7 = var2.utcoffset(var6)
        assert var7 is not None
        var8 = '{R;IM&v#5SGyZ'
        var9 = {var8: var8, var8: var8}
        var10 = module0.tzUTC(**var9)
        assert var10 is not None
        var11 = None
        var12 = module0.tzUTC()
        assert var12 is not None
        var13 = var12.utcoffset(var11)
        assert var13 is not None
        var14 = None
        var15 = var12.utcoffset(var14)
        assert var15 is not None
        var16 = module0.utc_aware(var14)
        assert var16 is not None
        var17 = b'\x0b@\xa8\x92\x18\xf75~y\xb6\xfbJ\x81\t'
        var18 = module0.utc_aware(var17)
        assert var18 is not None
        var19 = -1473.5683
        var20 = module0.utc_aware(var19)
        assert var20 is not None
        var21 = ' ;bC"0-`5ZN'
        var22 = module0.tzUTC()
        assert var22 is not None
        var23 = var22.dst(var21)
        assert var23 is not None
        var24 = module0.utc_method(**var9)
    except BaseException:
        pass


def test_case_257():
    try:
        var0 = 0.8
        var1 = {var0: var0, var0: var0, var0: var0, var0: var0}
        var2 = module0.tzUTC()
        assert var2 is not None
        var3 = var2.utcoffset(var1)
        assert var3 is not None
        var4 = module0.utc_method()
    except BaseException:
        pass


def test_case_258():
    try:
        var0 = 'z}bO6aQ7'
        var1 = {var0}
        var2 = module0.utc_aware(var1)
        assert var2 is not None
        var3 = None
        var4 = module0.tzUTC()
        assert var4 is not None
        var5 = var4.utcoffset(var3)
        assert var5 is not None
        var6 = None
        var7 = var4.utcoffset(var6)
        assert var7 is not None
        var8 = module0.utc_aware(var6)
        assert var8 is not None
        var9 = b'J\xc2-p\xc7l\xa7\xcd\xa7 \xacM>\xbc\xbb'
        var10 = {}
        var11 = module0.tzUTC(**var10)
        assert var11 is not None
        var12 = var11.dst(var9)
        assert var12 is not None
        var13 = set()
        var14 = var11.dst(var13)
        assert var14 is not None
        var15 = module0.tzUTC()
        assert var15 is not None
        var16 = module0.tzUTC()
        assert var16 is not None
        var17 = module0.tzUTC()
        assert var17 is not None
        var18 = var17.utcoffset(var16)
        assert var18 is not None
        var19 = -575
        var20 = module0.utc_aware(var19)
        assert var20 is not None
        var21 = None
        var22 = {var21: var21, var20: var21}
        var23 = [var21, var20]
        var24 = var22, var19, var21, var23
        var25 = module0.tzUTC()
        assert var25 is not None
        var26 = var25.utcoffset(var24)
        assert var26 is not None
        var27 = []
        var28 = module0.utc_method(*var27, **var10)
    except BaseException:
        pass


def test_case_259():
    try:
        var0 = -2019
        var1 = None
        var2 = [var1]
        var3 = module0.tzUTC(*var2)
        assert var3 is not None
        var4 = var3.dst(var0)
        assert var4 is not None
        var5 = module0.tzUTC()
        assert var5 is not None
        var6 = 'Akbe`@a~EQ{/?mH@%'
        var7 = var3.dst(var6)
        assert var7 is not None
        var8 = b'\x0b@\xa8\x92\x18\xf75~y\xb6\xfbJ\x81\t'
        var9 = module0.utc_aware(var8)
        assert var9 is not None
        var10 = -1473.5683
        var11 = module0.utc_aware(var10)
        assert var11 is not None
        var12 = b'J\xc2-p\xc7l\xa7\xcd\xa7 \xacM>\xbc\xbb'
        var13 = {}
        var14 = module0.tzUTC(**var13)
        assert var14 is not None
        var15 = var14.dst(var12)
        assert var15 is not None
        var16 = module0.utc_method(*var2)
    except BaseException:
        pass


def test_case_260():
    try:
        var0 = 0.8
        var1 = {var0: var0, var0: var0, var0: var0, var0: var0}
        var2 = module0.tzUTC()
        assert var2 is not None
        var3 = var2.utcoffset(var1)
        assert var3 is not None
        var4 = module0.tzUTC()
        assert var4 is not None
        var5 = {var2, var2}
        var6 = module0.isoformat(var5)
    except BaseException:
        pass


def test_case_261():
    try:
        var0 = -2019
        var1 = None
        var2 = [var1]
        var3 = module0.tzUTC(*var2)
        assert var3 is not None
        var4 = var3.dst(var0)
        assert var4 is not None
        var5 = module0.tzUTC()
        assert var5 is not None
        var6 = '5\x0cMtw@-H)M4(\tky/4q'
        var7 = var3.utcoffset(var6)
        assert var7 is not None
        var8 = module0.tzUTC()
        assert var8 is not None
        var9 = -2019
        var10 = None
        var11 = [var10]
        var12 = module0.tzUTC(*var11)
        assert var12 is not None
        var13 = var12.dst(var9)
        assert var13 is not None
        var14 = module0.tzUTC()
        assert var14 is not None
        var15 = {var13, var14}
        var16 = module0.utc_aware(var15)
        assert var16 is not None
        var17 = None
        var18 = module0.tzUTC()
        assert var18 is not None
        var19 = var18.utcoffset(var17)
        assert var19 is not None
        var20 = module0.tzUTC()
        assert var20 is not None
        var21 = module0.tzUTC()
        assert var21 is not None
        var22 = var21.utcoffset(var20)
        assert var22 is not None
        var23 = 2445
        var24 = var21.utcoffset(var23)
        assert var24 is not None
        var25 = 0.8
        var26 = module0.tzUTC()
        assert var26 is not None
        var27 = var26.utcoffset(var25)
        assert var27 is not None
        var28 = b'7\x9d\xccV\x1e5\xd0a\xb6\xc8\x02\xb6'
        var29 = var26.utcoffset(var28)
        assert var29 is not None
        var30 = None
        var31 = module0.tzUTC()
        assert var31 is not None
        var32 = var31.utcoffset(var30)
        assert var32 is not None
        var33 = None
        var34 = var31.utcoffset(var33)
        assert var34 is not None
        var35 = module0.utc_aware(var33)
        assert var35 is not None
        var36 = b'\xd6\x04;\xd4:'
        var37 = 'htE\rQX5vmF-Ym$~|6-'
        var38 = []
        var39 = {var37: var37, var37: var38}
        var40 = [var39]
        var41 = module0.tzUTC(*var40)
        assert var41 is not None
        var42 = var41.dst(var36)
        assert var42 is not None
        var43 = module0.utc_method(*var11)
    except BaseException:
        pass


def test_case_262():
    try:
        var0 = module0.tzUTC()
        assert var0 is not None
        var1 = -2019
        var2 = None
        var3 = [var2]
        var4 = module0.tzUTC(*var3)
        assert var4 is not None
        var5 = var4.dst(var1)
        assert var5 is not None
        var6 = module0.tzUTC()
        assert var6 is not None
        var7 = {var5, var6}
        var8 = module0.utc_aware(var7)
        assert var8 is not None
        var9 = b'J\xc2-p\xc7l\xa7\xcd\xa7 \xacM>\xbc\xbb'
        var10 = {}
        var11 = module0.tzUTC(**var10)
        assert var11 is not None
        var12 = var11.dst(var9)
        assert var12 is not None
        var13 = set()
        var14 = var11.dst(var13)
        assert var14 is not None
        var15 = -229
        var16 = var11.utcoffset(var15)
        assert var16 is not None
        var17 = -575
        var18 = module0.utc_aware(var17)
        assert var18 is not None
        var19 = None
        var20 = {var19: var19, var18: var19}
        var21 = [var19, var18]
        var22 = var20, var17, var19, var21
        var23 = module0.tzUTC()
        assert var23 is not None
        var24 = var23.utcoffset(var22)
        assert var24 is not None
        var25 = -416
        var26 = {var25, var25}
        var27 = [var26, var25]
        var28 = b'7\r\xbf\xc5\x83P\xd2\x1fZ8\x1e\xf8 \xb1@\xe4kg'
        var29 = [var28, var28, var28]
        var30 = module0.tzUTC(*var29)
        assert var30 is not None
        var31 = var30.dst(var27)
        assert var31 is not None
        var32 = module0.utc_method()
    except BaseException:
        pass


def test_case_263():
    try:
        var0 = -2019
        var1 = None
        var2 = [var1]
        var3 = module0.tzUTC(*var2)
        assert var3 is not None
        var4 = var3.dst(var0)
        assert var4 is not None
        var5 = {var4: var2, var4: var0}
        var6 = module0.utc_aware(var5)
        assert var6 is not None
        var7 = module0.tzUTC()
        assert var7 is not None
        var8 = None
        var9 = module0.tzUTC()
        assert var9 is not None
        var10 = var9.utcoffset(var8)
        assert var10 is not None
        var11 = None
        var12 = var9.utcoffset(var11)
        assert var12 is not None
        var13 = True
        var14 = {var13: var13, var13: var13, var13: var13, var13: var13}
        var15 = module0.tzUTC()
        assert var15 is not None
        var16 = var15.utcoffset(var14)
        assert var16 is not None
        var17 = None
        var18 = var17,
        var19 = module0.tzUTC()
        assert var19 is not None
        var20 = var19.dst(var18)
        assert var20 is not None
        var21 = module0.tzUTC()
        assert var21 is not None
        var22 = -2019
        var23 = None
        var24 = [var23]
        var25 = module0.tzUTC(*var24)
        assert var25 is not None
        var26 = var25.dst(var22)
        assert var26 is not None
        var27 = None
        var28 = module0.utc_aware(var27)
        assert var28 is not None
        var29 = module0.utc_method()
    except BaseException:
        pass


def test_case_264():
    try:
        var0 = -91
        var1 = module0.tzUTC()
        assert var1 is not None
        var2 = var1.dst(var0)
        assert var2 is not None
        var3 = -575
        var4 = module0.utc_aware(var3)
        assert var4 is not None
        var5 = module0.tzUTC()
        assert var5 is not None
        var6 = module0.tzUTC()
        assert var6 is not None
        var7 = var6.utcoffset(var5)
        assert var7 is not None
        var8 = None
        var9 = module0.tzUTC()
        assert var9 is not None
        var10 = var9.utcoffset(var8)
        assert var10 is not None
        var11 = None
        var12 = {}
        var13 = module0.tzUTC(**var12)
        assert var13 is not None
        var14 = var13.dst(var11)
        assert var14 is not None
        var15 = module0.tzUTC()
        assert var15 is not None
        var16 = var15.utcoffset(var8)
        assert var16 is not None
        var17 = module0.tzUTC()
        assert var17 is not None
        var18 = -2019
        var19 = None
        var20 = [var19]
        var21 = module0.tzUTC(*var20)
        assert var21 is not None
        var22 = var21.dst(var18)
        assert var22 is not None
        var23 = module0.tzUTC()
        assert var23 is not None
        var24 = {var22, var23}
        var25 = module0.utc_aware(var24)
        assert var25 is not None
        var26 = True
        var27 = module0.isoformat(var26)
    except BaseException:
        pass


def test_case_265():
    try:
        var0 = b'\x191\\\x82~.\x18\xaf\x95\xc6\xaf'
        var1 = [var0, var0, var0]
        var2 = module0.tzUTC(*var1)
        assert var2 is not None
        var3 = '%s not found'
        var4 = {var3: var3, var3: var3, var3: var3}
        var5 = module0.tzUTC(**var4)
        assert var5 is not None
        var6 = var5.dst(var2)
        assert var6 is not None
        var7 = module0.tzUTC()
        assert var7 is not None
        var8 = 0.8
        var9 = module0.tzUTC()
        assert var9 is not None
        var10 = var9.utcoffset(var8)
        assert var10 is not None
        var11 = b'7\x9d\xccV\x1e5\xd0a\xb6\xc8\x02\xb6'
        var12 = var9.utcoffset(var11)
        assert var12 is not None
        var13 = module0.utc_method()
    except BaseException:
        pass


def test_case_266():
    try:
        var0 = -2019
        var1 = None
        var2 = [var1]
        var3 = module0.tzUTC(*var2)
        assert var3 is not None
        var4 = var3.dst(var0)
        assert var4 is not None
        var5 = -91
        var6 = module0.tzUTC()
        assert var6 is not None
        var7 = var6.dst(var5)
        assert var7 is not None
        var8 = module0.tzUTC()
        assert var8 is not None
        var9 = module0.tzUTC()
        assert var9 is not None
        var10 = var9.utcoffset(var8)
        assert var10 is not None
        var11 = 'F}hrQWH!f>Z(]l)DI'
        var12 = {var11: var11}
        var13 = module0.tzUTC(**var12)
        assert var13 is not None
        var14 = module0.tzUTC()
        assert var14 is not None
        var15 = var14.utcoffset(var13)
        assert var15 is not None
        var16 = -2019
        var17 = None
        var18 = [var17]
        var19 = module0.tzUTC(*var18)
        assert var19 is not None
        var20 = var19.dst(var16)
        assert var20 is not None
        var21 = module0.tzUTC()
        assert var21 is not None
        var22 = 'Akbe`@a~EQ{/?mH@%'
        var23 = var19.dst(var22)
        assert var23 is not None
        var24 = -2019
        var25 = None
        var26 = [var25]
        var27 = module0.tzUTC(*var26)
        assert var27 is not None
        var28 = var27.dst(var24)
        assert var28 is not None
        var29 = module0.tzUTC()
        assert var29 is not None
        var30 = False
        var31 = var29.dst(var30)
        assert var31 is not None
        var32 = module0.tzUTC()
        assert var32 is not None
        var33 = None
        var34 = {}
        var35 = module0.tzUTC(**var34)
        assert var35 is not None
        var36 = var35.dst(var33)
        assert var36 is not None
        var37 = [var33, var34, var36]
        var38 = module0.tzUTC(*var37)
        assert var38 is not None
        var39 = module0.tzUTC()
        assert var39 is not None
        var40 = module0.utc_aware(var39)
        assert var40 is not None
        var41 = module0.utc_method()
    except BaseException:
        pass


def test_case_267():
    try:
        var0 = b'J\xc2-p\xc7l\xa7\xcd\xa7 \xacM>\xbc\xbb'
        var1 = {}
        var2 = module0.tzUTC(**var1)
        assert var2 is not None
        var3 = var2.dst(var0)
        assert var3 is not None
        var4 = set()
        var5 = var2.dst(var4)
        assert var5 is not None
        var6 = module0.tzUTC()
        assert var6 is not None
        var7 = None
        var8 = module0.tzUTC()
        assert var8 is not None
        var9 = var8.utcoffset(var7)
        assert var9 is not None
        var10 = None
        var11 = var8.utcoffset(var10)
        assert var11 is not None
        var12 = module0.utc_aware(var10)
        assert var12 is not None
        var13 = None
        var14 = module0.utc_aware(var13)
        assert var14 is not None
        var15 = None
        var16 = module0.utc_method(*var15)
    except BaseException:
        pass


def test_case_268():
    try:
        var0 = ()
        var1 = module0.tzUTC()
        assert var1 is not None
        var2 = [var1]
        var3 = module0.tzUTC(*var2)
        assert var3 is not None
        var4 = [var3]
        var5 = module0.tzUTC(*var4)
        assert var5 is not None
        var6 = var5.utcoffset(var0)
        assert var6 is not None
        var7 = module0.tzUTC()
        assert var7 is not None
        var8 = None
        var9 = {}
        var10 = module0.tzUTC(**var9)
        assert var10 is not None
        var11 = var10.dst(var8)
        assert var11 is not None
        var12 = [var8, var9, var11]
        var13 = module0.tzUTC(*var12)
        assert var13 is not None
        var14 = b'J\xc2-p\xc7l\xa7\xcd\xa7 \xacM>\xbc\xbb'
        var15 = {}
        var16 = module0.tzUTC(**var15)
        assert var16 is not None
        var17 = var16.dst(var14)
        assert var17 is not None
        var18 = set()
        var19 = var16.dst(var18)
        assert var19 is not None
        var20 = -229
        var21 = var16.utcoffset(var20)
        assert var21 is not None
        var22 = 2994
        var23 = module0.utc_aware(var22)
        assert var23 is not None
        var24 = -575
        var25 = module0.utc_aware(var24)
        assert var25 is not None
        var26 = 'z}bO6aQ7'
        var27 = {var26}
        var28 = module0.utc_aware(var27)
        assert var28 is not None
        var29 = -2019
        var30 = None
        var31 = [var30]
        var32 = module0.tzUTC(*var31)
        assert var32 is not None
        var33 = var32.dst(var29)
        assert var33 is not None
        var34 = module0.tzUTC()
        assert var34 is not None
        var35 = False
        var36 = var34.dst(var35)
        assert var36 is not None
        var37 = True
        var38 = {var37: var37, var37: var37, var37: var37, var37: var37}
        var39 = module0.tzUTC()
        assert var39 is not None
        var40 = var39.utcoffset(var38)
        assert var40 is not None
        var41 = None
        var42 = var41,
        var43 = module0.tzUTC()
        assert var43 is not None
        var44 = var43.dst(var42)
        assert var44 is not None
        var45 = b'\x0b@\xa8\x92\x18\xf75~y\xb6\xfbJ\x81\t'
        var46 = module0.utc_aware(var45)
        assert var46 is not None
        var47 = -1473.5683
        var48 = module0.utc_aware(var47)
        assert var48 is not None
        var49 = module0.utc_method(**var9)
    except BaseException:
        pass


def test_case_269():
    try:
        var0 = None
        var1 = module0.tzUTC()
        assert var1 is not None
        var2 = var1.utcoffset(var0)
        assert var2 is not None
        var3 = None
        var4 = module0.tzUTC()
        assert var4 is not None
        var5 = var4.utcoffset(var3)
        assert var5 is not None
        var6 = None
        var7 = var4.utcoffset(var6)
        assert var7 is not None
        var8 = module0.utc_aware(var6)
        assert var8 is not None
        var9 = 2074
        var10 = module0.tzUTC()
        assert var10 is not None
        var11 = var10.utcoffset(var9)
        assert var11 is not None
        var12 = module0.tzUTC()
        assert var12 is not None
        var13 = -2019
        var14 = None
        var15 = [var14]
        var16 = module0.tzUTC(*var15)
        assert var16 is not None
        var17 = var16.dst(var13)
        assert var17 is not None
        var18 = module0.tzUTC()
        assert var18 is not None
        var19 = {var17, var18}
        var20 = module0.utc_aware(var19)
        assert var20 is not None
        var21 = 0.8
        var22 = {var21: var21, var21: var21, var21: var21, var21: var21}
        var23 = module0.tzUTC()
        assert var23 is not None
        var24 = var23.utcoffset(var22)
        assert var24 is not None
        var25 = module0.utc_method()
    except BaseException:
        pass


def test_case_270():
    try:
        var0 = -575
        var1 = module0.utc_aware(var0)
        assert var1 is not None
        var2 = 'B*:(S=T7\t]!;+~hHz'
        var3 = module0.tzUTC()
        assert var3 is not None
        var4 = var3.utcoffset(var2)
        assert var4 is not None
        var5 = 'DELETE'
        var6 = [var0, var5]
        var7 = {var3: var2, var3: var2, var6: var1, var5: var6}
    except BaseException:
        pass


def test_case_271():
    try:
        var0 = '{R;IM&v#5SGyZ'
        var1 = {var0: var0, var0: var0}
        var2 = module0.tzUTC(**var1)
        assert var2 is not None
        var3 = None
        var4 = module0.isoformat(var3)
    except BaseException:
        pass


def test_case_272():
    try:
        var0 = None
        var1 = {}
        var2 = module0.tzUTC(**var1)
        assert var2 is not None
        var3 = var2.dst(var0)
        assert var3 is not None
        var4 = b'J\xc2-p\xc7l\xa7\xcd\xa7 \xacM>\xbc\xbb'
        var5 = {}
        var6 = module0.tzUTC(**var5)
        assert var6 is not None
        var7 = var6.dst(var4)
        assert var7 is not None
        var8 = -575
        var9 = module0.utc_aware(var8)
        assert var9 is not None
        var10 = 'B*:(S=T7\t]!;+~hHz'
        var11 = module0.tzUTC()
        assert var11 is not None
        var12 = var11.utcoffset(var10)
        assert var12 is not None
        var13 = None
        var14 = module0.tzUTC()
        assert var14 is not None
        var15 = var14.utcoffset(var13)
        assert var15 is not None
        var16 = module0.tzUTC()
        assert var16 is not None
        var17 = module0.tzUTC()
        assert var17 is not None
        var18 = var17.utcoffset(var16)
        assert var18 is not None
        var19 = -2019
        var20 = None
        var21 = [var20]
        var22 = module0.tzUTC(*var21)
        assert var22 is not None
        var23 = var22.dst(var19)
        assert var23 is not None
        var24 = {var23: var21, var23: var19}
        var25 = module0.utc_aware(var24)
        assert var25 is not None
        var26 = module0.tzUTC()
        assert var26 is not None
        var27 = module0.tzUTC()
        assert var27 is not None
        var28 = None
        var29 = {}
        var30 = module0.tzUTC(**var29)
        assert var30 is not None
        var31 = var30.dst(var28)
        assert var31 is not None
        var32 = [var28, var29, var31]
        var33 = module0.tzUTC(*var32)
        assert var33 is not None
        var34 = None
        var35 = var33.dst(var34)
        assert var35 is not None
        var36 = -416
        var37 = {var36, var36}
        var38 = [var37, var36]
        var39 = b'7\r\xbf\xc5\x83P\xd2\x1fZ8\x1e\xf8 \xb1@\xe4kg'
        var40 = [var39, var39, var39]
        var41 = module0.tzUTC(*var40)
        assert var41 is not None
        var42 = var41.dst(var38)
        assert var42 is not None
        var43 = -2060.41
        var44 = var41.utcoffset(var43)
        assert var44 is not None
        var45 = None
        var46 = 'dLwQ\tr^j{?RfIi h~Z:'
        var47 = [var46, var46]
        var48 = module0.tzUTC(*var47)
        assert var48 is not None
        var49 = var48.utcoffset(var45)
        assert var49 is not None
        var50 = 2994
        var51 = module0.utc_aware(var50)
        assert var51 is not None
        var52 = False
        var53 = module0.isoformat(var52)
    except BaseException:
        pass


def test_case_273():
    try:
        var0 = 240.5
        var1 = 'X?'
        var2 = [var0, var0, var0, var1]
        var3 = module0.tzUTC()
        assert var3 is not None
        var4 = ()
        var5 = module0.tzUTC()
        assert var5 is not None
        var6 = 'iU^-d5[.W\nBf*z('
        var7 = {var2: var5, var4: var2, var3: var6, var1: var2}
    except BaseException:
        pass
