# Automatically generated by Pynguin.
from notebook  import config_manager as module0


def test_case_0():
    try:
        var0 = module0.BaseJSONConfigManager()
        assert var0 is not None
        var1 = module0.BaseJSONConfigManager()
        assert var1 is not None
        var2 = var1.get(var0)
    except BaseException:
        pass


def test_case_1():
    try:
        var0 = 1603.061
        var1 = module0.remove_defaults(var0, var0)
    except BaseException:
        pass


def test_case_2():
    try:
        var0 = '3{X!s04'
        var1 = 'resources'
        var2 = module0.recursive_update(var0, var1)
    except BaseException:
        pass


def test_case_3():
    try:
        var0 = ''
        var1 = module0.BaseJSONConfigManager()
        assert var1 is not None
        var2 = var1.get(var0)
        assert var2 is not None
        var3 = module0.BaseJSONConfigManager()
        assert var3 is not None
        var4 = ''
        var5 = module0.BaseJSONConfigManager()
        assert var5 is not None
        var6 = var5.get(var4)
        assert var6 is not None
        var7 = module0.BaseJSONConfigManager()
        assert var7 is not None
        var8 = var7.file_name(var4)
        assert var8 == './.json'
        var9 = ''
        var10 = module0.BaseJSONConfigManager()
        assert var10 is not None
        var11 = var10.get(var9)
        assert var11 is not None
        var12 = module0.BaseJSONConfigManager()
        assert var12 is not None
        var13 = None
        var14 = var13,
        var15 = var12.update(var10, var14)
    except BaseException:
        pass


def test_case_4():
    try:
        var0 = ''
        var1 = module0.BaseJSONConfigManager()
        assert var1 is not None
        var2 = var1.get(var0)
        assert var2 is not None
        var3 = module0.BaseJSONConfigManager()
        assert var3 is not None
        var4 = b'A\x14\xfd\x08\xec\x866\x10\x96\x1e\xc5]^,\xcb\xb4'
        var5 = 404
        var6 = [var3, var5, var2, var3]
        var7 = module0.recursive_update(var4, var6)
    except BaseException:
        pass


def test_case_5():
    try:
        var0 = ''
        var1 = module0.BaseJSONConfigManager()
        assert var1 is not None
        var2 = var1.get(var0)
        assert var2 is not None
        var3 = module0.BaseJSONConfigManager()
        assert var3 is not None
        var4 = ''
        var5 = module0.BaseJSONConfigManager()
        assert var5 is not None
        var6 = var5.get(var4)
        assert var6 is not None
        var7 = module0.BaseJSONConfigManager()
        assert var7 is not None
        var8 = ''
        var9 = module0.BaseJSONConfigManager()
        assert var9 is not None
        var10 = var9.get(var8)
        assert var10 is not None
        var11 = module0.BaseJSONConfigManager()
        assert var11 is not None
        var12 = var11.file_name(var8)
        assert var12 == './.json'
        var13 = ''
        var14 = module0.BaseJSONConfigManager()
        assert var14 is not None
        var15 = var14.get(var13)
        assert var15 is not None
        var16 = 302
        var17 = module0.BaseJSONConfigManager()
        assert var17 is not None
        var18 = var17.file_name(var16)
    except BaseException:
        pass


def test_case_6():
    try:
        var0 = -2604
        var1 = {var0: var0, var0: var0}
        var2 = {var1, var0}
    except BaseException:
        pass


def test_case_7():
    try:
        var0 = None
        var1 = ''
        var2 = 'OPTIONS'
        var3 = {var1: var1, var2: var1}
        var4 = module0.BaseJSONConfigManager(**var3)
        assert var4 is not None
        var5 = var4.directory(var0)
    except BaseException:
        pass


def test_case_8():
    try:
        var0 = False
        var1 = 'creating checkpoint for %s'
        var2 = 'Timeout waiting for restart'
        var3 = '8KA:;)|an'
        var4 = {var1: var1, var2: var1, var3: var3, var3: var1}
        var5 = module0.BaseJSONConfigManager(**var4)
        assert var5 is not None
        var6 = var5.directory(var0)
    except BaseException:
        pass


def test_case_9():
    try:
        var0 = -3190.61504
        var1 = 'Wl\x0c\x0c'
        var2 = module0.remove_defaults(var0, var1)
    except BaseException:
        pass


def test_case_10():
    try:
        var0 = ''
        var1 = module0.BaseJSONConfigManager()
        assert var1 is not None
        var2 = var1.get(var0)
        assert var2 is not None
        var3 = module0.BaseJSONConfigManager()
        assert var3 is not None
        var4 = ''
        var5 = module0.BaseJSONConfigManager()
        assert var5 is not None
        var6 = var5.get(var4)
        assert var6 is not None
        var7 = module0.BaseJSONConfigManager()
        assert var7 is not None
        var8 = var7.file_name(var4)
        assert var8 == './.json'
        var9 = ''
        var10 = module0.BaseJSONConfigManager()
        assert var10 is not None
        var11 = var10.get(var9)
        assert var11 is not None
        var12 = module0.BaseJSONConfigManager()
        assert var12 is not None
        var13 = 'K&H94v*%\r'
        var14 = {var13: var13, var13: var13, var13: var13}
        var15 = module0.BaseJSONConfigManager(**var14)
        assert var15 is not None
        var16 = var15.ensure_config_dir_exists()
        assert var16 is None
        var17 = module0.BaseJSONConfigManager()
        assert var17 is not None
        var18 = {var7, var13, var9, var8}
        var19 = 'Content-Security-Policy'
        var20 = -4113.80226
        var21 = var18, var18, var19, var20
        var22 = False
        var23 = module0.remove_defaults(var21, var22)
    except BaseException:
        pass


def test_case_11():
    try:
        var0 = ''
        var1 = module0.BaseJSONConfigManager()
        assert var1 is not None
        var2 = var1.get(var0)
        assert var2 is not None
        var3 = module0.BaseJSONConfigManager()
        assert var3 is not None
        var4 = 'K&H94v*%\r'
        var5 = {var4: var4, var4: var4, var4: var4}
        var6 = module0.BaseJSONConfigManager(**var5)
        assert var6 is not None
        var7 = var6.ensure_config_dir_exists()
        assert var7 is None
        var8 = module0.BaseJSONConfigManager()
        assert var8 is not None
        var9 = set()
        var10 = var1.file_name(var9)
    except BaseException:
        pass


def test_case_12():
    try:
        var0 = module0.BaseJSONConfigManager()
        assert var0 is not None
        var1 = 'K&H94v*%\r'
        var2 = {var1: var1, var1: var1, var1: var1}
        var3 = module0.BaseJSONConfigManager(**var2)
        assert var3 is not None
        var4 = var3.ensure_config_dir_exists()
        assert var4 is None
        var5 = ''
        var6 = module0.BaseJSONConfigManager()
        assert var6 is not None
        var7 = var6.get(var5)
        assert var7 is not None
        var8 = module0.BaseJSONConfigManager()
        assert var8 is not None
        var9 = ''
        var10 = module0.BaseJSONConfigManager()
        assert var10 is not None
        var11 = var10.get(var9)
        assert var11 is not None
        var12 = module0.BaseJSONConfigManager()
        assert var12 is not None
        var13 = var12.file_name(var9)
        assert var13 == './.json'
        var14 = {var8}
        var15 = -1130.8
        var16 = [var10, var1]
        var17 = var14, var3, var15, var16
        var18 = module0.remove_defaults(var17, var1)
    except BaseException:
        pass


def test_case_13():
    try:
        var0 = ''
        var1 = module0.BaseJSONConfigManager()
        assert var1 is not None
        var2 = var1.get(var0)
        assert var2 is not None
        var3 = ''
        var4 = module0.BaseJSONConfigManager()
        assert var4 is not None
        var5 = var4.get(var3)
        assert var5 is not None
        var6 = module0.BaseJSONConfigManager()
        assert var6 is not None
        var7 = ''
        var8 = module0.BaseJSONConfigManager()
        assert var8 is not None
        var9 = var8.get(var7)
        assert var9 is not None
        var10 = module0.BaseJSONConfigManager()
        assert var10 is not None
        var11 = ''
        var12 = module0.BaseJSONConfigManager()
        assert var12 is not None
        var13 = var12.get(var11)
        assert var13 is not None
        var14 = module0.BaseJSONConfigManager()
        assert var14 is not None
        var15 = var14.file_name(var11)
        assert var15 == './.json'
        var16 = ''
        var17 = module0.BaseJSONConfigManager()
        assert var17 is not None
        var18 = var17.get(var16)
        assert var18 is not None
        var19 = module0.BaseJSONConfigManager()
        assert var19 is not None
        var20 = module0.BaseJSONConfigManager()
        assert var20 is not None
        var21 = module0.BaseJSONConfigManager()
        assert var21 is not None
        var22 = 'K&H94v*%\r'
        var23 = {var22: var22, var22: var22, var22: var22}
        var24 = module0.BaseJSONConfigManager(**var23)
        assert var24 is not None
        var25 = var24.ensure_config_dir_exists()
        assert var25 is None
        var26 = 834.11658
        var27 = var4.update(var26, var11)
    except BaseException:
        pass


def test_case_14():
    try:
        var0 = ''
        var1 = module0.BaseJSONConfigManager()
        assert var1 is not None
        var2 = var1.get(var0)
        assert var2 is not None
        var3 = module0.BaseJSONConfigManager()
        assert var3 is not None
        var4 = ''
        var5 = module0.BaseJSONConfigManager()
        assert var5 is not None
        var6 = var5.get(var4)
        assert var6 is not None
        var7 = module0.BaseJSONConfigManager()
        assert var7 is not None
        var8 = module0.BaseJSONConfigManager()
        assert var8 is not None
        var9 = module0.BaseJSONConfigManager()
        assert var9 is not None
        var10 = ''
        var11 = module0.BaseJSONConfigManager()
        assert var11 is not None
        var12 = var11.get(var10)
        assert var12 is not None
        var13 = module0.BaseJSONConfigManager()
        assert var13 is not None
        var14 = ''
        var15 = module0.BaseJSONConfigManager()
        assert var15 is not None
        var16 = var15.get(var14)
        assert var16 is not None
        var17 = module0.BaseJSONConfigManager()
        assert var17 is not None
        var18 = var17.file_name(var14)
        assert var18 == './.json'
        var19 = ''
        var20 = module0.BaseJSONConfigManager()
        assert var20 is not None
        var21 = var20.get(var19)
        assert var21 is not None
        var22 = b''
        var23 = var22,
        var24 = 1342
        var25 = var8.set(var23, var24)
    except BaseException:
        pass


def test_case_15():
    try:
        var0 = 'K&H94v*%\r'
        var1 = {var0: var0, var0: var0, var0: var0}
        var2 = module0.BaseJSONConfigManager(**var1)
        assert var2 is not None
        var3 = var2.ensure_config_dir_exists()
        assert var3 is None
        var4 = ''
        var5 = module0.BaseJSONConfigManager()
        assert var5 is not None
        var6 = var5.get(var4)
        assert var6 is not None
        var7 = module0.BaseJSONConfigManager()
        assert var7 is not None
        var8 = {var2, var5, var7}
        var9 = module0.BaseJSONConfigManager(**var1)
        assert var9 is not None
        var10 = var9.file_name(var8)
    except BaseException:
        pass


def test_case_16():
    try:
        var0 = 30.0
        var1 = [var0, var0]
        var2 = 'EZ'
        var3 = module0.BaseJSONConfigManager()
        assert var3 is not None
        var4 = var3.update(var1, var2)
    except BaseException:
        pass


def test_case_17():
    try:
        var0 = 'K&H94v*%\r'
        var1 = {var0: var0, var0: var0, var0: var0}
        var2 = module0.BaseJSONConfigManager(**var1)
        assert var2 is not None
        var3 = var2.ensure_config_dir_exists()
        assert var3 is None
        var4 = ''
        var5 = module0.BaseJSONConfigManager()
        assert var5 is not None
        var6 = var5.get(var4)
        assert var6 is not None
        var7 = module0.BaseJSONConfigManager()
        assert var7 is not None
        var8 = module0.BaseJSONConfigManager()
        assert var8 is not None
        var9 = module0.BaseJSONConfigManager()
        assert var9 is not None
        var10 = ''
        var11 = module0.BaseJSONConfigManager()
        assert var11 is not None
        var12 = var11.get(var10)
        assert var12 is not None
        var13 = module0.BaseJSONConfigManager()
        assert var13 is not None
        var14 = ''
        var15 = module0.BaseJSONConfigManager()
        assert var15 is not None
        var16 = var15.get(var14)
        assert var16 is not None
        var17 = module0.BaseJSONConfigManager()
        assert var17 is not None
        var18 = var17.file_name(var14)
        assert var18 == './.json'
        var19 = module0.BaseJSONConfigManager()
        assert var19 is not None
        var20 = ''
        var21 = module0.BaseJSONConfigManager()
        assert var21 is not None
        var22 = var21.get(var20)
        assert var22 is not None
        var23 = 909
        var24 = set()
        var25 = var13.set(var23, var24)
    except BaseException:
        pass


def test_case_18():
    try:
        var0 = ''
        var1 = module0.BaseJSONConfigManager()
        assert var1 is not None
        var2 = var1.get(var0)
        assert var2 is not None
        var3 = ''
        var4 = module0.BaseJSONConfigManager()
        assert var4 is not None
        var5 = var4.get(var3)
        assert var5 is not None
        var6 = module0.BaseJSONConfigManager()
        assert var6 is not None
        var7 = module0.BaseJSONConfigManager()
        assert var7 is not None
        var8 = module0.BaseJSONConfigManager()
        assert var8 is not None
        var9 = 'K&H94v*%\r'
        var10 = {var9: var9, var9: var9, var9: var9}
        var11 = module0.BaseJSONConfigManager(**var10)
        assert var11 is not None
        var12 = var11.ensure_config_dir_exists()
        assert var12 is None
        var13 = ''
        var14 = module0.BaseJSONConfigManager()
        assert var14 is not None
        var15 = var14.get(var13)
        assert var15 is not None
        var16 = module0.BaseJSONConfigManager()
        assert var16 is not None
        var17 = module0.BaseJSONConfigManager()
        assert var17 is not None
        var18 = True
        var19 = b'e\xc1"\xa1\x1a=\x8eNh\xe79\x06\xc0\xbak\xe1'
        var20 = var11.set(var18, var19)
    except BaseException:
        pass


def test_case_19():
    try:
        var0 = ''
        var1 = module0.BaseJSONConfigManager()
        assert var1 is not None
        var2 = var1.get(var0)
        assert var2 is not None
        var3 = module0.BaseJSONConfigManager()
        assert var3 is not None
        var4 = ''
        var5 = module0.BaseJSONConfigManager()
        assert var5 is not None
        var6 = var5.get(var4)
        assert var6 is not None
        var7 = module0.BaseJSONConfigManager()
        assert var7 is not None
        var8 = var7.file_name(var4)
        assert var8 == './.json'
        var9 = 'K&H94v*%\r'
        var10 = {var9: var9, var9: var9, var9: var9}
        var11 = module0.BaseJSONConfigManager(**var10)
        assert var11 is not None
        var12 = var11.ensure_config_dir_exists()
        assert var12 is None
        var13 = ''
        var14 = module0.BaseJSONConfigManager()
        assert var14 is not None
        var15 = var14.get(var13)
        assert var15 is not None
        var16 = module0.BaseJSONConfigManager()
        assert var16 is not None
        var17 = ''
        var18 = module0.BaseJSONConfigManager()
        assert var18 is not None
        var19 = var18.get(var17)
        assert var19 is not None
        var20 = ''
        var21 = module0.BaseJSONConfigManager()
        assert var21 is not None
        var22 = var21.get(var20)
        assert var22 is not None
        var23 = module0.BaseJSONConfigManager()
        assert var23 is not None
        var24 = module0.BaseJSONConfigManager()
        assert var24 is not None
        var25 = module0.BaseJSONConfigManager()
        assert var25 is not None
        var26 = module0.BaseJSONConfigManager()
        assert var26 is not None
        var27 = {var1: var9}
        var28 = {var20, var20, var14}
        var29 = var25.get(var27, var28)
    except BaseException:
        pass


def test_case_20():
    try:
        var0 = 'K&H94v*%\r'
        var1 = {var0: var0, var0: var0, var0: var0}
        var2 = module0.BaseJSONConfigManager(**var1)
        assert var2 is not None
        var3 = var2.ensure_config_dir_exists()
        assert var3 is None
        var4 = ''
        var5 = module0.BaseJSONConfigManager()
        assert var5 is not None
        var6 = var5.get(var4)
        assert var6 is not None
        var7 = ''
        var8 = module0.BaseJSONConfigManager()
        assert var8 is not None
        var9 = var8.get(var7)
        assert var9 is not None
        var10 = module0.BaseJSONConfigManager()
        assert var10 is not None
        var11 = module0.BaseJSONConfigManager()
        assert var11 is not None
        var12 = module0.BaseJSONConfigManager()
        assert var12 is not None
        var13 = ''
        var14 = module0.BaseJSONConfigManager()
        assert var14 is not None
        var15 = var14.get(var13)
        assert var15 is not None
        var16 = module0.BaseJSONConfigManager()
        assert var16 is not None
        var17 = module0.BaseJSONConfigManager()
        assert var17 is not None
        var18 = False
        var19 = 'cHaV"7(htY0E'
        var20 = module0.remove_defaults(var18, var19)
    except BaseException:
        pass


def test_case_21():
    try:
        var0 = ''
        var1 = module0.BaseJSONConfigManager()
        assert var1 is not None
        var2 = var1.get(var0)
        assert var2 is not None
        var3 = module0.BaseJSONConfigManager()
        assert var3 is not None
        var4 = module0.BaseJSONConfigManager()
        assert var4 is not None
        var5 = module0.BaseJSONConfigManager()
        assert var5 is not None
        var6 = module0.BaseJSONConfigManager()
        assert var6 is not None
        var7 = []
        var8 = var6.file_name(var7)
    except BaseException:
        pass


def test_case_22():
    try:
        var0 = ''
        var1 = module0.BaseJSONConfigManager()
        assert var1 is not None
        var2 = var1.get(var0)
        assert var2 is not None
        var3 = module0.BaseJSONConfigManager()
        assert var3 is not None
        var4 = module0.BaseJSONConfigManager()
        assert var4 is not None
        var5 = module0.BaseJSONConfigManager()
        assert var5 is not None
        var6 = True
        var7 = var3.directory(var6)
    except BaseException:
        pass


def test_case_23():
    try:
        var0 = ''
        var1 = module0.BaseJSONConfigManager()
        assert var1 is not None
        var2 = var1.get(var0)
        assert var2 is not None
        var3 = module0.BaseJSONConfigManager()
        assert var3 is not None
        var4 = ''
        var5 = module0.BaseJSONConfigManager()
        assert var5 is not None
        var6 = var5.get(var4)
        assert var6 is not None
        var7 = module0.BaseJSONConfigManager()
        assert var7 is not None
        var8 = ''
        var9 = module0.BaseJSONConfigManager()
        assert var9 is not None
        var10 = var9.get(var8)
        assert var10 is not None
        var11 = module0.BaseJSONConfigManager()
        assert var11 is not None
        var12 = var11.file_name(var8)
        assert var12 == './.json'
        var13 = 'h[=S=bW-l45pw"'
        var14 = b'%\x8b '
        var15 = var13, var11, var14
        var16 = var15, var3, var14
        var17 = set()
        var18 = var7.set(var16, var17)
    except BaseException:
        pass


def test_case_24():
    try:
        var0 = module0.BaseJSONConfigManager()
        assert var0 is not None
        var1 = False
        var2 = "?K}%%KxLYy'f"
        var3 = module0.remove_defaults(var1, var2)
    except BaseException:
        pass


def test_case_25():
    try:
        var0 = ''
        var1 = module0.BaseJSONConfigManager()
        assert var1 is not None
        var2 = var1.get(var0)
        assert var2 is not None
        var3 = module0.BaseJSONConfigManager()
        assert var3 is not None
        var4 = var3.ensure_config_dir_exists()
        assert var4 is None
        var5 = module0.BaseJSONConfigManager()
        assert var5 is not None
        var6 = ''
        var7 = module0.BaseJSONConfigManager()
        assert var7 is not None
        var8 = var7.get(var6)
        assert var8 is not None
        var9 = ''
        var10 = module0.BaseJSONConfigManager()
        assert var10 is not None
        var11 = var10.get(var9)
        assert var11 is not None
        var12 = module0.BaseJSONConfigManager()
        assert var12 is not None
        var13 = ''
        var14 = module0.BaseJSONConfigManager()
        assert var14 is not None
        var15 = var14.get(var13)
        assert var15 is not None
        var16 = module0.BaseJSONConfigManager()
        assert var16 is not None
        var17 = module0.BaseJSONConfigManager()
        assert var17 is not None
        var18 = module0.BaseJSONConfigManager()
        assert var18 is not None
        var19 = ''
        var20 = module0.BaseJSONConfigManager()
        assert var20 is not None
        var21 = var20.get(var19)
        assert var21 is not None
        var22 = module0.BaseJSONConfigManager()
        assert var22 is not None
        var23 = ''
        var24 = module0.BaseJSONConfigManager()
        assert var24 is not None
        var25 = var24.get(var23)
        assert var25 is not None
        var26 = module0.BaseJSONConfigManager()
        assert var26 is not None
        var27 = var26.file_name(var23)
        assert var27 == './.json'
        var28 = -968.1321
        var29 = -3086.0
        var30 = 403
        var31 = {var4: var14}
        var32 = True
        var33 = b't\x9c\x0c1mN\x92\x8c\xe63\xc2~g*\xfe;\xdbB'
        var34 = var16, var31, var32, var33
        var35 = var28, var29, var30, var34
        var36 = var7.update(var35, var19)
    except BaseException:
        pass


def test_case_26():
    try:
        var0 = 'K&H94v*%\r'
        var1 = {var0: var0, var0: var0, var0: var0}
        var2 = module0.BaseJSONConfigManager(**var1)
        assert var2 is not None
        var3 = var2.ensure_config_dir_exists()
        assert var3 is None
        var4 = ''
        var5 = module0.BaseJSONConfigManager()
        assert var5 is not None
        var6 = var5.get(var4)
        assert var6 is not None
        var7 = ''
        var8 = module0.BaseJSONConfigManager()
        assert var8 is not None
        var9 = var8.get(var7)
        assert var9 is not None
        var10 = module0.BaseJSONConfigManager()
        assert var10 is not None
        var11 = module0.BaseJSONConfigManager()
        assert var11 is not None
        var12 = module0.BaseJSONConfigManager()
        assert var12 is not None
        var13 = ''
        var14 = module0.BaseJSONConfigManager()
        assert var14 is not None
        var15 = var14.get(var13)
        assert var15 is not None
        var16 = module0.BaseJSONConfigManager()
        assert var16 is not None
        var17 = var16.ensure_config_dir_exists()
        assert var17 is None
        var18 = module0.BaseJSONConfigManager()
        assert var18 is not None
        var19 = (
            b'\x86\x1f\x07\xe5$S\xdft\xf0M\xfa\xf5\x12\xb0\xb1\x9bv\xea9\x95')
        var20 = var18.file_name(var19)
    except BaseException:
        pass


def test_case_27():
    try:
        var0 = ''
        var1 = module0.BaseJSONConfigManager()
        assert var1 is not None
        var2 = var1.get(var0)
        assert var2 is not None
        var3 = module0.BaseJSONConfigManager()
        assert var3 is not None
        var4 = module0.BaseJSONConfigManager()
        assert var4 is not None
        var5 = module0.BaseJSONConfigManager()
        assert var5 is not None
        var6 = ''
        var7 = module0.BaseJSONConfigManager()
        assert var7 is not None
        var8 = var7.get(var6)
        assert var8 is not None
        var9 = module0.BaseJSONConfigManager()
        assert var9 is not None
        var10 = var9.ensure_config_dir_exists()
        assert var10 is None
        var11 = 'K&H94v*%\r'
        var12 = {var11: var11, var11: var11, var11: var11}
        var13 = module0.BaseJSONConfigManager(**var12)
        assert var13 is not None
        var14 = var13.ensure_config_dir_exists()
        assert var14 is None
        var15 = module0.BaseJSONConfigManager()
        assert var15 is not None
        var16 = False
        var17 = var1, var16, var6, var3
        var18 = var4.directory(var17)
    except BaseException:
        pass


def test_case_28():
    try:
        var0 = module0.BaseJSONConfigManager()
        assert var0 is not None
        var1 = ''
        var2 = module0.BaseJSONConfigManager()
        assert var2 is not None
        var3 = var2.get(var1)
        assert var3 is not None
        var4 = module0.BaseJSONConfigManager()
        assert var4 is not None
        var5 = ''
        var6 = module0.BaseJSONConfigManager()
        assert var6 is not None
        var7 = var6.get(var5)
        assert var7 is not None
        var8 = module0.BaseJSONConfigManager()
        assert var8 is not None
        var9 = var8.file_name(var5)
        assert var9 == './.json'
        var10 = ''
        var11 = module0.BaseJSONConfigManager()
        assert var11 is not None
        var12 = var11.get(var10)
        assert var12 is not None
        var13 = b'Z{6\xb9U\xd9\xf4*\x1f\x06}'
        var14 = 3818.11366
        var15 = module0.remove_defaults(var13, var14)
    except BaseException:
        pass


def test_case_29():
    try:
        var0 = ''
        var1 = module0.BaseJSONConfigManager()
        assert var1 is not None
        var2 = var1.get(var0)
        assert var2 is not None
        var3 = module0.BaseJSONConfigManager()
        assert var3 is not None
        var4 = ''
        var5 = module0.BaseJSONConfigManager()
        assert var5 is not None
        var6 = var5.get(var4)
        assert var6 is not None
        var7 = module0.BaseJSONConfigManager()
        assert var7 is not None
        var8 = var7.file_name(var4)
        assert var8 == './.json'
        var9 = ''
        var10 = module0.BaseJSONConfigManager()
        assert var10 is not None
        var11 = var10.get(var9)
        assert var11 is not None
        var12 = var10.ensure_config_dir_exists()
        assert var12 is None
        var13 = b'\xf3\\f'
        var14 = 2468
        var15 = var10.update(var13, var14)
    except BaseException:
        pass


def test_case_30():
    try:
        var0 = ''
        var1 = module0.BaseJSONConfigManager()
        assert var1 is not None
        var2 = var1.get(var0)
        assert var2 is not None
        var3 = var1.ensure_config_dir_exists()
        assert var3 is None
        var4 = ''
        var5 = module0.BaseJSONConfigManager()
        assert var5 is not None
        var6 = var5.get(var4)
        assert var6 is not None
        var7 = module0.BaseJSONConfigManager()
        assert var7 is not None
        var8 = var7.ensure_config_dir_exists()
        assert var8 is None
        var9 = ''
        var10 = module0.BaseJSONConfigManager()
        assert var10 is not None
        var11 = var10.get(var9)
        assert var11 is not None
        var12 = None
        var13 = b'c\xf5 \xcc)\x13\xc4\xa6\x01\xc3\xba\xc3\xc1h'
        var14 = var7.set(var12, var13)
    except BaseException:
        pass


def test_case_31():
    try:
        var0 = ''
        var1 = module0.BaseJSONConfigManager()
        assert var1 is not None
        var2 = var1.get(var0)
        assert var2 is not None
        var3 = module0.BaseJSONConfigManager()
        assert var3 is not None
        var4 = ''
        var5 = module0.BaseJSONConfigManager()
        assert var5 is not None
        var6 = var5.get(var4)
        assert var6 is not None
        var7 = var5.ensure_config_dir_exists()
        assert var7 is None
        var8 = ''
        var9 = module0.BaseJSONConfigManager()
        assert var9 is not None
        var10 = var9.get(var8)
        assert var10 is not None
        var11 = module0.BaseJSONConfigManager()
        assert var11 is not None
        var12 = ''
        var13 = module0.BaseJSONConfigManager()
        assert var13 is not None
        var14 = var13.get(var12)
        assert var14 is not None
        var15 = module0.BaseJSONConfigManager()
        assert var15 is not None
        var16 = var15.file_name(var12)
        assert var16 == './.json'
        var17 = var11.directory(var3)
    except BaseException:
        pass


def test_case_32():
    try:
        var0 = ''
        var1 = module0.BaseJSONConfigManager()
        assert var1 is not None
        var2 = var1.get(var0)
        assert var2 is not None
        var3 = ''
        var4 = module0.BaseJSONConfigManager()
        assert var4 is not None
        var5 = var4.get(var3)
        assert var5 is not None
        var6 = var4.ensure_config_dir_exists()
        assert var6 is None
        var7 = var4.ensure_config_dir_exists()
        assert var7 is None
        var8 = {var0}
        var9 = var4.file_name(var8)
    except BaseException:
        pass


def test_case_33():
    try:
        var0 = ''
        var1 = module0.BaseJSONConfigManager()
        assert var1 is not None
        var2 = var1.get(var0)
        assert var2 is not None
        var3 = var1.ensure_config_dir_exists()
        assert var3 is None
        var4 = var1.ensure_config_dir_exists()
        assert var4 is None
        var5 = ''
        var6 = module0.BaseJSONConfigManager()
        assert var6 is not None
        var7 = var6.get(var5)
        assert var7 is not None
        var8 = ''
        var9 = module0.BaseJSONConfigManager()
        assert var9 is not None
        var10 = var9.get(var8)
        assert var10 is not None
        var11 = module0.BaseJSONConfigManager()
        assert var11 is not None
        var12 = ''
        var13 = module0.BaseJSONConfigManager()
        assert var13 is not None
        var14 = var13.get(var12)
        assert var14 is not None
        var15 = module0.BaseJSONConfigManager()
        assert var15 is not None
        var16 = var15.file_name(var12)
        assert var16 == './.json'
        var17 = 'K&H94v*%\r'
        var18 = {var17: var17, var17: var17, var17: var17}
        var19 = module0.BaseJSONConfigManager(**var18)
        assert var19 is not None
        var20 = var19.ensure_config_dir_exists()
        assert var20 is None
        var21 = False
        var22 = -2504
        var23 = None
        var24 = var23, var22, var23
        var25 = 'm1Em:!.W@xH,OH3Y$!='
        var26 = var21, var22, var24, var25
        var27 = module0.BaseJSONConfigManager()
        assert var27 is not None
        var28 = var27.directory(var26)
    except BaseException:
        pass


def test_case_34():
    try:
        var0 = 'K&H94v*%\r'
        var1 = {var0: var0, var0: var0, var0: var0}
        var2 = module0.BaseJSONConfigManager(**var1)
        assert var2 is not None
        var3 = var2.ensure_config_dir_exists()
        assert var3 is None
        var4 = ''
        var5 = module0.BaseJSONConfigManager()
        assert var5 is not None
        var6 = var5.get(var4)
        assert var6 is not None
        var7 = var5.ensure_config_dir_exists()
        assert var7 is None
        var8 = ''
        var9 = module0.BaseJSONConfigManager()
        assert var9 is not None
        var10 = var9.get(var8)
        assert var10 is not None
        var11 = var9.ensure_config_dir_exists()
        assert var11 is None
        var12 = var9.ensure_config_dir_exists()
        assert var12 is None
        var13 = ''
        var14 = module0.BaseJSONConfigManager()
        assert var14 is not None
        var15 = var14.get(var13)
        assert var15 is not None
        var16 = module0.BaseJSONConfigManager()
        assert var16 is not None
        var17 = module0.BaseJSONConfigManager()
        assert var17 is not None
        var18 = module0.BaseJSONConfigManager()
        assert var18 is not None
        var19 = True
        var20 = var14.directory(var19)
    except BaseException:
        pass


def test_case_35():
    try:
        var0 = ''
        var1 = module0.BaseJSONConfigManager()
        assert var1 is not None
        var2 = var1.get(var0)
        assert var2 is not None
        var3 = module0.BaseJSONConfigManager()
        assert var3 is not None
        var4 = ''
        var5 = module0.BaseJSONConfigManager()
        assert var5 is not None
        var6 = var5.get(var4)
        assert var6 is not None
        var7 = module0.BaseJSONConfigManager()
        assert var7 is not None
        var8 = var7.file_name(var4)
        assert var8 == './.json'
        var9 = ''
        var10 = module0.BaseJSONConfigManager()
        assert var10 is not None
        var11 = var10.get(var9)
        assert var11 is not None
        var12 = var10.ensure_config_dir_exists()
        assert var12 is None
        var13 = var10.ensure_config_dir_exists()
        assert var13 is None
        var14 = ''
        var15 = module0.BaseJSONConfigManager()
        assert var15 is not None
        var16 = var15.get(var14)
        assert var16 is not None
        var17 = module0.BaseJSONConfigManager()
        assert var17 is not None
        var18 = ''
        var19 = module0.BaseJSONConfigManager()
        assert var19 is not None
        var20 = var19.get(var18)
        assert var20 is not None
        var21 = 'K&H94v*%\r'
        var22 = {var21: var21, var21: var21, var21: var21}
        var23 = module0.BaseJSONConfigManager(**var22)
        assert var23 is not None
        var24 = var23.ensure_config_dir_exists()
        assert var24 is None
        var25 = ''
        var26 = module0.BaseJSONConfigManager()
        assert var26 is not None
        var27 = var26.get(var25)
        assert var27 is not None
        var28 = var26.ensure_config_dir_exists()
        assert var28 is None
        var29 = 2026
        var30 = module0.BaseJSONConfigManager()
        assert var30 is not None
        var31 = var30.directory(var29)
    except BaseException:
        pass


def test_case_36():
    try:
        var0 = ''
        var1 = module0.BaseJSONConfigManager()
        assert var1 is not None
        var2 = var1.get(var0)
        assert var2 is not None
        var3 = module0.BaseJSONConfigManager()
        assert var3 is not None
        var4 = var3.ensure_config_dir_exists()
        assert var4 is None
        var5 = module0.BaseJSONConfigManager()
        assert var5 is not None
        var6 = ''
        var7 = module0.BaseJSONConfigManager()
        assert var7 is not None
        var8 = var7.get(var6)
        assert var8 is not None
        var9 = ''
        var10 = module0.BaseJSONConfigManager()
        assert var10 is not None
        var11 = var10.get(var9)
        assert var11 is not None
        var12 = module0.BaseJSONConfigManager()
        assert var12 is not None
        var13 = ''
        var14 = module0.BaseJSONConfigManager()
        assert var14 is not None
        var15 = var14.get(var13)
        assert var15 is not None
        var16 = module0.BaseJSONConfigManager()
        assert var16 is not None
        var17 = var16.file_name(var13)
        assert var17 == './.json'
        var18 = ''
        var19 = module0.BaseJSONConfigManager()
        assert var19 is not None
        var20 = var19.get(var18)
        assert var20 is not None
        var21 = module0.BaseJSONConfigManager()
        assert var21 is not None
        var22 = var21.ensure_config_dir_exists()
        assert var22 is None
        var23 = ''
        var24 = module0.BaseJSONConfigManager()
        assert var24 is not None
        var25 = var24.get(var23)
        assert var25 is not None
        var26 = module0.BaseJSONConfigManager()
        assert var26 is not None
        var27 = ''
        var28 = module0.BaseJSONConfigManager()
        assert var28 is not None
        var29 = var28.get(var27)
        assert var29 is not None
        var30 = var28.ensure_config_dir_exists()
        assert var30 is None
        var31 = 'K&H94v*%\r'
        var32 = {var31: var31, var31: var31, var31: var31}
        var33 = module0.BaseJSONConfigManager(**var32)
        assert var33 is not None
        var34 = var33.ensure_config_dir_exists()
        assert var34 is None
        var35 = ''
        var36 = module0.BaseJSONConfigManager()
        assert var36 is not None
        var37 = var36.get(var35)
        assert var37 is not None
        var38 = module0.BaseJSONConfigManager()
        assert var38 is not None
        var39 = {var9, var23, var13}
        var40 = False
        var41 = module0.BaseJSONConfigManager()
        assert var41 is not None
        var42 = var41.set(var39, var40)
    except BaseException:
        pass


def test_case_37():
    try:
        var0 = ''
        var1 = module0.BaseJSONConfigManager()
        assert var1 is not None
        var2 = var1.get(var0)
        assert var2 is not None
        var3 = var1.ensure_config_dir_exists()
        assert var3 is None
        var4 = module0.BaseJSONConfigManager()
        assert var4 is not None
        var5 = ''
        var6 = module0.BaseJSONConfigManager()
        assert var6 is not None
        var7 = var6.get(var5)
        assert var7 is not None
        var8 = module0.BaseJSONConfigManager()
        assert var8 is not None
        var9 = module0.BaseJSONConfigManager()
        assert var9 is not None
        var10 = module0.BaseJSONConfigManager()
        assert var10 is not None
        var11 = ''
        var12 = module0.BaseJSONConfigManager()
        assert var12 is not None
        var13 = var12.get(var11)
        assert var13 is not None
        var14 = var12.ensure_config_dir_exists()
        assert var14 is None
        var15 = var12.ensure_config_dir_exists()
        assert var15 is None
        var16 = ''
        var17 = module0.BaseJSONConfigManager()
        assert var17 is not None
        var18 = var17.get(var16)
        assert var18 is not None
        var19 = module0.BaseJSONConfigManager()
        assert var19 is not None
        var20 = ''
        var21 = module0.BaseJSONConfigManager()
        assert var21 is not None
        var22 = var21.get(var20)
        assert var22 is not None
        var23 = module0.BaseJSONConfigManager()
        assert var23 is not None
        var24 = var23.file_name(var20)
        assert var24 == './.json'
        var25 = ''
        var26 = module0.BaseJSONConfigManager()
        assert var26 is not None
        var27 = var26.get(var25)
        assert var27 is not None
        var28 = module0.BaseJSONConfigManager()
        assert var28 is not None
        var29 = var28.ensure_config_dir_exists()
        assert var29 is None
        var30 = b'\xa3\xe1\x11K\xe7\x12\xa9_4\xa2b\x95I'
        var31 = b'Ro\xa3C\xfcK\xec\xa8\x04\x13\x9e\xad\x06\xce\xac\x7f2\x88s'
        var32 = {var27}
    except BaseException:
        pass


def test_case_38():
    try:
        var0 = ''
        var1 = module0.BaseJSONConfigManager()
        assert var1 is not None
        var2 = var1.get(var0)
        assert var2 is not None
        var3 = module0.BaseJSONConfigManager()
        assert var3 is not None
        var4 = var3.ensure_config_dir_exists()
        assert var4 is None
        var5 = ''
        var6 = module0.BaseJSONConfigManager()
        assert var6 is not None
        var7 = var6.get(var5)
        assert var7 is not None
        var8 = module0.BaseJSONConfigManager()
        assert var8 is not None
        var9 = module0.BaseJSONConfigManager()
        assert var9 is not None
        var10 = module0.BaseJSONConfigManager()
        assert var10 is not None
        var11 = 'K&H94v*%\r'
        var12 = {var11: var11, var11: var11, var11: var11}
        var13 = module0.BaseJSONConfigManager(**var12)
        assert var13 is not None
        var14 = var13.ensure_config_dir_exists()
        assert var14 is None
        var15 = ''
        var16 = module0.BaseJSONConfigManager()
        assert var16 is not None
        var17 = var16.get(var15)
        assert var17 is not None
        var18 = ''
        var19 = module0.BaseJSONConfigManager()
        assert var19 is not None
        var20 = var19.get(var18)
        assert var20 is not None
        var21 = module0.BaseJSONConfigManager()
        assert var21 is not None
        var22 = ''
        var23 = module0.BaseJSONConfigManager()
        assert var23 is not None
        var24 = var23.get(var22)
        assert var24 is not None
        var25 = module0.BaseJSONConfigManager()
        assert var25 is not None
        var26 = var25.file_name(var22)
        assert var26 == './.json'
        var27 = ''
        var28 = module0.BaseJSONConfigManager()
        assert var28 is not None
        var29 = var28.get(var27)
        assert var29 is not None
        var30 = module0.BaseJSONConfigManager()
        assert var30 is not None
        var31 = var30.ensure_config_dir_exists()
        assert var31 is None
        var32 = ''
        var33 = module0.BaseJSONConfigManager()
        assert var33 is not None
        var34 = var33.get(var32)
        assert var34 is not None
        var35 = module0.BaseJSONConfigManager()
        assert var35 is not None
        var36 = ''
        var37 = module0.BaseJSONConfigManager()
        assert var37 is not None
        var38 = var37.get(var36)
        assert var38 is not None
        var39 = var37.ensure_config_dir_exists()
        assert var39 is None
        var40 = module0.BaseJSONConfigManager()
        assert var40 is not None
        var41 = ''
        var42 = module0.BaseJSONConfigManager()
        assert var42 is not None
        var43 = var42.get(var41)
        assert var43 is not None
        var44 = var42.ensure_config_dir_exists()
        assert var44 is None
        var45 = var42.ensure_config_dir_exists()
        assert var45 is None
        var46 = ''
        var47 = module0.BaseJSONConfigManager()
        assert var47 is not None
        var48 = var47.get(var46)
        assert var48 is not None
        var49 = module0.BaseJSONConfigManager()
        assert var49 is not None
        var50 = module0.BaseJSONConfigManager()
        assert var50 is not None
        var51 = var50.file_name(var16)
    except BaseException:
        pass


def test_case_39():
    try:
        var0 = ''
        var1 = module0.BaseJSONConfigManager()
        assert var1 is not None
        var2 = var1.get(var0)
        assert var2 is not None
        var3 = module0.BaseJSONConfigManager()
        assert var3 is not None
        var4 = 'K&H94v*%\r'
        var5 = {var4: var4, var4: var4, var4: var4}
        var6 = module0.BaseJSONConfigManager(**var5)
        assert var6 is not None
        var7 = var6.ensure_config_dir_exists()
        assert var7 is None
        var8 = ''
        var9 = module0.BaseJSONConfigManager()
        assert var9 is not None
        var10 = var9.get(var8)
        assert var10 is not None
        var11 = module0.BaseJSONConfigManager()
        assert var11 is not None
        var12 = var11.ensure_config_dir_exists()
        assert var12 is None
        var13 = ''
        var14 = module0.BaseJSONConfigManager()
        assert var14 is not None
        var15 = var14.get(var13)
        assert var15 is not None
        var16 = ''
        var17 = module0.BaseJSONConfigManager()
        assert var17 is not None
        var18 = var17.get(var16)
        assert var18 is not None
        var19 = module0.BaseJSONConfigManager()
        assert var19 is not None
        var20 = module0.BaseJSONConfigManager()
        assert var20 is not None
        var21 = module0.BaseJSONConfigManager()
        assert var21 is not None
        var22 = set()
        var23 = var11.set(var22, var13)
    except BaseException:
        pass


def test_case_40():
    try:
        var0 = module0.BaseJSONConfigManager()
        assert var0 is not None
        var1 = ''
        var2 = module0.BaseJSONConfigManager()
        assert var2 is not None
        var3 = var2.get(var1)
        assert var3 is not None
        var4 = module0.BaseJSONConfigManager()
        assert var4 is not None
        var5 = ''
        var6 = module0.BaseJSONConfigManager()
        assert var6 is not None
        var7 = var6.get(var5)
        assert var7 is not None
        var8 = module0.BaseJSONConfigManager()
        assert var8 is not None
        var9 = var8.file_name(var5)
        assert var9 == './.json'
        var10 = ''
        var11 = module0.BaseJSONConfigManager()
        assert var11 is not None
        var12 = var11.get(var10)
        assert var12 is not None
        var13 = module0.BaseJSONConfigManager()
        assert var13 is not None
        var14 = var13.ensure_config_dir_exists()
        assert var14 is None
        var15 = ''
        var16 = module0.BaseJSONConfigManager()
        assert var16 is not None
        var17 = var16.get(var15)
        assert var17 is not None
        var18 = var16.ensure_config_dir_exists()
        assert var18 is None
        var19 = ''
        var20 = module0.BaseJSONConfigManager()
        assert var20 is not None
        var21 = var20.get(var19)
        assert var21 is not None
        var22 = var20.ensure_config_dir_exists()
        assert var22 is None
        var23 = var20.ensure_config_dir_exists()
        assert var23 is None
        var24 = ''
        var25 = module0.BaseJSONConfigManager()
        assert var25 is not None
        var26 = var25.get(var24)
        assert var26 is not None
        var27 = module0.BaseJSONConfigManager()
        assert var27 is not None
        var28 = var27.ensure_config_dir_exists()
        assert var28 is None
        var29 = ''
        var30 = module0.BaseJSONConfigManager()
        assert var30 is not None
        var31 = var30.get(var29)
        assert var31 is not None
        var32 = module0.BaseJSONConfigManager()
        assert var32 is not None
        var33 = False
        var34 = {var32: var26, var24: var24, var33: var16}
        var35 = 3766.8909
        var36 = module0.recursive_update(var34, var35)
    except BaseException:
        pass


def test_case_41():
    try:
        var0 = ''
        var1 = module0.BaseJSONConfigManager()
        assert var1 is not None
        var2 = var1.get(var0)
        assert var2 is not None
        var3 = module0.BaseJSONConfigManager()
        assert var3 is not None
        var4 = ''
        var5 = module0.BaseJSONConfigManager()
        assert var5 is not None
        var6 = var5.get(var4)
        assert var6 is not None
        var7 = module0.BaseJSONConfigManager()
        assert var7 is not None
        var8 = var7.file_name(var4)
        assert var8 == './.json'
        var9 = '1E!_=/.vy=2@'
        var10 = 'No file content provided'
        var11 = 'Z2'
        var12 = var9, var10, var11
        var13 = var3.directory(var12)
    except BaseException:
        pass


def test_case_42():
    try:
        var0 = ''
        var1 = module0.BaseJSONConfigManager()
        assert var1 is not None
        var2 = var1.get(var0)
        assert var2 is not None
        var3 = module0.BaseJSONConfigManager()
        assert var3 is not None
        var4 = var3.ensure_config_dir_exists()
        assert var4 is None
        var5 = ''
        var6 = module0.BaseJSONConfigManager()
        assert var6 is not None
        var7 = var6.get(var5)
        assert var7 is not None
        var8 = ''
        var9 = module0.BaseJSONConfigManager()
        assert var9 is not None
        var10 = var9.get(var8)
        assert var10 is not None
        var11 = module0.BaseJSONConfigManager()
        assert var11 is not None
        var12 = module0.BaseJSONConfigManager()
        assert var12 is not None
        var13 = module0.BaseJSONConfigManager()
        assert var13 is not None
        var14 = ''
        var15 = module0.BaseJSONConfigManager()
        assert var15 is not None
        var16 = var15.get(var14)
        assert var16 is not None
        var17 = module0.BaseJSONConfigManager()
        assert var17 is not None
        var18 = var17.ensure_config_dir_exists()
        assert var18 is None
        var19 = ''
        var20 = module0.BaseJSONConfigManager()
        assert var20 is not None
        var21 = var20.get(var19)
        assert var21 is not None
        var22 = module0.BaseJSONConfigManager()
        assert var22 is not None
        var23 = ''
        var24 = module0.BaseJSONConfigManager()
        assert var24 is not None
        var25 = var24.get(var23)
        assert var25 is not None
        var26 = var24.ensure_config_dir_exists()
        assert var26 is None
        var27 = 'K&H94v*%\r'
        var28 = {var27: var27, var27: var27, var27: var27}
        var29 = module0.BaseJSONConfigManager(**var28)
        assert var29 is not None
        var30 = var29.ensure_config_dir_exists()
        assert var30 is None
        var31 = ''
        var32 = module0.BaseJSONConfigManager()
        assert var32 is not None
        var33 = var32.get(var31)
        assert var33 is not None
        var34 = module0.BaseJSONConfigManager()
        assert var34 is not None
        var35 = ''
        var36 = module0.BaseJSONConfigManager()
        assert var36 is not None
        var37 = var36.get(var35)
        assert var37 is not None
        var38 = var36.ensure_config_dir_exists()
        assert var38 is None
        var39 = var36.ensure_config_dir_exists()
        assert var39 is None
        var40 = module0.BaseJSONConfigManager()
        assert var40 is not None
        var41 = False
        var42 = 267
        var43 = var3.update(var41, var42)
    except BaseException:
        pass


def test_case_43():
    try:
        var0 = ''
        var1 = module0.BaseJSONConfigManager()
        assert var1 is not None
        var2 = var1.get(var0)
        assert var2 is not None
        var3 = module0.BaseJSONConfigManager()
        assert var3 is not None
        var4 = module0.BaseJSONConfigManager()
        assert var4 is not None
        var5 = module0.BaseJSONConfigManager()
        assert var5 is not None
        var6 = set()
        var7 = True
        var8 = var1.update(var6, var7)
    except BaseException:
        pass


def test_case_44():
    try:
        var0 = set()
        var1 = module0.BaseJSONConfigManager()
        assert var1 is not None
        var2 = var1.directory(var0)
    except BaseException:
        pass


def test_case_45():
    try:
        var0 = ''
        var1 = module0.BaseJSONConfigManager()
        assert var1 is not None
        var2 = var1.get(var0)
        assert var2 is not None
        var3 = module0.BaseJSONConfigManager()
        assert var3 is not None
        var4 = module0.BaseJSONConfigManager()
        assert var4 is not None
        var5 = module0.BaseJSONConfigManager()
        assert var5 is not None
        var6 = ''
        var7 = module0.BaseJSONConfigManager()
        assert var7 is not None
        var8 = var7.get(var6)
        assert var8 is not None
        var9 = module0.BaseJSONConfigManager()
        assert var9 is not None
        var10 = var9.ensure_config_dir_exists()
        assert var10 is None
        var11 = ''
        var12 = module0.BaseJSONConfigManager()
        assert var12 is not None
        var13 = var12.get(var11)
        assert var13 is not None
        var14 = var12.ensure_config_dir_exists()
        assert var14 is None
        var15 = var12.ensure_config_dir_exists()
        assert var15 is None
        var16 = module0.BaseJSONConfigManager()
        assert var16 is not None
        var17 = ''
        var18 = module0.BaseJSONConfigManager()
        assert var18 is not None
        var19 = var18.get(var17)
        assert var19 is not None
        var20 = ''
        var21 = module0.BaseJSONConfigManager()
        assert var21 is not None
        var22 = var21.get(var20)
        assert var22 is not None
        var23 = module0.BaseJSONConfigManager()
        assert var23 is not None
        var24 = ''
        var25 = module0.BaseJSONConfigManager()
        assert var25 is not None
        var26 = var25.get(var24)
        assert var26 is not None
        var27 = module0.BaseJSONConfigManager()
        assert var27 is not None
        var28 = var27.file_name(var24)
        assert var28 == './.json'
        var29 = 'K&H94v*%\r'
        var30 = {var29: var29, var29: var29, var29: var29}
        var31 = module0.BaseJSONConfigManager(**var30)
        assert var31 is not None
        var32 = var31.ensure_config_dir_exists()
        assert var32 is None
        var33 = {var12, var16}
        var34 = var4.update(var33, var6)
    except BaseException:
        pass


def test_case_46():
    try:
        var0 = ''
        var1 = module0.BaseJSONConfigManager()
        assert var1 is not None
        var2 = var1.get(var0)
        assert var2 is not None
        var3 = module0.BaseJSONConfigManager()
        assert var3 is not None
        var4 = var3.ensure_config_dir_exists()
        assert var4 is None
        var5 = ''
        var6 = module0.BaseJSONConfigManager()
        assert var6 is not None
        var7 = var6.get(var5)
        assert var7 is not None
        var8 = module0.BaseJSONConfigManager()
        assert var8 is not None
        var9 = ''
        var10 = module0.BaseJSONConfigManager()
        assert var10 is not None
        var11 = var10.get(var9)
        assert var11 is not None
        var12 = var10.ensure_config_dir_exists()
        assert var12 is None
        var13 = ''
        var14 = module0.BaseJSONConfigManager()
        assert var14 is not None
        var15 = var14.get(var13)
        assert var15 is not None
        var16 = module0.BaseJSONConfigManager()
        assert var16 is not None
        var17 = ''
        var18 = module0.BaseJSONConfigManager()
        assert var18 is not None
        var19 = var18.get(var17)
        assert var19 is not None
        var20 = var18.ensure_config_dir_exists()
        assert var20 is None
        var21 = var18.ensure_config_dir_exists()
        assert var21 is None
        var22 = ''
        var23 = module0.BaseJSONConfigManager()
        assert var23 is not None
        var24 = var23.get(var22)
        assert var24 is not None
        var25 = -2674.0
        var26 = var3.set(var25, var5)
    except BaseException:
        pass


def test_case_47():
    try:
        var0 = ''
        var1 = module0.BaseJSONConfigManager()
        assert var1 is not None
        var2 = var1.get(var0)
        assert var2 is not None
        var3 = var1.ensure_config_dir_exists()
        assert var3 is None
        var4 = ''
        var5 = module0.BaseJSONConfigManager()
        assert var5 is not None
        var6 = var5.get(var4)
        assert var6 is not None
        var7 = module0.BaseJSONConfigManager()
        assert var7 is not None
        var8 = 'K&H94v*%\r'
        var9 = {var8: var8, var8: var8, var8: var8}
        var10 = module0.BaseJSONConfigManager(**var9)
        assert var10 is not None
        var11 = var10.ensure_config_dir_exists()
        assert var11 is None
        var12 = ''
        var13 = module0.BaseJSONConfigManager()
        assert var13 is not None
        var14 = var13.get(var12)
        assert var14 is not None
        var15 = module0.BaseJSONConfigManager()
        assert var15 is not None
        var16 = ''
        var17 = module0.BaseJSONConfigManager()
        assert var17 is not None
        var18 = var17.get(var16)
        assert var18 is not None
        var19 = module0.BaseJSONConfigManager()
        assert var19 is not None
        var20 = var19.file_name(var16)
        assert var20 == './.json'
        var21 = ''
        var22 = module0.BaseJSONConfigManager()
        assert var22 is not None
        var23 = var22.get(var21)
        assert var23 is not None
        var24 = module0.BaseJSONConfigManager()
        assert var24 is not None
        var25 = ''
        var26 = module0.BaseJSONConfigManager()
        assert var26 is not None
        var27 = var26.get(var25)
        assert var27 is not None
        var28 = var26.ensure_config_dir_exists()
        assert var28 is None
        var29 = var26.ensure_config_dir_exists()
        assert var29 is None
        var30 = ''
        var31 = module0.BaseJSONConfigManager()
        assert var31 is not None
        var32 = var31.get(var30)
        assert var32 is not None
        var33 = module0.BaseJSONConfigManager()
        assert var33 is not None
        var34 = var33.ensure_config_dir_exists()
        assert var34 is None
        var35 = ''
        var36 = module0.BaseJSONConfigManager()
        assert var36 is not None
        var37 = var36.get(var35)
        assert var37 is not None
        var38 = module0.BaseJSONConfigManager()
        assert var38 is not None
        var39 = None
        var40 = var31.set(var39, var39)
    except BaseException:
        pass


def test_case_48():
    try:
        var0 = ''
        var1 = module0.BaseJSONConfigManager()
        assert var1 is not None
        var2 = var1.get(var0)
        assert var2 is not None
        var3 = 'K&H94v*%\r'
        var4 = {var3: var3, var3: var3, var3: var3}
        var5 = module0.BaseJSONConfigManager(**var4)
        assert var5 is not None
        var6 = var5.ensure_config_dir_exists()
        assert var6 is None
        var7 = ''
        var8 = module0.BaseJSONConfigManager()
        assert var8 is not None
        var9 = var8.get(var7)
        assert var9 is not None
        var10 = module0.BaseJSONConfigManager()
        assert var10 is not None
        var11 = var10.ensure_config_dir_exists()
        assert var11 is None
        var12 = module0.BaseJSONConfigManager()
        assert var12 is not None
        var13 = ''
        var14 = module0.BaseJSONConfigManager()
        assert var14 is not None
        var15 = var14.get(var13)
        assert var15 is not None
        var16 = var14.ensure_config_dir_exists()
        assert var16 is None
        var17 = var14.ensure_config_dir_exists()
        assert var17 is None
        var18 = ''
        var19 = module0.BaseJSONConfigManager()
        assert var19 is not None
        var20 = var19.get(var18)
        assert var20 is not None
        var21 = var19.ensure_config_dir_exists()
        assert var21 is None
        var22 = ''
        var23 = module0.BaseJSONConfigManager()
        assert var23 is not None
        var24 = var23.get(var22)
        assert var24 is not None
        var25 = module0.BaseJSONConfigManager()
        assert var25 is not None
        var26 = var25.ensure_config_dir_exists()
        assert var26 is None
        var27 = ''
        var28 = module0.BaseJSONConfigManager()
        assert var28 is not None
        var29 = var28.get(var27)
        assert var29 is not None
        var30 = module0.BaseJSONConfigManager()
        assert var30 is not None
        var31 = 403
        var32 = ''
        var33 = module0.recursive_update(var31, var32)
    except BaseException:
        pass


def test_case_49():
    try:
        var0 = 'K&H94v*%\r'
        var1 = {var0: var0, var0: var0, var0: var0}
        var2 = module0.BaseJSONConfigManager(**var1)
        assert var2 is not None
        var3 = var2.ensure_config_dir_exists()
        assert var3 is None
        var4 = ''
        var5 = module0.BaseJSONConfigManager()
        assert var5 is not None
        var6 = var5.get(var4)
        assert var6 is not None
        var7 = var5.ensure_config_dir_exists()
        assert var7 is None
        var8 = var5.ensure_config_dir_exists()
        assert var8 is None
        var9 = ''
        var10 = module0.BaseJSONConfigManager()
        assert var10 is not None
        var11 = var10.get(var9)
        assert var11 is not None
        var12 = module0.BaseJSONConfigManager()
        assert var12 is not None
        var13 = var12.ensure_config_dir_exists()
        assert var13 is None
        var14 = ''
        var15 = module0.BaseJSONConfigManager()
        assert var15 is not None
        var16 = var15.get(var14)
        assert var16 is not None
        var17 = module0.BaseJSONConfigManager()
        assert var17 is not None
        var18 = module0.BaseJSONConfigManager()
        assert var18 is not None
        var19 = module0.BaseJSONConfigManager()
        assert var19 is not None
        var20 = b'<\x9cm\x04fa\xee\xf7'
        var21 = 40.0
        var22 = {var7: var20, var16: var4, var4: var5, var16: var21}
    except BaseException:
        pass


def test_case_50():
    try:
        var0 = ''
        var1 = module0.BaseJSONConfigManager()
        assert var1 is not None
        var2 = var1.get(var0)
        assert var2 is not None
        var3 = module0.BaseJSONConfigManager()
        assert var3 is not None
        var4 = ''
        var5 = module0.BaseJSONConfigManager()
        assert var5 is not None
        var6 = var5.get(var4)
        assert var6 is not None
        var7 = var5.ensure_config_dir_exists()
        assert var7 is None
        var8 = var5.ensure_config_dir_exists()
        assert var8 is None
        var9 = ''
        var10 = module0.BaseJSONConfigManager()
        assert var10 is not None
        var11 = var10.get(var9)
        assert var11 is not None
        var12 = module0.BaseJSONConfigManager()
        assert var12 is not None
        var13 = var12.ensure_config_dir_exists()
        assert var13 is None
        var14 = ''
        var15 = module0.BaseJSONConfigManager()
        assert var15 is not None
        var16 = var15.get(var14)
        assert var16 is not None
        var17 = module0.BaseJSONConfigManager()
        assert var17 is not None
        var18 = ''
        var19 = module0.BaseJSONConfigManager()
        assert var19 is not None
        var20 = var19.get(var18)
        assert var20 is not None
        var21 = module0.BaseJSONConfigManager()
        assert var21 is not None
        var22 = module0.BaseJSONConfigManager()
        assert var22 is not None
        var23 = module0.BaseJSONConfigManager()
        assert var23 is not None
        var24 = module0.BaseJSONConfigManager()
        assert var24 is not None
        var25 = ''
        var26 = module0.BaseJSONConfigManager()
        assert var26 is not None
        var27 = var26.get(var25)
        assert var27 is not None
        var28 = var26.ensure_config_dir_exists()
        assert var28 is None
        var29 = 2429.1566
        var30 = [var24, var29]
        var31 = True
        var32 = module0.recursive_update(var30, var31)
    except BaseException:
        pass


def test_case_51():
    try:
        var0 = []
        var1 = {var0, var0, var0}
    except BaseException:
        pass


def test_case_52():
    try:
        var0 = ''
        var1 = module0.BaseJSONConfigManager()
        assert var1 is not None
        var2 = var1.get(var0)
        assert var2 is not None
        var3 = var1.ensure_config_dir_exists()
        assert var3 is None
        var4 = module0.BaseJSONConfigManager()
        assert var4 is not None
        var5 = None
        var6 = var1.get(var5)
    except BaseException:
        pass


def test_case_53():
    try:
        var0 = 'K&H94v*%\r'
        var1 = {var0: var0, var0: var0, var0: var0}
        var2 = module0.BaseJSONConfigManager(**var1)
        assert var2 is not None
        var3 = var2.ensure_config_dir_exists()
        assert var3 is None
        var4 = ''
        var5 = module0.BaseJSONConfigManager()
        assert var5 is not None
        var6 = var5.get(var4)
        assert var6 is not None
        var7 = var5.ensure_config_dir_exists()
        assert var7 is None
        var8 = var5.ensure_config_dir_exists()
        assert var8 is None
        var9 = ''
        var10 = module0.BaseJSONConfigManager()
        assert var10 is not None
        var11 = var10.get(var9)
        assert var11 is not None
        var12 = module0.BaseJSONConfigManager()
        assert var12 is not None
        var13 = var12.ensure_config_dir_exists()
        assert var13 is None
        var14 = ''
        var15 = module0.BaseJSONConfigManager()
        assert var15 is not None
        var16 = var15.get(var14)
        assert var16 is not None
        var17 = module0.BaseJSONConfigManager()
        assert var17 is not None
        var18 = ''
        var19 = module0.BaseJSONConfigManager()
        assert var19 is not None
        var20 = var19.get(var18)
        assert var20 is not None
        var21 = module0.BaseJSONConfigManager()
        assert var21 is not None
        var22 = ''
        var23 = module0.BaseJSONConfigManager()
        assert var23 is not None
        var24 = var23.get(var22)
        assert var24 is not None
        var25 = module0.BaseJSONConfigManager()
        assert var25 is not None
        var26 = var25.file_name(var22)
        assert var26 == './.json'
        var27 = ''
        var28 = module0.BaseJSONConfigManager()
        assert var28 is not None
        var29 = var28.get(var27)
        assert var29 is not None
        var30 = module0.BaseJSONConfigManager()
        assert var30 is not None
        var31 = ''
        var32 = module0.BaseJSONConfigManager()
        assert var32 is not None
        var33 = var32.get(var31)
        assert var33 is not None
        var34 = module0.BaseJSONConfigManager()
        assert var34 is not None
        var35 = module0.BaseJSONConfigManager()
        assert var35 is not None
        var36 = module0.BaseJSONConfigManager()
        assert var36 is not None
        var37 = ''
        var38 = module0.BaseJSONConfigManager()
        assert var38 is not None
        var39 = var38.get(var37)
        assert var39 is not None
        var40 = module0.BaseJSONConfigManager()
        assert var40 is not None
        var41 = var40.ensure_config_dir_exists()
        assert var41 is None
        var42 = module0.BaseJSONConfigManager()
        assert var42 is not None
        var43 = ''
        var44 = module0.BaseJSONConfigManager()
        assert var44 is not None
        var45 = var44.get(var43)
        assert var45 is not None
        var46 = var44.ensure_config_dir_exists()
        assert var46 is None
        var47 = ''
        var48 = module0.BaseJSONConfigManager()
        assert var48 is not None
        var49 = var48.get(var47)
        assert var49 is not None
        var50 = b'\xfa\x04E\x04'
        var51 = 'api.yaml'
        var52 = module0.BaseJSONConfigManager()
        assert var52 is not None
        var53 = var52.update(var50, var51)
    except BaseException:
        pass


def test_case_54():
    try:
        var0 = ''
        var1 = module0.BaseJSONConfigManager()
        assert var1 is not None
        var2 = var1.get(var0)
        assert var2 is not None
        var3 = ''
        var4 = module0.BaseJSONConfigManager()
        assert var4 is not None
        var5 = var4.get(var3)
        assert var5 is not None
        var6 = module0.BaseJSONConfigManager()
        assert var6 is not None
        var7 = module0.BaseJSONConfigManager()
        assert var7 is not None
        var8 = module0.BaseJSONConfigManager()
        assert var8 is not None
        var9 = ''
        var10 = module0.BaseJSONConfigManager()
        assert var10 is not None
        var11 = var10.get(var9)
        assert var11 is not None
        var12 = module0.BaseJSONConfigManager()
        assert var12 is not None
        var13 = var12.ensure_config_dir_exists()
        assert var13 is None
        var14 = ''
        var15 = module0.BaseJSONConfigManager()
        assert var15 is not None
        var16 = var15.get(var14)
        assert var16 is not None
        var17 = module0.BaseJSONConfigManager()
        assert var17 is not None
        var18 = module0.BaseJSONConfigManager()
        assert var18 is not None
        var19 = 'K&H94v*%\r'
        var20 = {var19: var19, var19: var19, var19: var19}
        var21 = module0.BaseJSONConfigManager(**var20)
        assert var21 is not None
        var22 = var21.ensure_config_dir_exists()
        assert var22 is None
        var23 = ''
        var24 = module0.BaseJSONConfigManager()
        assert var24 is not None
        var25 = var24.get(var23)
        assert var25 is not None
        var26 = module0.BaseJSONConfigManager()
        assert var26 is not None
        var27 = ''
        var28 = module0.BaseJSONConfigManager()
        assert var28 is not None
        var29 = var28.get(var27)
        assert var29 is not None
        var30 = module0.BaseJSONConfigManager()
        assert var30 is not None
        var31 = var30.file_name(var27)
        assert var31 == './.json'
        var32 = ''
        var33 = module0.BaseJSONConfigManager()
        assert var33 is not None
        var34 = var33.get(var32)
        assert var34 is not None
        var35 = module0.BaseJSONConfigManager()
        assert var35 is not None
        var36 = 'A+FZpby@'
        var37 = module0.remove_defaults(var36, var3)
    except BaseException:
        pass


def test_case_55():
    try:
        var0 = module0.BaseJSONConfigManager()
        assert var0 is not None
        var1 = ''
        var2 = module0.BaseJSONConfigManager()
        assert var2 is not None
        var3 = var2.get(var1)
        assert var3 is not None
        var4 = module0.BaseJSONConfigManager()
        assert var4 is not None
        var5 = var4.ensure_config_dir_exists()
        assert var5 is None
        var6 = ''
        var7 = module0.BaseJSONConfigManager()
        assert var7 is not None
        var8 = var7.get(var6)
        assert var8 is not None
        var9 = var7.ensure_config_dir_exists()
        assert var9 is None
        var10 = ''
        var11 = module0.BaseJSONConfigManager()
        assert var11 is not None
        var12 = var11.get(var10)
        assert var12 is not None
        var13 = var11.ensure_config_dir_exists()
        assert var13 is None
        var14 = var11.ensure_config_dir_exists()
        assert var14 is None
        var15 = ''
        var16 = module0.BaseJSONConfigManager()
        assert var16 is not None
        var17 = var16.get(var15)
        assert var17 is not None
        var18 = module0.BaseJSONConfigManager()
        assert var18 is not None
        var19 = ''
        var20 = module0.BaseJSONConfigManager()
        assert var20 is not None
        var21 = var20.get(var19)
        assert var21 is not None
        var22 = module0.BaseJSONConfigManager()
        assert var22 is not None
        var23 = var22.file_name(var19)
        assert var23 == './.json'
        var24 = ''
        var25 = module0.BaseJSONConfigManager()
        assert var25 is not None
        var26 = var25.get(var24)
        assert var26 is not None
        var27 = ''
        var28 = module0.BaseJSONConfigManager()
        assert var28 is not None
        var29 = var28.get(var27)
        assert var29 is not None
        var30 = module0.BaseJSONConfigManager()
        assert var30 is not None
        var31 = module0.BaseJSONConfigManager()
        assert var31 is not None
        var32 = module0.BaseJSONConfigManager()
        assert var32 is not None
        var33 = 'K&H94v*%\r'
        var34 = {var33: var33, var33: var33, var33: var33}
        var35 = module0.BaseJSONConfigManager(**var34)
        assert var35 is not None
        var36 = var35.ensure_config_dir_exists()
        assert var36 is None
        var37 = ''
        var38 = module0.BaseJSONConfigManager()
        assert var38 is not None
        var39 = var38.get(var37)
        assert var39 is not None
        var40 = module0.BaseJSONConfigManager()
        assert var40 is not None
        var41 = [var33]
        var42 = var15, var41, var41
        var43 = -655.56
        var44 = module0.remove_defaults(var42, var43)
    except BaseException:
        pass


def test_case_56():
    try:
        var0 = module0.BaseJSONConfigManager()
        assert var0 is not None
        var1 = ''
        var2 = module0.BaseJSONConfigManager()
        assert var2 is not None
        var3 = var2.get(var1)
        assert var3 is not None
        var4 = module0.BaseJSONConfigManager()
        assert var4 is not None
        var5 = 'K&H94v*%\r'
        var6 = {var5: var5, var5: var5, var5: var5}
        var7 = module0.BaseJSONConfigManager(**var6)
        assert var7 is not None
        var8 = var7.ensure_config_dir_exists()
        assert var8 is None
        var9 = {var6: var2, var5: var5}
    except BaseException:
        pass


def test_case_57():
    try:
        var0 = 'K&H94v*%\r'
        var1 = {var0: var0, var0: var0, var0: var0}
        var2 = module0.BaseJSONConfigManager(**var1)
        assert var2 is not None
        var3 = var2.ensure_config_dir_exists()
        assert var3 is None
        var4 = ''
        var5 = module0.BaseJSONConfigManager()
        assert var5 is not None
        var6 = var5.get(var4)
        assert var6 is not None
        var7 = module0.BaseJSONConfigManager()
        assert var7 is not None
        var8 = var7.ensure_config_dir_exists()
        assert var8 is None
        var9 = ''
        var10 = module0.BaseJSONConfigManager()
        assert var10 is not None
        var11 = var10.get(var9)
        assert var11 is not None
        var12 = module0.BaseJSONConfigManager()
        assert var12 is not None
        var13 = module0.BaseJSONConfigManager()
        assert var13 is not None
        var14 = module0.BaseJSONConfigManager()
        assert var14 is not None
        var15 = ''
        var16 = module0.BaseJSONConfigManager()
        assert var16 is not None
        var17 = var16.get(var15)
        assert var17 is not None
        var18 = module0.BaseJSONConfigManager()
        assert var18 is not None
        var19 = var18.ensure_config_dir_exists()
        assert var19 is None
        var20 = ''
        var21 = module0.BaseJSONConfigManager()
        assert var21 is not None
        var22 = var21.get(var20)
        assert var22 is not None
        var23 = module0.BaseJSONConfigManager()
        assert var23 is not None
        var24 = ''
        var25 = module0.BaseJSONConfigManager()
        assert var25 is not None
        var26 = var25.get(var24)
        assert var26 is not None
        var27 = var25.ensure_config_dir_exists()
        assert var27 is None
        var28 = ''
        var29 = module0.BaseJSONConfigManager()
        assert var29 is not None
        var30 = var29.get(var28)
        assert var30 is not None
        var31 = module0.BaseJSONConfigManager()
        assert var31 is not None
        var32 = ''
        var33 = module0.BaseJSONConfigManager()
        assert var33 is not None
        var34 = var33.get(var32)
        assert var34 is not None
        var35 = module0.BaseJSONConfigManager()
        assert var35 is not None
        var36 = var35.file_name(var32)
        assert var36 == './.json'
        var37 = ''
        var38 = module0.BaseJSONConfigManager()
        assert var38 is not None
        var39 = var38.get(var37)
        assert var39 is not None
        var40 = module0.BaseJSONConfigManager()
        assert var40 is not None
        var41 = module0.BaseJSONConfigManager()
        assert var41 is not None
        var42 = 't7/<AsWvv6D&@?'
        var43 = var21.get(var13, var42)
    except BaseException:
        pass


def test_case_58():
    try:
        var0 = ''
        var1 = module0.BaseJSONConfigManager()
        assert var1 is not None
        var2 = var1.get(var0)
        assert var2 is not None
        var3 = var1.ensure_config_dir_exists()
        assert var3 is None
        var4 = ''
        var5 = module0.BaseJSONConfigManager()
        assert var5 is not None
        var6 = var5.get(var4)
        assert var6 is not None
        var7 = ''
        var8 = module0.BaseJSONConfigManager()
        assert var8 is not None
        var9 = var8.get(var7)
        assert var9 is not None
        var10 = module0.BaseJSONConfigManager()
        assert var10 is not None
        var11 = 'K&H94v*%\r'
        var12 = {var11: var11, var11: var11, var11: var11}
        var13 = module0.BaseJSONConfigManager(**var12)
        assert var13 is not None
        var14 = var13.ensure_config_dir_exists()
        assert var14 is None
        var15 = ''
        var16 = module0.BaseJSONConfigManager()
        assert var16 is not None
        var17 = var16.get(var15)
        assert var17 is not None
        var18 = module0.BaseJSONConfigManager()
        assert var18 is not None
        var19 = var18.ensure_config_dir_exists()
        assert var19 is None
        var20 = module0.BaseJSONConfigManager()
        assert var20 is not None
        var21 = ''
        var22 = module0.BaseJSONConfigManager()
        assert var22 is not None
        var23 = var22.get(var21)
        assert var23 is not None
        var24 = module0.BaseJSONConfigManager()
        assert var24 is not None
        var25 = module0.BaseJSONConfigManager()
        assert var25 is not None
        var26 = module0.BaseJSONConfigManager()
        assert var26 is not None
        var27 = ''
        var28 = module0.BaseJSONConfigManager()
        assert var28 is not None
        var29 = var28.get(var27)
        assert var29 is not None
        var30 = module0.BaseJSONConfigManager()
        assert var30 is not None
        var31 = ''
        var32 = module0.BaseJSONConfigManager()
        assert var32 is not None
        var33 = var32.get(var31)
        assert var33 is not None
        var34 = module0.BaseJSONConfigManager()
        assert var34 is not None
        var35 = var34.file_name(var31)
        assert var35 == './.json'
        var36 = ''
        var37 = module0.BaseJSONConfigManager()
        assert var37 is not None
        var38 = var37.get(var36)
        assert var38 is not None
        var39 = var37.ensure_config_dir_exists()
        assert var39 is None
        var40 = var37.ensure_config_dir_exists()
        assert var40 is None
        var41 = (
            b'\xf0\x04\xc3\x00w\xcc\x9e\xd7)\xf2\xd3\x97R\xf7\xde\xc1F\x0e\xf0'
            )
        var42 = ()
        var43 = module0.recursive_update(var41, var42)
    except BaseException:
        pass


def test_case_59():
    try:
        var0 = 'K&H94v*%\r'
        var1 = {var0: var0, var0: var0, var0: var0}
        var2 = module0.BaseJSONConfigManager(**var1)
        assert var2 is not None
        var3 = var2.ensure_config_dir_exists()
        assert var3 is None
        var4 = ''
        var5 = module0.BaseJSONConfigManager()
        assert var5 is not None
        var6 = var5.get(var4)
        assert var6 is not None
        var7 = module0.BaseJSONConfigManager()
        assert var7 is not None
        var8 = -5160
        var9 = b'{\xc6\xf8\x93I'
        var10 = None
        var11 = -4439.06363
        var12 = var8, var9, var10, var11
        var13 = True
        var14 = module0.recursive_update(var12, var13)
    except BaseException:
        pass


def test_case_60():
    try:
        var0 = ''
        var1 = module0.BaseJSONConfigManager()
        assert var1 is not None
        var2 = var1.get(var0)
        assert var2 is not None
        var3 = module0.BaseJSONConfigManager()
        assert var3 is not None
        var4 = module0.BaseJSONConfigManager()
        assert var4 is not None
        var5 = module0.BaseJSONConfigManager()
        assert var5 is not None
        var6 = ''
        var7 = module0.BaseJSONConfigManager()
        assert var7 is not None
        var8 = var7.get(var6)
        assert var8 is not None
        var9 = module0.BaseJSONConfigManager()
        assert var9 is not None
        var10 = ''
        var11 = module0.BaseJSONConfigManager()
        assert var11 is not None
        var12 = var11.get(var10)
        assert var12 is not None
        var13 = module0.BaseJSONConfigManager()
        assert var13 is not None
        var14 = var13.file_name(var10)
        assert var14 == './.json'
        var15 = None
        var16 = var5.file_name(var15)
    except BaseException:
        pass


def test_case_61():
    try:
        var0 = ''
        var1 = module0.BaseJSONConfigManager()
        assert var1 is not None
        var2 = var1.get(var0)
        assert var2 is not None
        var3 = module0.BaseJSONConfigManager()
        assert var3 is not None
        var4 = ''
        var5 = module0.BaseJSONConfigManager()
        assert var5 is not None
        var6 = var5.get(var4)
        assert var6 is not None
        var7 = module0.BaseJSONConfigManager()
        assert var7 is not None
        var8 = var7.ensure_config_dir_exists()
        assert var8 is None
        var9 = ''
        var10 = module0.BaseJSONConfigManager()
        assert var10 is not None
        var11 = var10.get(var9)
        assert var11 is not None
        var12 = var10.ensure_config_dir_exists()
        assert var12 is None
        var13 = var10.ensure_config_dir_exists()
        assert var13 is None
        var14 = ''
        var15 = module0.BaseJSONConfigManager()
        assert var15 is not None
        var16 = var15.get(var14)
        assert var16 is not None
        var17 = module0.BaseJSONConfigManager()
        assert var17 is not None
        var18 = ''
        var19 = module0.BaseJSONConfigManager()
        assert var19 is not None
        var20 = var19.get(var18)
        assert var20 is not None
        var21 = module0.BaseJSONConfigManager()
        assert var21 is not None
        var22 = var21.file_name(var18)
        assert var22 == './.json'
        var23 = module0.BaseJSONConfigManager()
        assert var23 is not None
        var24 = ''
        var25 = module0.BaseJSONConfigManager()
        assert var25 is not None
        var26 = var25.get(var24)
        assert var26 is not None
        var27 = module0.BaseJSONConfigManager()
        assert var27 is not None
        var28 = var27.ensure_config_dir_exists()
        assert var28 is None
        var29 = ''
        var30 = module0.BaseJSONConfigManager()
        assert var30 is not None
        var31 = var30.get(var29)
        assert var31 is not None
        var32 = module0.BaseJSONConfigManager()
        assert var32 is not None
        var33 = 'K&H94v*%\r'
        var34 = {var33: var33, var33: var33, var33: var33}
        var35 = module0.BaseJSONConfigManager(**var34)
        assert var35 is not None
        var36 = var35.ensure_config_dir_exists()
        assert var36 is None
        var37 = ''
        var38 = module0.BaseJSONConfigManager()
        assert var38 is not None
        var39 = var38.get(var37)
        assert var39 is not None
        var40 = module0.BaseJSONConfigManager()
        assert var40 is not None
        var41 = module0.BaseJSONConfigManager()
        assert var41 is not None
        var42 = module0.BaseJSONConfigManager()
        assert var42 is not None
        var43 = ''
        var44 = module0.BaseJSONConfigManager()
        assert var44 is not None
        var45 = var44.get(var43)
        assert var45 is not None
        var46 = ''
        var47 = module0.BaseJSONConfigManager()
        assert var47 is not None
        var48 = var47.get(var46)
        assert var48 is not None
        var49 = var47.ensure_config_dir_exists()
        assert var49 is None
        var50 = 'szg4\\GqNL/9Y8)S'
        var51 = None
        var52 = module0.recursive_update(var50, var51)
    except BaseException:
        pass


def test_case_62():
    try:
        var0 = ''
        var1 = module0.BaseJSONConfigManager()
        assert var1 is not None
        var2 = var1.get(var0)
        assert var2 is not None
        var3 = module0.BaseJSONConfigManager()
        assert var3 is not None
        var4 = module0.BaseJSONConfigManager()
        assert var4 is not None
        var5 = module0.BaseJSONConfigManager()
        assert var5 is not None
        var6 = module0.BaseJSONConfigManager()
        assert var6 is not None
        var7 = 'K&H94v*%\r'
        var8 = {var7: var7, var7: var7, var7: var7}
        var9 = module0.BaseJSONConfigManager(**var8)
        assert var9 is not None
        var10 = var9.ensure_config_dir_exists()
        assert var10 is None
        var11 = False
        var12 = var3.update(var11, var7)
    except BaseException:
        pass


def test_case_63():
    try:
        var0 = ''
        var1 = module0.BaseJSONConfigManager()
        assert var1 is not None
        var2 = var1.get(var0)
        assert var2 is not None
        var3 = var1.ensure_config_dir_exists()
        assert var3 is None
        var4 = ''
        var5 = module0.BaseJSONConfigManager()
        assert var5 is not None
        var6 = var5.get(var4)
        assert var6 is not None
        var7 = ''
        var8 = module0.BaseJSONConfigManager()
        assert var8 is not None
        var9 = var8.get(var7)
        assert var9 is not None
        var10 = module0.BaseJSONConfigManager()
        assert var10 is not None
        var11 = var10.ensure_config_dir_exists()
        assert var11 is None
        var12 = ''
        var13 = module0.BaseJSONConfigManager()
        assert var13 is not None
        var14 = var13.get(var12)
        assert var14 is not None
        var15 = module0.BaseJSONConfigManager()
        assert var15 is not None
        var16 = ''
        var17 = module0.BaseJSONConfigManager()
        assert var17 is not None
        var18 = var17.get(var16)
        assert var18 is not None
        var19 = var17.ensure_config_dir_exists()
        assert var19 is None
        var20 = var17.ensure_config_dir_exists()
        assert var20 is None
        var21 = ''
        var22 = module0.BaseJSONConfigManager()
        assert var22 is not None
        var23 = var22.get(var21)
        assert var23 is not None
        var24 = module0.BaseJSONConfigManager()
        assert var24 is not None
        var25 = var24.ensure_config_dir_exists()
        assert var25 is None
        var26 = 'K&H94v*%\r'
        var27 = {var26: var26, var26: var26, var26: var26}
        var28 = module0.BaseJSONConfigManager(**var27)
        assert var28 is not None
        var29 = var28.ensure_config_dir_exists()
        assert var29 is None
        var30 = ''
        var31 = module0.BaseJSONConfigManager()
        assert var31 is not None
        var32 = var31.get(var30)
        assert var32 is not None
        var33 = module0.BaseJSONConfigManager()
        assert var33 is not None
        var34 = ''
        var35 = module0.BaseJSONConfigManager()
        assert var35 is not None
        var36 = var35.get(var34)
        assert var36 is not None
        var37 = module0.BaseJSONConfigManager()
        assert var37 is not None
        var38 = var37.file_name(var34)
        assert var38 == './.json'
        var39 = module0.BaseJSONConfigManager()
        assert var39 is not None
        var40 = ''
        var41 = module0.BaseJSONConfigManager()
        assert var41 is not None
        var42 = var41.get(var40)
        assert var42 is not None
        var43 = module0.BaseJSONConfigManager()
        assert var43 is not None
        var44 = module0.BaseJSONConfigManager()
        assert var44 is not None
        var45 = module0.BaseJSONConfigManager()
        assert var45 is not None
        var46 = ''
        var47 = module0.BaseJSONConfigManager()
        assert var47 is not None
        var48 = var47.get(var46)
        assert var48 is not None
        var49 = module0.BaseJSONConfigManager()
        assert var49 is not None
        var50 = 2365.083
        var51 = var8.get(var50)
    except BaseException:
        pass


def test_case_64():
    try:
        var0 = ''
        var1 = module0.BaseJSONConfigManager()
        assert var1 is not None
        var2 = var1.get(var0)
        assert var2 is not None
        var3 = module0.BaseJSONConfigManager()
        assert var3 is not None
        var4 = ''
        var5 = module0.BaseJSONConfigManager()
        assert var5 is not None
        var6 = var5.get(var4)
        assert var6 is not None
        var7 = module0.BaseJSONConfigManager()
        assert var7 is not None
        var8 = var7.file_name(var4)
        assert var8 == './.json'
        var9 = ''
        var10 = module0.BaseJSONConfigManager()
        assert var10 is not None
        var11 = var10.get(var9)
        assert var11 is not None
        var12 = ''
        var13 = module0.BaseJSONConfigManager()
        assert var13 is not None
        var14 = var13.get(var12)
        assert var14 is not None
        var15 = module0.BaseJSONConfigManager()
        assert var15 is not None
        var16 = module0.BaseJSONConfigManager()
        assert var16 is not None
        var17 = module0.BaseJSONConfigManager()
        assert var17 is not None
        var18 = ''
        var19 = module0.BaseJSONConfigManager()
        assert var19 is not None
        var20 = var19.get(var18)
        assert var20 is not None
        var21 = module0.BaseJSONConfigManager()
        assert var21 is not None
        var22 = ''
        var23 = module0.BaseJSONConfigManager()
        assert var23 is not None
        var24 = var23.get(var22)
        assert var24 is not None
        var25 = module0.BaseJSONConfigManager()
        assert var25 is not None
        var26 = var25.ensure_config_dir_exists()
        assert var26 is None
        var27 = ''
        var28 = module0.BaseJSONConfigManager()
        assert var28 is not None
        var29 = var28.get(var27)
        assert var29 is not None
        var30 = module0.BaseJSONConfigManager()
        assert var30 is not None
        var31 = 'K&H94v*%\r'
        var32 = {var31: var31, var31: var31, var31: var31}
        var33 = module0.BaseJSONConfigManager(**var32)
        assert var33 is not None
        var34 = var33.ensure_config_dir_exists()
        assert var34 is None
        var35 = 'JswLwUH;JNd'
        var36 = {var2: var27, var25: var14, var35: var13, var7: var18}
    except BaseException:
        pass


def test_case_65():
    try:
        var0 = ''
        var1 = module0.BaseJSONConfigManager()
        assert var1 is not None
        var2 = var1.get(var0)
        assert var2 is not None
        var3 = ''
        var4 = module0.BaseJSONConfigManager()
        assert var4 is not None
        var5 = var4.get(var3)
        assert var5 is not None
        var6 = module0.BaseJSONConfigManager()
        assert var6 is not None
        var7 = ''
        var8 = module0.BaseJSONConfigManager()
        assert var8 is not None
        var9 = var8.get(var7)
        assert var9 is not None
        var10 = module0.BaseJSONConfigManager()
        assert var10 is not None
        var11 = var10.file_name(var7)
        assert var11 == './.json'
        var12 = 'Rt\rQx*]^'
        var13 = module0.recursive_update(var12, var10)
    except BaseException:
        pass


def test_case_66():
    try:
        var0 = ''
        var1 = module0.BaseJSONConfigManager()
        assert var1 is not None
        var2 = var1.get(var0)
        assert var2 is not None
        var3 = module0.BaseJSONConfigManager()
        assert var3 is not None
        var4 = module0.BaseJSONConfigManager()
        assert var4 is not None
        var5 = module0.BaseJSONConfigManager()
        assert var5 is not None
        var6 = ''
        var7 = module0.BaseJSONConfigManager()
        assert var7 is not None
        var8 = var7.get(var6)
        assert var8 is not None
        var9 = var7.ensure_config_dir_exists()
        assert var9 is None
        var10 = var7.ensure_config_dir_exists()
        assert var10 is None
        var11 = ''
        var12 = module0.BaseJSONConfigManager()
        assert var12 is not None
        var13 = var12.get(var11)
        assert var13 is not None
        var14 = module0.BaseJSONConfigManager()
        assert var14 is not None
        var15 = ''
        var16 = module0.BaseJSONConfigManager()
        assert var16 is not None
        var17 = var16.get(var15)
        assert var17 is not None
        var18 = var16.ensure_config_dir_exists()
        assert var18 is None
        var19 = 'K&H94v*%\r'
        var20 = {var19: var19, var19: var19, var19: var19}
        var21 = module0.BaseJSONConfigManager(**var20)
        assert var21 is not None
        var22 = var21.ensure_config_dir_exists()
        assert var22 is None
        var23 = ''
        var24 = module0.BaseJSONConfigManager()
        assert var24 is not None
        var25 = var24.get(var23)
        assert var25 is not None
        var26 = module0.BaseJSONConfigManager()
        assert var26 is not None
        var27 = var26.ensure_config_dir_exists()
        assert var27 is None
        var28 = ''
        var29 = module0.BaseJSONConfigManager()
        assert var29 is not None
        var30 = var29.get(var28)
        assert var30 is not None
        var31 = module0.BaseJSONConfigManager()
        assert var31 is not None
        var32 = ''
        var33 = module0.BaseJSONConfigManager()
        assert var33 is not None
        var34 = var33.get(var32)
        assert var34 is not None
        var35 = module0.BaseJSONConfigManager()
        assert var35 is not None
        var36 = ''
        var37 = module0.BaseJSONConfigManager()
        assert var37 is not None
        var38 = var37.get(var36)
        assert var38 is not None
        var39 = module0.BaseJSONConfigManager()
        assert var39 is not None
        var40 = var39.file_name(var36)
        assert var40 == './.json'
        var41 = ''
        var42 = module0.BaseJSONConfigManager()
        assert var42 is not None
        var43 = var42.get(var41)
        assert var43 is not None
        var44 = module0.BaseJSONConfigManager()
        assert var44 is not None
        var45 = ''
        var46 = module0.BaseJSONConfigManager()
        assert var46 is not None
        var47 = var46.get(var45)
        assert var47 is not None
        var48 = module0.BaseJSONConfigManager()
        assert var48 is not None
        var49 = var48.ensure_config_dir_exists()
        assert var49 is None
        var50 = -836.22
        var51 = var46.get(var50)
    except BaseException:
        pass


def test_case_67():
    try:
        var0 = ''
        var1 = module0.BaseJSONConfigManager()
        assert var1 is not None
        var2 = var1.get(var0)
        assert var2 is not None
        var3 = var1.ensure_config_dir_exists()
        assert var3 is None
        var4 = var1.ensure_config_dir_exists()
        assert var4 is None
        var5 = ''
        var6 = module0.BaseJSONConfigManager()
        assert var6 is not None
        var7 = var6.get(var5)
        assert var7 is not None
        var8 = module0.BaseJSONConfigManager()
        assert var8 is not None
        var9 = ''
        var10 = module0.BaseJSONConfigManager()
        assert var10 is not None
        var11 = var10.get(var9)
        assert var11 is not None
        var12 = module0.BaseJSONConfigManager()
        assert var12 is not None
        var13 = var12.file_name(var9)
        assert var13 == './.json'
        var14 = ''
        var15 = module0.BaseJSONConfigManager()
        assert var15 is not None
        var16 = var15.get(var14)
        assert var16 is not None
        var17 = var15.ensure_config_dir_exists()
        assert var17 is None
        var18 = -308
        var19 = [var2, var17, var18]
        var20 = module0.remove_defaults(var18, var19)
    except BaseException:
        pass


def test_case_68():
    try:
        var0 = ''
        var1 = module0.BaseJSONConfigManager()
        assert var1 is not None
        var2 = var1.get(var0)
        assert var2 is not None
        var3 = var1.ensure_config_dir_exists()
        assert var3 is None
        var4 = ''
        var5 = module0.BaseJSONConfigManager()
        assert var5 is not None
        var6 = var5.get(var4)
        assert var6 is not None
        var7 = module0.BaseJSONConfigManager()
        assert var7 is not None
        var8 = var7.ensure_config_dir_exists()
        assert var8 is None
        var9 = ''
        var10 = module0.BaseJSONConfigManager()
        assert var10 is not None
        var11 = var10.get(var9)
        assert var11 is not None
        var12 = module0.BaseJSONConfigManager()
        assert var12 is not None
        var13 = module0.BaseJSONConfigManager()
        assert var13 is not None
        var14 = module0.BaseJSONConfigManager()
        assert var14 is not None
        var15 = ''
        var16 = module0.BaseJSONConfigManager()
        assert var16 is not None
        var17 = var16.get(var15)
        assert var17 is not None
        var18 = module0.BaseJSONConfigManager()
        assert var18 is not None
        var19 = var18.ensure_config_dir_exists()
        assert var19 is None
        var20 = ''
        var21 = module0.BaseJSONConfigManager()
        assert var21 is not None
        var22 = var21.get(var20)
        assert var22 is not None
        var23 = module0.BaseJSONConfigManager()
        assert var23 is not None
        var24 = ''
        var25 = module0.BaseJSONConfigManager()
        assert var25 is not None
        var26 = var25.get(var24)
        assert var26 is not None
        var27 = 'K&H94v*%\r'
        var28 = {var27: var27, var27: var27, var27: var27}
        var29 = module0.BaseJSONConfigManager(**var28)
        assert var29 is not None
        var30 = var29.ensure_config_dir_exists()
        assert var30 is None
        var31 = module0.BaseJSONConfigManager()
        assert var31 is not None
        var32 = ''
        var33 = module0.BaseJSONConfigManager()
        assert var33 is not None
        var34 = var33.get(var32)
        assert var34 is not None
        var35 = module0.BaseJSONConfigManager()
        assert var35 is not None
        var36 = ''
        var37 = module0.BaseJSONConfigManager()
        assert var37 is not None
        var38 = var37.get(var36)
        assert var38 is not None
        var39 = module0.BaseJSONConfigManager()
        assert var39 is not None
        var40 = var39.file_name(var36)
        assert var40 == './.json'
        var41 = ''
        var42 = module0.BaseJSONConfigManager()
        assert var42 is not None
        var43 = var42.get(var41)
        assert var43 is not None
        var44 = module0.BaseJSONConfigManager()
        assert var44 is not None
        var45 = ''
        var46 = module0.BaseJSONConfigManager()
        assert var46 is not None
        var47 = var46.get(var45)
        assert var47 is not None
        var48 = var46.ensure_config_dir_exists()
        assert var48 is None
        var49 = var46.ensure_config_dir_exists()
        assert var49 is None
        var50 = True
        var51 = var37.directory(var50)
    except BaseException:
        pass


def test_case_69():
    try:
        var0 = ''
        var1 = module0.BaseJSONConfigManager()
        assert var1 is not None
        var2 = var1.get(var0)
        assert var2 is not None
        var3 = module0.BaseJSONConfigManager()
        assert var3 is not None
        var4 = ''
        var5 = module0.BaseJSONConfigManager()
        assert var5 is not None
        var6 = var5.get(var4)
        assert var6 is not None
        var7 = module0.BaseJSONConfigManager()
        assert var7 is not None
        var8 = ''
        var9 = module0.BaseJSONConfigManager()
        assert var9 is not None
        var10 = var9.get(var8)
        assert var10 is not None
        var11 = module0.BaseJSONConfigManager()
        assert var11 is not None
        var12 = var11.file_name(var8)
        assert var12 == './.json'
        var13 = True
        var14 = var5.file_name(var13)
    except BaseException:
        pass


def test_case_70():
    try:
        var0 = ''
        var1 = module0.BaseJSONConfigManager()
        assert var1 is not None
        var2 = var1.get(var0)
        assert var2 is not None
        var3 = var1.ensure_config_dir_exists()
        assert var3 is None
        var4 = ''
        var5 = module0.BaseJSONConfigManager()
        assert var5 is not None
        var6 = var5.get(var4)
        assert var6 is not None
        var7 = module0.BaseJSONConfigManager()
        assert var7 is not None
        var8 = module0.BaseJSONConfigManager()
        assert var8 is not None
        var9 = module0.BaseJSONConfigManager()
        assert var9 is not None
        var10 = ''
        var11 = module0.BaseJSONConfigManager()
        assert var11 is not None
        var12 = var11.get(var10)
        assert var12 is not None
        var13 = module0.BaseJSONConfigManager()
        assert var13 is not None
        var14 = ''
        var15 = module0.BaseJSONConfigManager()
        assert var15 is not None
        var16 = var15.get(var14)
        assert var16 is not None
        var17 = module0.BaseJSONConfigManager()
        assert var17 is not None
        var18 = var17.file_name(var14)
        assert var18 == './.json'
        var19 = ''
        var20 = module0.BaseJSONConfigManager()
        assert var20 is not None
        var21 = var20.get(var19)
        assert var21 is not None
        var22 = module0.BaseJSONConfigManager()
        assert var22 is not None
        var23 = var22.ensure_config_dir_exists()
        assert var23 is None
        var24 = ''
        var25 = module0.BaseJSONConfigManager()
        assert var25 is not None
        var26 = var25.get(var24)
        assert var26 is not None
        var27 = var25.ensure_config_dir_exists()
        assert var27 is None
        var28 = var25.ensure_config_dir_exists()
        assert var28 is None
        var29 = ''
        var30 = module0.BaseJSONConfigManager()
        assert var30 is not None
        var31 = var30.get(var29)
        assert var31 is not None
        var32 = module0.BaseJSONConfigManager()
        assert var32 is not None
        var33 = ''
        var34 = module0.BaseJSONConfigManager()
        assert var34 is not None
        var35 = var34.get(var33)
        assert var35 is not None
        var36 = module0.BaseJSONConfigManager()
        assert var36 is not None
        var37 = ()
        var38 = var9.directory(var37)
    except BaseException:
        pass


def test_case_71():
    try:
        var0 = module0.BaseJSONConfigManager()
        assert var0 is not None
        var1 = ''
        var2 = module0.BaseJSONConfigManager()
        assert var2 is not None
        var3 = var2.get(var1)
        assert var3 is not None
        var4 = module0.BaseJSONConfigManager()
        assert var4 is not None
        var5 = var4.ensure_config_dir_exists()
        assert var5 is None
        var6 = ''
        var7 = module0.BaseJSONConfigManager()
        assert var7 is not None
        var8 = var7.get(var6)
        assert var8 is not None
        var9 = module0.BaseJSONConfigManager()
        assert var9 is not None
        var10 = 'K&H94v*%\r'
        var11 = {var10: var10, var10: var10, var10: var10}
        var12 = module0.BaseJSONConfigManager(**var11)
        assert var12 is not None
        var13 = var12.ensure_config_dir_exists()
        assert var13 is None
        var14 = ''
        var15 = module0.BaseJSONConfigManager()
        assert var15 is not None
        var16 = var15.get(var14)
        assert var16 is not None
        var17 = module0.BaseJSONConfigManager()
        assert var17 is not None
        var18 = module0.BaseJSONConfigManager()
        assert var18 is not None
        var19 = module0.BaseJSONConfigManager()
        assert var19 is not None
        var20 = ''
        var21 = module0.BaseJSONConfigManager()
        assert var21 is not None
        var22 = var21.get(var20)
        assert var22 is not None
        var23 = var21.ensure_config_dir_exists()
        assert var23 is None
        var24 = ''
        var25 = module0.BaseJSONConfigManager()
        assert var25 is not None
        var26 = var25.get(var24)
        assert var26 is not None
        var27 = module0.BaseJSONConfigManager()
        assert var27 is not None
        var28 = ''
        var29 = module0.BaseJSONConfigManager()
        assert var29 is not None
        var30 = var29.get(var28)
        assert var30 is not None
        var31 = module0.BaseJSONConfigManager()
        assert var31 is not None
        var32 = var31.file_name(var28)
        assert var32 == './.json'
        var33 = ''
        var34 = module0.BaseJSONConfigManager()
        assert var34 is not None
        var35 = var34.get(var33)
        assert var35 is not None
        var36 = var34.ensure_config_dir_exists()
        assert var36 is None
        var37 = var34.ensure_config_dir_exists()
        assert var37 is None
        var38 = ''
        var39 = module0.BaseJSONConfigManager()
        assert var39 is not None
        var40 = var39.get(var38)
        assert var40 is not None
        var41 = module0.BaseJSONConfigManager()
        assert var41 is not None
        var42 = ''
        var43 = module0.BaseJSONConfigManager()
        assert var43 is not None
        var44 = var43.get(var42)
        assert var44 is not None
        var45 = module0.BaseJSONConfigManager()
        assert var45 is not None
        var46 = var45.ensure_config_dir_exists()
        assert var46 is None
        var47 = -2184.378
        var48 = var45.set(var2, var47)
    except BaseException:
        pass


def test_case_72():
    try:
        var0 = module0.BaseJSONConfigManager()
        assert var0 is not None
        var1 = ''
        var2 = module0.BaseJSONConfigManager()
        assert var2 is not None
        var3 = var2.get(var1)
        assert var3 is not None
        var4 = module0.BaseJSONConfigManager()
        assert var4 is not None
        var5 = var4.ensure_config_dir_exists()
        assert var5 is None
        var6 = ''
        var7 = module0.BaseJSONConfigManager()
        assert var7 is not None
        var8 = var7.get(var6)
        assert var8 is not None
        var9 = module0.BaseJSONConfigManager()
        assert var9 is not None
        var10 = 'K&H94v*%\r'
        var11 = {var10: var10, var10: var10, var10: var10}
        var12 = module0.BaseJSONConfigManager(**var11)
        assert var12 is not None
        var13 = var12.ensure_config_dir_exists()
        assert var13 is None
        var14 = ''
        var15 = module0.BaseJSONConfigManager()
        assert var15 is not None
        var16 = var15.get(var14)
        assert var16 is not None
        var17 = module0.BaseJSONConfigManager()
        assert var17 is not None
        var18 = var17.ensure_config_dir_exists()
        assert var18 is None
        var19 = ''
        var20 = module0.BaseJSONConfigManager()
        assert var20 is not None
        var21 = var20.get(var19)
        assert var21 is not None
        var22 = module0.BaseJSONConfigManager()
        assert var22 is not None
        var23 = ''
        var24 = module0.BaseJSONConfigManager()
        assert var24 is not None
        var25 = var24.get(var23)
        assert var25 is not None
        var26 = ''
        var27 = module0.BaseJSONConfigManager()
        assert var27 is not None
        var28 = var27.get(var26)
        assert var28 is not None
        var29 = module0.BaseJSONConfigManager()
        assert var29 is not None
        var30 = ''
        var31 = module0.BaseJSONConfigManager()
        assert var31 is not None
        var32 = var31.get(var30)
        assert var32 is not None
        var33 = module0.BaseJSONConfigManager()
        assert var33 is not None
        var34 = var33.file_name(var30)
        assert var34 == './.json'
        var35 = var29.file_name(var15)
    except BaseException:
        pass


def test_case_73():
    try:
        var0 = ''
        var1 = module0.BaseJSONConfigManager()
        assert var1 is not None
        var2 = var1.get(var0)
        assert var2 is not None
        var3 = module0.BaseJSONConfigManager()
        assert var3 is not None
        var4 = ''
        var5 = module0.BaseJSONConfigManager()
        assert var5 is not None
        var6 = var5.get(var4)
        assert var6 is not None
        var7 = ''
        var8 = module0.BaseJSONConfigManager()
        assert var8 is not None
        var9 = var8.get(var7)
        assert var9 is not None
        var10 = module0.BaseJSONConfigManager()
        assert var10 is not None
        var11 = var10.ensure_config_dir_exists()
        assert var11 is None
        var12 = ''
        var13 = module0.BaseJSONConfigManager()
        assert var13 is not None
        var14 = var13.get(var12)
        assert var14 is not None
        var15 = var13.ensure_config_dir_exists()
        assert var15 is None
        var16 = var13.ensure_config_dir_exists()
        assert var16 is None
        var17 = module0.BaseJSONConfigManager()
        assert var17 is not None
        var18 = ''
        var19 = module0.BaseJSONConfigManager()
        assert var19 is not None
        var20 = var19.get(var18)
        assert var20 is not None
        var21 = module0.BaseJSONConfigManager()
        assert var21 is not None
        var22 = ''
        var23 = module0.BaseJSONConfigManager()
        assert var23 is not None
        var24 = var23.get(var22)
        assert var24 is not None
        var25 = module0.BaseJSONConfigManager()
        assert var25 is not None
        var26 = var25.file_name(var22)
        assert var26 == './.json'
        var27 = 'M}3%R]\niyb-zXf=p4j<'
        var28 = """process the kernel_info_reply
        
        enabling msg spec adaptation, if necessary
        """
        var29 = module0.remove_defaults(var27, var28)
    except BaseException:
        pass


def test_case_74():
    try:
        var0 = 'K&H94v*%\r'
        var1 = {var0: var0, var0: var0, var0: var0}
        var2 = module0.BaseJSONConfigManager(**var1)
        assert var2 is not None
        var3 = var2.ensure_config_dir_exists()
        assert var3 is None
        var4 = ''
        var5 = module0.BaseJSONConfigManager()
        assert var5 is not None
        var6 = var5.get(var4)
        assert var6 is not None
        var7 = var5.ensure_config_dir_exists()
        assert var7 is None
        var8 = ''
        var9 = module0.BaseJSONConfigManager()
        assert var9 is not None
        var10 = var9.get(var8)
        assert var10 is not None
        var11 = module0.BaseJSONConfigManager()
        assert var11 is not None
        var12 = var11.ensure_config_dir_exists()
        assert var12 is None
        var13 = ''
        var14 = module0.BaseJSONConfigManager()
        assert var14 is not None
        var15 = var14.get(var13)
        assert var15 is not None
        var16 = module0.BaseJSONConfigManager()
        assert var16 is not None
        var17 = ''
        var18 = module0.BaseJSONConfigManager()
        assert var18 is not None
        var19 = var18.get(var17)
        assert var19 is not None
        var20 = ''
        var21 = module0.BaseJSONConfigManager()
        assert var21 is not None
        var22 = var21.get(var20)
        assert var22 is not None
        var23 = module0.BaseJSONConfigManager()
        assert var23 is not None
        var24 = ''
        var25 = module0.BaseJSONConfigManager()
        assert var25 is not None
        var26 = var25.get(var24)
        assert var26 is not None
        var27 = module0.BaseJSONConfigManager()
        assert var27 is not None
        var28 = var27.file_name(var24)
        assert var28 == './.json'
        var29 = ''
        var30 = module0.BaseJSONConfigManager()
        assert var30 is not None
        var31 = var30.get(var29)
        assert var31 is not None
        var32 = var30.ensure_config_dir_exists()
        assert var32 is None
        var33 = var30.ensure_config_dir_exists()
        assert var33 is None
        var34 = ''
        var35 = module0.BaseJSONConfigManager()
        assert var35 is not None
        var36 = var35.get(var34)
        assert var36 is not None
        var37 = module0.BaseJSONConfigManager()
        assert var37 is not None
        var38 = var37.ensure_config_dir_exists()
        assert var38 is None
        var39 = b'\x88kt\xb9\xc5\xdcqI\x03\x93\x04\x97\x8f"\x99x\x84'
        var40 = 17
        var41 = var9.set(var39, var40)
    except BaseException:
        pass


def test_case_75():
    try:
        var0 = ''
        var1 = module0.BaseJSONConfigManager()
        assert var1 is not None
        var2 = var1.get(var0)
        assert var2 is not None
        var3 = module0.BaseJSONConfigManager()
        assert var3 is not None
        var4 = ''
        var5 = module0.BaseJSONConfigManager()
        assert var5 is not None
        var6 = var5.get(var4)
        assert var6 is not None
        var7 = module0.BaseJSONConfigManager()
        assert var7 is not None
        var8 = var7.file_name(var4)
        assert var8 == './.json'
        var9 = ''
        var10 = module0.BaseJSONConfigManager()
        assert var10 is not None
        var11 = var10.get(var9)
        assert var11 is not None
        var12 = var10.ensure_config_dir_exists()
        assert var12 is None
        var13 = var10.ensure_config_dir_exists()
        assert var13 is None
        var14 = ''
        var15 = module0.BaseJSONConfigManager()
        assert var15 is not None
        var16 = var15.get(var14)
        assert var16 is not None
        var17 = module0.BaseJSONConfigManager()
        assert var17 is not None
        var18 = var17.ensure_config_dir_exists()
        assert var18 is None
        var19 = ''
        var20 = module0.BaseJSONConfigManager()
        assert var20 is not None
        var21 = var20.get(var19)
        assert var21 is not None
        var22 = module0.BaseJSONConfigManager()
        assert var22 is not None
        var23 = ''
        var24 = module0.BaseJSONConfigManager()
        assert var24 is not None
        var25 = var24.get(var23)
        assert var25 is not None
        var26 = module0.BaseJSONConfigManager()
        assert var26 is not None
        var27 = module0.BaseJSONConfigManager()
        assert var27 is not None
        var28 = 'K&H94v*%\r'
        var29 = {var28: var28, var28: var28, var28: var28}
        var30 = module0.BaseJSONConfigManager(**var29)
        assert var30 is not None
        var31 = var30.ensure_config_dir_exists()
        assert var31 is None
        var32 = ''
        var33 = module0.BaseJSONConfigManager()
        assert var33 is not None
        var34 = var33.get(var32)
        assert var34 is not None
        var35 = var33.ensure_config_dir_exists()
        assert var35 is None
        var36 = ''
        var37 = module0.BaseJSONConfigManager()
        assert var37 is not None
        var38 = var37.get(var36)
        assert var38 is not None
        var39 = module0.BaseJSONConfigManager()
        assert var39 is not None
        var40 = var39.ensure_config_dir_exists()
        assert var40 is None
        var41 = ''
        var42 = module0.BaseJSONConfigManager()
        assert var42 is not None
        var43 = var42.get(var41)
        assert var43 is not None
        var44 = ''
        var45 = module0.BaseJSONConfigManager()
        assert var45 is not None
        var46 = var45.get(var44)
        assert var46 is not None
        var47 = module0.BaseJSONConfigManager()
        assert var47 is not None
        var48 = module0.BaseJSONConfigManager()
        assert var48 is not None
        var49 = module0.BaseJSONConfigManager()
        assert var49 is not None
        var50 = False
        var51 = module0.BaseJSONConfigManager()
        assert var51 is not None
        var52 = var51.file_name(var50)
    except BaseException:
        pass


def test_case_76():
    try:
        var0 = ''
        var1 = module0.BaseJSONConfigManager()
        assert var1 is not None
        var2 = var1.get(var0)
        assert var2 is not None
        var3 = module0.BaseJSONConfigManager()
        assert var3 is not None
        var4 = ''
        var5 = module0.BaseJSONConfigManager()
        assert var5 is not None
        var6 = var5.get(var4)
        assert var6 is not None
        var7 = module0.BaseJSONConfigManager()
        assert var7 is not None
        var8 = var7.file_name(var4)
        assert var8 == './.json'
        var9 = ''
        var10 = module0.BaseJSONConfigManager()
        assert var10 is not None
        var11 = var10.get(var9)
        assert var11 is not None
        var12 = module0.BaseJSONConfigManager()
        assert var12 is not None
        var13 = var12.ensure_config_dir_exists()
        assert var13 is None
        var14 = ''
        var15 = module0.BaseJSONConfigManager()
        assert var15 is not None
        var16 = var15.get(var14)
        assert var16 is not None
        var17 = module0.BaseJSONConfigManager()
        assert var17 is not None
        var18 = ''
        var19 = module0.BaseJSONConfigManager()
        assert var19 is not None
        var20 = var19.get(var18)
        assert var20 is not None
        var21 = module0.BaseJSONConfigManager()
        assert var21 is not None
        var22 = ''
        var23 = module0.BaseJSONConfigManager()
        assert var23 is not None
        var24 = var23.get(var22)
        assert var24 is not None
        var25 = module0.BaseJSONConfigManager()
        assert var25 is not None
        var26 = module0.BaseJSONConfigManager()
        assert var26 is not None
        var27 = module0.BaseJSONConfigManager()
        assert var27 is not None
        var28 = ''
        var29 = module0.BaseJSONConfigManager()
        assert var29 is not None
        var30 = var29.get(var28)
        assert var30 is not None
        var31 = var29.ensure_config_dir_exists()
        assert var31 is None
        var32 = var29.ensure_config_dir_exists()
        assert var32 is None
        var33 = ''
        var34 = module0.BaseJSONConfigManager()
        assert var34 is not None
        var35 = var34.get(var33)
        assert var35 is not None
        var36 = module0.BaseJSONConfigManager()
        assert var36 is not None
        var37 = ''
        var38 = module0.BaseJSONConfigManager()
        assert var38 is not None
        var39 = var38.get(var37)
        assert var39 is not None
        var40 = var38.ensure_config_dir_exists()
        assert var40 is None
        var41 = 'K&H94v*%\r'
        var42 = {var41: var41, var41: var41, var41: var41}
        var43 = module0.BaseJSONConfigManager(**var42)
        assert var43 is not None
        var44 = var43.ensure_config_dir_exists()
        assert var44 is None
        var45 = ''
        var46 = module0.BaseJSONConfigManager()
        assert var46 is not None
        var47 = var46.get(var45)
        assert var47 is not None
        var48 = module0.BaseJSONConfigManager()
        assert var48 is not None
        var49 = var48.ensure_config_dir_exists()
        assert var49 is None
        var50 = -426.44169
        var51 = var12.set(var50, var50)
    except BaseException:
        pass


def test_case_77():
    try:
        var0 = ''
        var1 = module0.BaseJSONConfigManager()
        assert var1 is not None
        var2 = var1.get(var0)
        assert var2 is not None
        var3 = module0.BaseJSONConfigManager()
        assert var3 is not None
        var4 = ''
        var5 = module0.BaseJSONConfigManager()
        assert var5 is not None
        var6 = var5.get(var4)
        assert var6 is not None
        var7 = module0.BaseJSONConfigManager()
        assert var7 is not None
        var8 = var7.file_name(var4)
        assert var8 == './.json'
        var9 = ''
        var10 = module0.BaseJSONConfigManager()
        assert var10 is not None
        var11 = var10.get(var9)
        assert var11 is not None
        var12 = module0.BaseJSONConfigManager()
        assert var12 is not None
        var13 = var12.ensure_config_dir_exists()
        assert var13 is None
        var14 = ''
        var15 = module0.BaseJSONConfigManager()
        assert var15 is not None
        var16 = var15.get(var14)
        assert var16 is not None
        var17 = var15.ensure_config_dir_exists()
        assert var17 is None
        var18 = ''
        var19 = module0.BaseJSONConfigManager()
        assert var19 is not None
        var20 = var19.get(var18)
        assert var20 is not None
        var21 = module0.BaseJSONConfigManager()
        assert var21 is not None
        var22 = var21.ensure_config_dir_exists()
        assert var22 is None
        var23 = ''
        var24 = module0.BaseJSONConfigManager()
        assert var24 is not None
        var25 = var24.get(var23)
        assert var25 is not None
        var26 = module0.BaseJSONConfigManager()
        assert var26 is not None
        var27 = ''
        var28 = module0.BaseJSONConfigManager()
        assert var28 is not None
        var29 = var28.get(var27)
        assert var29 is not None
        var30 = ''
        var31 = module0.BaseJSONConfigManager()
        assert var31 is not None
        var32 = var31.get(var30)
        assert var32 is not None
        var33 = var31.ensure_config_dir_exists()
        assert var33 is None
        var34 = var31.ensure_config_dir_exists()
        assert var34 is None
        var35 = ''
        var36 = module0.BaseJSONConfigManager()
        assert var36 is not None
        var37 = var36.get(var35)
        assert var37 is not None
        var38 = module0.BaseJSONConfigManager()
        assert var38 is not None
        var39 = module0.BaseJSONConfigManager()
        assert var39 is not None
        var40 = module0.BaseJSONConfigManager()
        assert var40 is not None
        var41 = ''
        var42 = module0.BaseJSONConfigManager()
        assert var42 is not None
        var43 = var42.get(var41)
        assert var43 is not None
        var44 = module0.BaseJSONConfigManager()
        assert var44 is not None
        var45 = module0.BaseJSONConfigManager()
        assert var45 is not None
        var46 = 753
        var47 = {var39: var27, var46: var12, var23: var15}
        var48 = var40.file_name(var47)
    except BaseException:
        pass


def test_case_78():
    try:
        var0 = ''
        var1 = module0.BaseJSONConfigManager()
        assert var1 is not None
        var2 = var1.get(var0)
        assert var2 is not None
        var3 = module0.BaseJSONConfigManager()
        assert var3 is not None
        var4 = var3.ensure_config_dir_exists()
        assert var4 is None
        var5 = ''
        var6 = module0.BaseJSONConfigManager()
        assert var6 is not None
        var7 = var6.get(var5)
        assert var7 is not None
        var8 = var6.ensure_config_dir_exists()
        assert var8 is None
        var9 = module0.BaseJSONConfigManager()
        assert var9 is not None
        var10 = 'K&H94v*%\r'
        var11 = {var10: var10, var10: var10, var10: var10}
        var12 = module0.BaseJSONConfigManager(**var11)
        assert var12 is not None
        var13 = var12.ensure_config_dir_exists()
        assert var13 is None
        var14 = ''
        var15 = module0.BaseJSONConfigManager()
        assert var15 is not None
        var16 = var15.get(var14)
        assert var16 is not None
        var17 = module0.BaseJSONConfigManager()
        assert var17 is not None
        var18 = ''
        var19 = module0.BaseJSONConfigManager()
        assert var19 is not None
        var20 = var19.get(var18)
        assert var20 is not None
        var21 = var19.ensure_config_dir_exists()
        assert var21 is None
        var22 = var19.ensure_config_dir_exists()
        assert var22 is None
        var23 = -906.1
        var24 = var3.file_name(var23)
    except BaseException:
        pass


def test_case_79():
    try:
        var0 = module0.BaseJSONConfigManager()
        assert var0 is not None
        var1 = ''
        var2 = 3084
        var3 = var2,
        var4 = var0.update(var1, var3)
    except BaseException:
        pass


def test_case_80():
    try:
        var0 = 'K&H94v*%\r'
        var1 = {var0: var0, var0: var0, var0: var0}
        var2 = module0.BaseJSONConfigManager(**var1)
        assert var2 is not None
        var3 = var2.ensure_config_dir_exists()
        assert var3 is None
        var4 = ''
        var5 = module0.BaseJSONConfigManager()
        assert var5 is not None
        var6 = var5.get(var4)
        assert var6 is not None
        var7 = var5.ensure_config_dir_exists()
        assert var7 is None
        var8 = ''
        var9 = module0.BaseJSONConfigManager()
        assert var9 is not None
        var10 = var9.get(var8)
        assert var10 is not None
        var11 = module0.BaseJSONConfigManager()
        assert var11 is not None
        var12 = var11.ensure_config_dir_exists()
        assert var12 is None
        var13 = ''
        var14 = module0.BaseJSONConfigManager()
        assert var14 is not None
        var15 = var14.get(var13)
        assert var15 is not None
        var16 = module0.BaseJSONConfigManager()
        assert var16 is not None
        var17 = ''
        var18 = module0.BaseJSONConfigManager()
        assert var18 is not None
        var19 = var18.get(var17)
        assert var19 is not None
        var20 = module0.BaseJSONConfigManager()
        assert var20 is not None
        var21 = var20.ensure_config_dir_exists()
        assert var21 is None
        var22 = module0.BaseJSONConfigManager()
        assert var22 is not None
        var23 = -445
        var24 = var9.file_name(var23)
    except BaseException:
        pass


def test_case_81():
    try:
        var0 = ''
        var1 = module0.BaseJSONConfigManager()
        assert var1 is not None
        var2 = var1.get(var0)
        assert var2 is not None
        var3 = module0.BaseJSONConfigManager()
        assert var3 is not None
        var4 = var3.ensure_config_dir_exists()
        assert var4 is None
        var5 = ''
        var6 = module0.BaseJSONConfigManager()
        assert var6 is not None
        var7 = var6.get(var5)
        assert var7 is not None
        var8 = module0.BaseJSONConfigManager()
        assert var8 is not None
        var9 = ''
        var10 = module0.BaseJSONConfigManager()
        assert var10 is not None
        var11 = var10.get(var9)
        assert var11 is not None
        var12 = {}
        var13 = b'i\x9c\x92\x8d\x1a\xc4W[\x9dyW\x12$'
        var14 = var13,
        var15 = var12, var14
        var16 = var8.update(var15, var13)
    except BaseException:
        pass


def test_case_82():
    try:
        var0 = module0.BaseJSONConfigManager()
        assert var0 is not None
        var1 = ''
        var2 = module0.BaseJSONConfigManager()
        assert var2 is not None
        var3 = var2.get(var1)
        assert var3 is not None
        var4 = module0.BaseJSONConfigManager()
        assert var4 is not None
        var5 = var4.ensure_config_dir_exists()
        assert var5 is None
        var6 = ''
        var7 = module0.BaseJSONConfigManager()
        assert var7 is not None
        var8 = var7.get(var6)
        assert var8 is not None
        var9 = module0.BaseJSONConfigManager()
        assert var9 is not None
        var10 = module0.BaseJSONConfigManager()
        assert var10 is not None
        var11 = module0.BaseJSONConfigManager()
        assert var11 is not None
        var12 = ''
        var13 = module0.BaseJSONConfigManager()
        assert var13 is not None
        var14 = var13.get(var12)
        assert var14 is not None
        var15 = module0.BaseJSONConfigManager()
        assert var15 is not None
        var16 = ''
        var17 = module0.BaseJSONConfigManager()
        assert var17 is not None
        var18 = var17.get(var16)
        assert var18 is not None
        var19 = ''
        var20 = module0.BaseJSONConfigManager()
        assert var20 is not None
        var21 = var20.get(var19)
        assert var21 is not None
        var22 = var20.ensure_config_dir_exists()
        assert var22 is None
        var23 = '-'
        var24 = None
        var25 = module0.recursive_update(var23, var24)
    except BaseException:
        pass


def test_case_83():
    try:
        var0 = ''
        var1 = module0.BaseJSONConfigManager()
        assert var1 is not None
        var2 = var1.get(var0)
        assert var2 is not None
        var3 = module0.BaseJSONConfigManager()
        assert var3 is not None
        var4 = ''
        var5 = module0.BaseJSONConfigManager()
        assert var5 is not None
        var6 = var5.get(var4)
        assert var6 is not None
        var7 = module0.BaseJSONConfigManager()
        assert var7 is not None
        var8 = var7.file_name(var4)
        assert var8 == './.json'
        var9 = ''
        var10 = module0.BaseJSONConfigManager()
        assert var10 is not None
        var11 = var10.get(var9)
        assert var11 is not None
        var12 = module0.BaseJSONConfigManager()
        assert var12 is not None
        var13 = var12.ensure_config_dir_exists()
        assert var13 is None
        var14 = ''
        var15 = module0.BaseJSONConfigManager()
        assert var15 is not None
        var16 = var15.get(var14)
        assert var16 is not None
        var17 = module0.BaseJSONConfigManager()
        assert var17 is not None
        var18 = ''
        var19 = module0.BaseJSONConfigManager()
        assert var19 is not None
        var20 = var19.get(var18)
        assert var20 is not None
        var21 = module0.BaseJSONConfigManager()
        assert var21 is not None
        var22 = ''
        var23 = module0.BaseJSONConfigManager()
        assert var23 is not None
        var24 = var23.get(var22)
        assert var24 is not None
        var25 = module0.BaseJSONConfigManager()
        assert var25 is not None
        var26 = var25.ensure_config_dir_exists()
        assert var26 is None
        var27 = '.\x0b\r~[ 0fX\n'
        var28 = var5.set(var23, var27)
    except BaseException:
        pass


def test_case_84():
    try:
        var0 = ''
        var1 = module0.BaseJSONConfigManager()
        assert var1 is not None
        var2 = var1.get(var0)
        assert var2 is not None
        var3 = module0.BaseJSONConfigManager()
        assert var3 is not None
        var4 = var3.ensure_config_dir_exists()
        assert var4 is None
        var5 = ''
        var6 = module0.BaseJSONConfigManager()
        assert var6 is not None
        var7 = var6.get(var5)
        assert var7 is not None
        var8 = module0.BaseJSONConfigManager()
        assert var8 is not None
        var9 = module0.BaseJSONConfigManager()
        assert var9 is not None
        var10 = "f_> \rQLv{h[>$\ns~##'."
        var11 = []
        var12 = var9.set(var10, var11)
    except BaseException:
        pass


def test_case_85():
    try:
        var0 = ''
        var1 = module0.BaseJSONConfigManager()
        assert var1 is not None
        var2 = var1.get(var0)
        assert var2 is not None
        var3 = module0.BaseJSONConfigManager()
        assert var3 is not None
        var4 = module0.BaseJSONConfigManager()
        assert var4 is not None
        var5 = module0.BaseJSONConfigManager()
        assert var5 is not None
        var6 = ''
        var7 = module0.BaseJSONConfigManager()
        assert var7 is not None
        var8 = var7.get(var6)
        assert var8 is not None
        var9 = module0.BaseJSONConfigManager()
        assert var9 is not None
        var10 = var9.ensure_config_dir_exists()
        assert var10 is None
        var11 = ''
        var12 = module0.BaseJSONConfigManager()
        assert var12 is not None
        var13 = var12.get(var11)
        assert var13 is not None
        var14 = module0.BaseJSONConfigManager()
        assert var14 is not None
        var15 = ''
        var16 = module0.BaseJSONConfigManager()
        assert var16 is not None
        var17 = var16.get(var15)
        assert var17 is not None
        var18 = module0.BaseJSONConfigManager()
        assert var18 is not None
        var19 = ''
        var20 = module0.BaseJSONConfigManager()
        assert var20 is not None
        var21 = var20.get(var19)
        assert var21 is not None
        var22 = module0.BaseJSONConfigManager()
        assert var22 is not None
        var23 = var22.ensure_config_dir_exists()
        assert var23 is None
        var24 = 'K&H94v*%\r'
        var25 = {var24: var24, var24: var24, var24: var24}
        var26 = module0.BaseJSONConfigManager(**var25)
        assert var26 is not None
        var27 = var26.ensure_config_dir_exists()
        assert var27 is None
        var28 = ''
        var29 = module0.BaseJSONConfigManager()
        assert var29 is not None
        var30 = var29.get(var28)
        assert var30 is not None
        var31 = module0.BaseJSONConfigManager()
        assert var31 is not None
        var32 = ''
        var33 = module0.BaseJSONConfigManager()
        assert var33 is not None
        var34 = var33.get(var32)
        assert var34 is not None
        var35 = module0.BaseJSONConfigManager()
        assert var35 is not None
        var36 = var35.file_name(var32)
        assert var36 == './.json'
        var37 = module0.BaseJSONConfigManager()
        assert var37 is not None
        var38 = ''
        var39 = module0.BaseJSONConfigManager()
        assert var39 is not None
        var40 = var39.get(var38)
        assert var40 is not None
        var41 = var39.ensure_config_dir_exists()
        assert var41 is None
        var42 = var39.ensure_config_dir_exists()
        assert var42 is None
        var43 = ''
        var44 = module0.BaseJSONConfigManager()
        assert var44 is not None
        var45 = var44.get(var43)
        assert var45 is not None
        var46 = 'zdBe5LfqS3mF\x0bY7'
        var47 = var26.set(var46, var3)
    except BaseException:
        pass


def test_case_86():
    try:
        var0 = ''
        var1 = module0.BaseJSONConfigManager()
        assert var1 is not None
        var2 = var1.get(var0)
        assert var2 is not None
        var3 = var1.ensure_config_dir_exists()
        assert var3 is None
        var4 = var1.ensure_config_dir_exists()
        assert var4 is None
        var5 = ''
        var6 = module0.BaseJSONConfigManager()
        assert var6 is not None
        var7 = var6.get(var5)
        assert var7 is not None
        var8 = module0.BaseJSONConfigManager()
        assert var8 is not None
        var9 = ''
        var10 = module0.BaseJSONConfigManager()
        assert var10 is not None
        var11 = var10.get(var9)
        assert var11 is not None
        var12 = module0.BaseJSONConfigManager()
        assert var12 is not None
        var13 = var12.file_name(var9)
        assert var13 == './.json'
        var14 = ''
        var15 = module0.BaseJSONConfigManager()
        assert var15 is not None
        var16 = var15.get(var14)
        assert var16 is not None
        var17 = module0.BaseJSONConfigManager()
        assert var17 is not None
        var18 = var17.ensure_config_dir_exists()
        assert var18 is None
        var19 = ''
        var20 = module0.BaseJSONConfigManager()
        assert var20 is not None
        var21 = var20.get(var19)
        assert var21 is not None
        var22 = module0.BaseJSONConfigManager()
        assert var22 is not None
        var23 = 'K&H94v*%\r'
        var24 = {var23: var23, var23: var23, var23: var23}
        var25 = module0.BaseJSONConfigManager(**var24)
        assert var25 is not None
        var26 = var25.ensure_config_dir_exists()
        assert var26 is None
        var27 = ''
        var28 = module0.BaseJSONConfigManager()
        assert var28 is not None
        var29 = var28.get(var27)
        assert var29 is not None
        var30 = module0.BaseJSONConfigManager()
        assert var30 is not None
        var31 = var30.ensure_config_dir_exists()
        assert var31 is None
        var32 = ''
        var33 = module0.BaseJSONConfigManager()
        assert var33 is not None
        var34 = var33.get(var32)
        assert var34 is not None
        var35 = module0.BaseJSONConfigManager()
        assert var35 is not None
        var36 = module0.BaseJSONConfigManager()
        assert var36 is not None
        var37 = {var36: var23}
        var38 = None
        var39 = var17.set(var37, var38)
    except BaseException:
        pass


def test_case_87():
    try:
        var0 = ''
        var1 = module0.BaseJSONConfigManager()
        assert var1 is not None
        var2 = var1.get(var0)
        assert var2 is not None
        var3 = var1.ensure_config_dir_exists()
        assert var3 is None
        var4 = -608.807737
        var5 = -2190.0172
        var6 = module0.remove_defaults(var4, var5)
    except BaseException:
        pass


def test_case_88():
    try:
        var0 = ''
        var1 = module0.BaseJSONConfigManager()
        assert var1 is not None
        var2 = var1.get(var0)
        assert var2 is not None
        var3 = module0.BaseJSONConfigManager()
        assert var3 is not None
        var4 = module0.BaseJSONConfigManager()
        assert var4 is not None
        var5 = module0.BaseJSONConfigManager()
        assert var5 is not None
        var6 = ''
        var7 = module0.BaseJSONConfigManager()
        assert var7 is not None
        var8 = var7.get(var6)
        assert var8 is not None
        var9 = module0.BaseJSONConfigManager()
        assert var9 is not None
        var10 = var9.ensure_config_dir_exists()
        assert var10 is None
        var11 = ''
        var12 = module0.BaseJSONConfigManager()
        assert var12 is not None
        var13 = var12.get(var11)
        assert var13 is not None
        var14 = module0.BaseJSONConfigManager()
        assert var14 is not None
        var15 = ''
        var16 = module0.BaseJSONConfigManager()
        assert var16 is not None
        var17 = var16.get(var15)
        assert var17 is not None
        var18 = module0.BaseJSONConfigManager()
        assert var18 is not None
        var19 = var18.file_name(var15)
        assert var19 == './.json'
        var20 = ''
        var21 = module0.BaseJSONConfigManager()
        assert var21 is not None
        var22 = var21.get(var20)
        assert var22 is not None
        var23 = var21.ensure_config_dir_exists()
        assert var23 is None
        var24 = var21.ensure_config_dir_exists()
        assert var24 is None
        var25 = 'K&H94v*%\r'
        var26 = {var25: var25, var25: var25, var25: var25}
        var27 = module0.BaseJSONConfigManager(**var26)
        assert var27 is not None
        var28 = var27.ensure_config_dir_exists()
        assert var28 is None
        var29 = {var0, var20}
        var30 = [var7]
        var31 = {var30: var11, var4: var8}
    except BaseException:
        pass


def test_case_89():
    try:
        var0 = ''
        var1 = module0.BaseJSONConfigManager()
        assert var1 is not None
        var2 = var1.get(var0)
        assert var2 is not None
        var3 = module0.BaseJSONConfigManager()
        assert var3 is not None
        var4 = ''
        var5 = module0.BaseJSONConfigManager()
        assert var5 is not None
        var6 = var5.get(var4)
        assert var6 is not None
        var7 = module0.BaseJSONConfigManager()
        assert var7 is not None
        var8 = ''
        var9 = module0.BaseJSONConfigManager()
        assert var9 is not None
        var10 = var9.get(var8)
        assert var10 is not None
        var11 = module0.BaseJSONConfigManager()
        assert var11 is not None
        var12 = var11.ensure_config_dir_exists()
        assert var12 is None
        var13 = ''
        var14 = module0.BaseJSONConfigManager()
        assert var14 is not None
        var15 = var14.get(var13)
        assert var15 is not None
        var16 = module0.BaseJSONConfigManager()
        assert var16 is not None
        var17 = ''
        var18 = module0.BaseJSONConfigManager()
        assert var18 is not None
        var19 = var18.get(var17)
        assert var19 is not None
        var20 = module0.BaseJSONConfigManager()
        assert var20 is not None
        var21 = ''
        var22 = module0.BaseJSONConfigManager()
        assert var22 is not None
        var23 = var22.get(var21)
        assert var23 is not None
        var24 = module0.BaseJSONConfigManager()
        assert var24 is not None
        var25 = var24.file_name(var21)
        assert var25 == './.json'
        var26 = ''
        var27 = module0.BaseJSONConfigManager()
        assert var27 is not None
        var28 = var27.get(var26)
        assert var28 is not None
        var29 = var27.ensure_config_dir_exists()
        assert var29 is None
        var30 = 'K&H94v*%\r'
        var31 = {var30: var30, var30: var30, var30: var30}
        var32 = module0.BaseJSONConfigManager(**var31)
        assert var32 is not None
        var33 = var32.ensure_config_dir_exists()
        assert var33 is None
        var34 = ''
        var35 = module0.BaseJSONConfigManager()
        assert var35 is not None
        var36 = var35.get(var34)
        assert var36 is not None
        var37 = module0.BaseJSONConfigManager()
        assert var37 is not None
        var38 = var37.ensure_config_dir_exists()
        assert var38 is None
        var39 = ''
        var40 = module0.BaseJSONConfigManager()
        assert var40 is not None
        var41 = var40.get(var39)
        assert var41 is not None
        var42 = module0.BaseJSONConfigManager()
        assert var42 is not None
        var43 = module0.BaseJSONConfigManager()
        assert var43 is not None
        var44 = module0.BaseJSONConfigManager()
        assert var44 is not None
        var45 = True
        var46 = 807
        var47 = module0.remove_defaults(var45, var46)
    except BaseException:
        pass


def test_case_90():
    try:
        var0 = ''
        var1 = module0.BaseJSONConfigManager()
        assert var1 is not None
        var2 = var1.get(var0)
        assert var2 is not None
        var3 = 'K&H94v*%\r'
        var4 = {var3: var3, var3: var3, var3: var3}
        var5 = module0.BaseJSONConfigManager(**var4)
        assert var5 is not None
        var6 = var5.ensure_config_dir_exists()
        assert var6 is None
        var7 = ''
        var8 = module0.BaseJSONConfigManager()
        assert var8 is not None
        var9 = var8.get(var7)
        assert var9 is not None
        var10 = module0.BaseJSONConfigManager()
        assert var10 is not None
        var11 = ''
        var12 = module0.BaseJSONConfigManager()
        assert var12 is not None
        var13 = var12.get(var11)
        assert var13 is not None
        var14 = var12.ensure_config_dir_exists()
        assert var14 is None
        var15 = var12.ensure_config_dir_exists()
        assert var15 is None
        var16 = ''
        var17 = module0.BaseJSONConfigManager()
        assert var17 is not None
        var18 = var17.get(var16)
        assert var18 is not None
        var19 = module0.BaseJSONConfigManager()
        assert var19 is not None
        var20 = ''
        var21 = module0.BaseJSONConfigManager()
        assert var21 is not None
        var22 = var21.get(var20)
        assert var22 is not None
        var23 = module0.BaseJSONConfigManager()
        assert var23 is not None
        var24 = var23.file_name(var20)
        assert var24 == './.json'
        var25 = ''
        var26 = module0.BaseJSONConfigManager()
        assert var26 is not None
        var27 = var26.get(var25)
        assert var27 is not None
        var28 = var26.ensure_config_dir_exists()
        assert var28 is None
        var29 = ''
        var30 = module0.BaseJSONConfigManager()
        assert var30 is not None
        var31 = var30.get(var29)
        assert var31 is not None
        var32 = module0.BaseJSONConfigManager()
        assert var32 is not None
        var33 = var32.ensure_config_dir_exists()
        assert var33 is None
        var34 = module0.BaseJSONConfigManager()
        assert var34 is not None
        var35 = -1737
        var36 = module0.remove_defaults(var16, var35)
    except BaseException:
        pass


def test_case_91():
    try:
        var0 = ''
        var1 = module0.BaseJSONConfigManager()
        assert var1 is not None
        var2 = var1.get(var0)
        assert var2 is not None
        var3 = module0.BaseJSONConfigManager()
        assert var3 is not None
        var4 = var3.ensure_config_dir_exists()
        assert var4 is None
        var5 = ''
        var6 = module0.BaseJSONConfigManager()
        assert var6 is not None
        var7 = var6.get(var5)
        assert var7 is not None
        var8 = module0.BaseJSONConfigManager()
        assert var8 is not None
        var9 = module0.BaseJSONConfigManager()
        assert var9 is not None
        var10 = module0.BaseJSONConfigManager()
        assert var10 is not None
        var11 = ''
        var12 = module0.BaseJSONConfigManager()
        assert var12 is not None
        var13 = var12.get(var11)
        assert var13 is not None
        var14 = module0.BaseJSONConfigManager()
        assert var14 is not None
        var15 = ''
        var16 = module0.BaseJSONConfigManager()
        assert var16 is not None
        var17 = var16.get(var15)
        assert var17 is not None
        var18 = module0.BaseJSONConfigManager()
        assert var18 is not None
        var19 = var18.file_name(var15)
        assert var19 == './.json'
        var20 = ''
        var21 = module0.BaseJSONConfigManager()
        assert var21 is not None
        var22 = var21.get(var20)
        assert var22 is not None
        var23 = var21.ensure_config_dir_exists()
        assert var23 is None
        var24 = var21.ensure_config_dir_exists()
        assert var24 is None
        var25 = ''
        var26 = module0.BaseJSONConfigManager()
        assert var26 is not None
        var27 = var26.get(var25)
        assert var27 is not None
        var28 = module0.BaseJSONConfigManager()
        assert var28 is not None
        var29 = ''
        var30 = module0.BaseJSONConfigManager()
        assert var30 is not None
        var31 = var30.get(var29)
        assert var31 is not None
        var32 = module0.BaseJSONConfigManager()
        assert var32 is not None
        var33 = var32.ensure_config_dir_exists()
        assert var33 is None
        var34 = ''
        var35 = module0.BaseJSONConfigManager()
        assert var35 is not None
        var36 = var35.get(var34)
        assert var36 is not None
        var37 = module0.BaseJSONConfigManager()
        assert var37 is not None
        var38 = ''
        var39 = module0.BaseJSONConfigManager()
        assert var39 is not None
        var40 = var39.get(var38)
        assert var40 is not None
        var41 = var39.ensure_config_dir_exists()
        assert var41 is None
        var42 = 1.0
        var43 = b'\xc7\xd5\xe7k\xcd V\xe7(B9=90\x98\xf0\xfc\xb2'
        var44 = var37.set(var42, var43)
    except BaseException:
        pass


def test_case_92():
    try:
        var0 = ''
        var1 = module0.BaseJSONConfigManager()
        assert var1 is not None
        var2 = var1.get(var0)
        assert var2 is not None
        var3 = module0.BaseJSONConfigManager()
        assert var3 is not None
        var4 = var3.ensure_config_dir_exists()
        assert var4 is None
        var5 = ''
        var6 = module0.BaseJSONConfigManager()
        assert var6 is not None
        var7 = var6.get(var5)
        assert var7 is not None
        var8 = module0.BaseJSONConfigManager()
        assert var8 is not None
        var9 = ''
        var10 = module0.BaseJSONConfigManager()
        assert var10 is not None
        var11 = var10.get(var9)
        assert var11 is not None
        var12 = module0.BaseJSONConfigManager()
        assert var12 is not None
        var13 = ''
        var14 = module0.BaseJSONConfigManager()
        assert var14 is not None
        var15 = var14.get(var13)
        assert var15 is not None
        var16 = module0.BaseJSONConfigManager()
        assert var16 is not None
        var17 = var16.file_name(var13)
        assert var17 == './.json'
        var18 = ''
        var19 = module0.BaseJSONConfigManager()
        assert var19 is not None
        var20 = var19.get(var18)
        assert var20 is not None
        var21 = module0.BaseJSONConfigManager()
        assert var21 is not None
        var22 = var21.ensure_config_dir_exists()
        assert var22 is None
        var23 = ''
        var24 = module0.BaseJSONConfigManager()
        assert var24 is not None
        var25 = var24.get(var23)
        assert var25 is not None
        var26 = var24.ensure_config_dir_exists()
        assert var26 is None
        var27 = var24.ensure_config_dir_exists()
        assert var27 is None
        var28 = 'K&H94v*%\r'
        var29 = {var28: var28, var28: var28, var28: var28}
        var30 = module0.BaseJSONConfigManager(**var29)
        assert var30 is not None
        var31 = var30.ensure_config_dir_exists()
        assert var31 is None
        var32 = module0.BaseJSONConfigManager()
        assert var32 is not None
        var33 = ''
        var34 = module0.BaseJSONConfigManager()
        assert var34 is not None
        var35 = var34.get(var33)
        assert var35 is not None
        var36 = module0.BaseJSONConfigManager()
        assert var36 is not None
        var37 = module0.BaseJSONConfigManager()
        assert var37 is not None
        var38 = module0.BaseJSONConfigManager()
        assert var38 is not None
        var39 = ''
        var40 = module0.BaseJSONConfigManager()
        assert var40 is not None
        var41 = var40.get(var39)
        assert var41 is not None
        var42 = ''
        var43 = module0.BaseJSONConfigManager()
        assert var43 is not None
        var44 = var43.get(var42)
        assert var44 is not None
        var45 = module0.BaseJSONConfigManager()
        assert var45 is not None
        var46 = ''
        var47 = module0.BaseJSONConfigManager()
        assert var47 is not None
        var48 = var47.get(var46)
        assert var48 is not None
        var49 = var47.ensure_config_dir_exists()
        assert var49 is None
        var50 = var47.file_name(var19)
    except BaseException:
        pass


def test_case_93():
    try:
        var0 = ''
        var1 = module0.BaseJSONConfigManager()
        assert var1 is not None
        var2 = var1.get(var0)
        assert var2 is not None
        var3 = ''
        var4 = module0.BaseJSONConfigManager()
        assert var4 is not None
        var5 = var4.get(var3)
        assert var5 is not None
        var6 = module0.BaseJSONConfigManager()
        assert var6 is not None
        var7 = var6.ensure_config_dir_exists()
        assert var7 is None
        var8 = ''
        var9 = module0.BaseJSONConfigManager()
        assert var9 is not None
        var10 = var9.get(var8)
        assert var10 is not None
        var11 = module0.BaseJSONConfigManager()
        assert var11 is not None
        var12 = module0.BaseJSONConfigManager()
        assert var12 is not None
        var13 = ''
        var14 = module0.BaseJSONConfigManager()
        assert var14 is not None
        var15 = var14.get(var13)
        assert var15 is not None
        var16 = module0.BaseJSONConfigManager()
        assert var16 is not None
        var17 = ''
        var18 = module0.BaseJSONConfigManager()
        assert var18 is not None
        var19 = var18.get(var17)
        assert var19 is not None
        var20 = module0.BaseJSONConfigManager()
        assert var20 is not None
        var21 = var20.file_name(var17)
        assert var21 == './.json'
        var22 = ''
        var23 = module0.BaseJSONConfigManager()
        assert var23 is not None
        var24 = var23.get(var22)
        assert var24 is not None
        var25 = module0.BaseJSONConfigManager()
        assert var25 is not None
        var26 = module0.BaseJSONConfigManager()
        assert var26 is not None
        var27 = module0.BaseJSONConfigManager()
        assert var27 is not None
        var28 = ''
        var29 = module0.BaseJSONConfigManager()
        assert var29 is not None
        var30 = var29.get(var28)
        assert var30 is not None
        var31 = var29.ensure_config_dir_exists()
        assert var31 is None
        var32 = var29.ensure_config_dir_exists()
        assert var32 is None
        var33 = 'K&H94v*%\r'
        var34 = {var33: var33, var33: var33, var33: var33}
        var35 = module0.BaseJSONConfigManager(**var34)
        assert var35 is not None
        var36 = var35.ensure_config_dir_exists()
        assert var36 is None
        var37 = ''
        var38 = module0.BaseJSONConfigManager()
        assert var38 is not None
        var39 = var38.get(var37)
        assert var39 is not None
        var40 = module0.BaseJSONConfigManager()
        assert var40 is not None
        var41 = ''
        var42 = module0.BaseJSONConfigManager()
        assert var42 is not None
        var43 = var42.get(var41)
        assert var43 is not None
        var44 = module0.BaseJSONConfigManager()
        assert var44 is not None
        var45 = var44.ensure_config_dir_exists()
        assert var45 is None
        var46 = '/Dl1K~$iJs^&q4sm!`;'
        var47 = None
        var48 = var44.update(var46, var47)
    except BaseException:
        pass


def test_case_94():
    try:
        var0 = ''
        var1 = module0.BaseJSONConfigManager()
        assert var1 is not None
        var2 = var1.get(var0)
        assert var2 is not None
        var3 = var1.ensure_config_dir_exists()
        assert var3 is None
        var4 = ''
        var5 = module0.BaseJSONConfigManager()
        assert var5 is not None
        var6 = var5.get(var4)
        assert var6 is not None
        var7 = module0.BaseJSONConfigManager()
        assert var7 is not None
        var8 = ''
        var9 = module0.BaseJSONConfigManager()
        assert var9 is not None
        var10 = var9.get(var8)
        assert var10 is not None
        var11 = module0.BaseJSONConfigManager()
        assert var11 is not None
        var12 = var11.file_name(var8)
        assert var12 == './.json'
        var13 = ''
        var14 = module0.BaseJSONConfigManager()
        assert var14 is not None
        var15 = var14.get(var13)
        assert var15 is not None
        var16 = module0.BaseJSONConfigManager()
        assert var16 is not None
        var17 = ''
        var18 = module0.BaseJSONConfigManager()
        assert var18 is not None
        var19 = var18.get(var17)
        assert var19 is not None
        var20 = module0.BaseJSONConfigManager()
        assert var20 is not None
        var21 = module0.BaseJSONConfigManager()
        assert var21 is not None
        var22 = module0.BaseJSONConfigManager()
        assert var22 is not None
        var23 = ''
        var24 = module0.BaseJSONConfigManager()
        assert var24 is not None
        var25 = var24.get(var23)
        assert var25 is not None
        var26 = var24.ensure_config_dir_exists()
        assert var26 is None
        var27 = var24.ensure_config_dir_exists()
        assert var27 is None
        var28 = ''
        var29 = module0.BaseJSONConfigManager()
        assert var29 is not None
        var30 = var29.get(var28)
        assert var30 is not None
        var31 = module0.BaseJSONConfigManager()
        assert var31 is not None
        var32 = var31.ensure_config_dir_exists()
        assert var32 is None
        var33 = ''
        var34 = module0.BaseJSONConfigManager()
        assert var34 is not None
        var35 = var34.get(var33)
        assert var35 is not None
        var36 = module0.BaseJSONConfigManager()
        assert var36 is not None
        var37 = ''
        var38 = module0.BaseJSONConfigManager()
        assert var38 is not None
        var39 = var38.get(var37)
        assert var39 is not None
        var40 = module0.BaseJSONConfigManager()
        assert var40 is not None
        var41 = var40.ensure_config_dir_exists()
        assert var41 is None
        var42 = {var4, var29, var35, var11}
    except BaseException:
        pass


def test_case_95():
    try:
        var0 = ''
        var1 = module0.BaseJSONConfigManager()
        assert var1 is not None
        var2 = var1.get(var0)
        assert var2 is not None
        var3 = module0.BaseJSONConfigManager()
        assert var3 is not None
        var4 = module0.BaseJSONConfigManager()
        assert var4 is not None
        var5 = module0.BaseJSONConfigManager()
        assert var5 is not None
        var6 = ''
        var7 = module0.BaseJSONConfigManager()
        assert var7 is not None
        var8 = var7.get(var6)
        assert var8 is not None
        var9 = module0.BaseJSONConfigManager()
        assert var9 is not None
        var10 = var9.ensure_config_dir_exists()
        assert var10 is None
        var11 = ''
        var12 = module0.BaseJSONConfigManager()
        assert var12 is not None
        var13 = var12.get(var11)
        assert var13 is not None
        var14 = module0.BaseJSONConfigManager()
        assert var14 is not None
        var15 = ''
        var16 = module0.BaseJSONConfigManager()
        assert var16 is not None
        var17 = var16.get(var15)
        assert var17 is not None
        var18 = module0.BaseJSONConfigManager()
        assert var18 is not None
        var19 = var18.ensure_config_dir_exists()
        assert var19 is None
        var20 = ''
        var21 = module0.BaseJSONConfigManager()
        assert var21 is not None
        var22 = var21.get(var20)
        assert var22 is not None
        var23 = module0.BaseJSONConfigManager()
        assert var23 is not None
        var24 = ''
        var25 = module0.BaseJSONConfigManager()
        assert var25 is not None
        var26 = var25.get(var24)
        assert var26 is not None
        var27 = module0.BaseJSONConfigManager()
        assert var27 is not None
        var28 = ''
        var29 = module0.BaseJSONConfigManager()
        assert var29 is not None
        var30 = var29.get(var28)
        assert var30 is not None
        var31 = module0.BaseJSONConfigManager()
        assert var31 is not None
        var32 = var31.file_name(var28)
        assert var32 == './.json'
        var33 = {var17, var4, var25}
    except BaseException:
        pass


def test_case_96():
    try:
        var0 = ''
        var1 = module0.BaseJSONConfigManager()
        assert var1 is not None
        var2 = var1.get(var0)
        assert var2 is not None
        var3 = ''
        var4 = module0.BaseJSONConfigManager()
        assert var4 is not None
        var5 = var4.get(var3)
        assert var5 is not None
        var6 = module0.BaseJSONConfigManager()
        assert var6 is not None
        var7 = var6.ensure_config_dir_exists()
        assert var7 is None
        var8 = ''
        var9 = module0.BaseJSONConfigManager()
        assert var9 is not None
        var10 = var9.get(var8)
        assert var10 is not None
        var11 = module0.BaseJSONConfigManager()
        assert var11 is not None
        var12 = ''
        var13 = module0.BaseJSONConfigManager()
        assert var13 is not None
        var14 = var13.get(var12)
        assert var14 is not None
        var15 = module0.BaseJSONConfigManager()
        assert var15 is not None
        var16 = module0.BaseJSONConfigManager()
        assert var16 is not None
        var17 = module0.BaseJSONConfigManager()
        assert var17 is not None
        var18 = ''
        var19 = module0.BaseJSONConfigManager()
        assert var19 is not None
        var20 = var19.get(var18)
        assert var20 is not None
        var21 = module0.BaseJSONConfigManager()
        assert var21 is not None
        var22 = ''
        var23 = module0.BaseJSONConfigManager()
        assert var23 is not None
        var24 = var23.get(var22)
        assert var24 is not None
        var25 = module0.BaseJSONConfigManager()
        assert var25 is not None
        var26 = var25.ensure_config_dir_exists()
        assert var26 is None
        var27 = ''
        var28 = module0.BaseJSONConfigManager()
        assert var28 is not None
        var29 = var28.get(var27)
        assert var29 is not None
        var30 = var28.ensure_config_dir_exists()
        assert var30 is None
        var31 = var28.ensure_config_dir_exists()
        assert var31 is None
        var32 = ''
        var33 = module0.BaseJSONConfigManager()
        assert var33 is not None
        var34 = var33.get(var32)
        assert var34 is not None
        var35 = module0.BaseJSONConfigManager()
        assert var35 is not None
        var36 = ''
        var37 = module0.BaseJSONConfigManager()
        assert var37 is not None
        var38 = var37.get(var36)
        assert var38 is not None
        var39 = module0.BaseJSONConfigManager()
        assert var39 is not None
        var40 = var39.file_name(var36)
        assert var40 == './.json'
        var41 = ''
        var42 = module0.BaseJSONConfigManager()
        assert var42 is not None
        var43 = var42.get(var41)
        assert var43 is not None
        var44 = var42.ensure_config_dir_exists()
        assert var44 is None
        var45 = {var44, var5}
    except BaseException:
        pass


def test_case_97():
    try:
        var0 = ''
        var1 = module0.BaseJSONConfigManager()
        assert var1 is not None
        var2 = var1.get(var0)
        assert var2 is not None
        var3 = module0.BaseJSONConfigManager()
        assert var3 is not None
        var4 = module0.BaseJSONConfigManager()
        assert var4 is not None
        var5 = module0.BaseJSONConfigManager()
        assert var5 is not None
        var6 = ''
        var7 = module0.BaseJSONConfigManager()
        assert var7 is not None
        var8 = var7.get(var6)
        assert var8 is not None
        var9 = module0.BaseJSONConfigManager()
        assert var9 is not None
        var10 = var9.ensure_config_dir_exists()
        assert var10 is None
        var11 = ''
        var12 = module0.BaseJSONConfigManager()
        assert var12 is not None
        var13 = var12.get(var11)
        assert var13 is not None
        var14 = module0.BaseJSONConfigManager()
        assert var14 is not None
        var15 = ''
        var16 = module0.BaseJSONConfigManager()
        assert var16 is not None
        var17 = var16.get(var15)
        assert var17 is not None
        var18 = ''
        var19 = module0.BaseJSONConfigManager()
        assert var19 is not None
        var20 = var19.get(var18)
        assert var20 is not None
        var21 = module0.BaseJSONConfigManager()
        assert var21 is not None
        var22 = ''
        var23 = module0.BaseJSONConfigManager()
        assert var23 is not None
        var24 = var23.get(var22)
        assert var24 is not None
        var25 = module0.BaseJSONConfigManager()
        assert var25 is not None
        var26 = var25.file_name(var22)
        assert var26 == './.json'
        var27 = ''
        var28 = module0.BaseJSONConfigManager()
        assert var28 is not None
        var29 = var28.get(var27)
        assert var29 is not None
        var30 = module0.BaseJSONConfigManager()
        assert var30 is not None
        var31 = 'K&H94v*%\r'
        var32 = {var31: var31, var31: var31, var31: var31}
        var33 = module0.BaseJSONConfigManager(**var32)
        assert var33 is not None
        var34 = var33.ensure_config_dir_exists()
        assert var34 is None
        var35 = module0.BaseJSONConfigManager()
        assert var35 is not None
        var36 = ''
        var37 = module0.BaseJSONConfigManager()
        assert var37 is not None
        var38 = var37.get(var36)
        assert var38 is not None
        var39 = var37.ensure_config_dir_exists()
        assert var39 is None
        var40 = var37.ensure_config_dir_exists()
        assert var40 is None
        var41 = ''
        var42 = module0.BaseJSONConfigManager()
        assert var42 is not None
        var43 = var42.get(var41)
        assert var43 is not None
        var44 = module0.BaseJSONConfigManager()
        assert var44 is not None
        var45 = var44.ensure_config_dir_exists()
        assert var45 is None
        var46 = var28.file_name(var16)
    except BaseException:
        pass


def test_case_98():
    try:
        var0 = ''
        var1 = module0.BaseJSONConfigManager()
        assert var1 is not None
        var2 = var1.get(var0)
        assert var2 is not None
        var3 = module0.BaseJSONConfigManager()
        assert var3 is not None
        var4 = var3.ensure_config_dir_exists()
        assert var4 is None
        var5 = ''
        var6 = module0.BaseJSONConfigManager()
        assert var6 is not None
        var7 = var6.get(var5)
        assert var7 is not None
        var8 = var6.ensure_config_dir_exists()
        assert var8 is None
        var9 = 'K&H94v*%\r'
        var10 = {var9: var9, var9: var9, var9: var9}
        var11 = module0.BaseJSONConfigManager(**var10)
        assert var11 is not None
        var12 = var11.ensure_config_dir_exists()
        assert var12 is None
        var13 = ''
        var14 = module0.BaseJSONConfigManager()
        assert var14 is not None
        var15 = var14.get(var13)
        assert var15 is not None
        var16 = ''
        var17 = module0.BaseJSONConfigManager()
        assert var17 is not None
        var18 = var17.get(var16)
        assert var18 is not None
        var19 = module0.BaseJSONConfigManager()
        assert var19 is not None
        var20 = ''
        var21 = module0.BaseJSONConfigManager()
        assert var21 is not None
        var22 = var21.get(var20)
        assert var22 is not None
        var23 = module0.BaseJSONConfigManager()
        assert var23 is not None
        var24 = var23.ensure_config_dir_exists()
        assert var24 is None
        var25 = ''
        var26 = module0.BaseJSONConfigManager()
        assert var26 is not None
        var27 = var26.get(var25)
        assert var27 is not None
        var28 = module0.BaseJSONConfigManager()
        assert var28 is not None
        var29 = ''
        var30 = module0.BaseJSONConfigManager()
        assert var30 is not None
        var31 = var30.get(var29)
        assert var31 is not None
        var32 = var30.ensure_config_dir_exists()
        assert var32 is None
        var33 = var30.ensure_config_dir_exists()
        assert var33 is None
        var34 = ''
        var35 = module0.BaseJSONConfigManager()
        assert var35 is not None
        var36 = var35.get(var34)
        assert var36 is not None
        var37 = module0.BaseJSONConfigManager()
        assert var37 is not None
        var38 = ''
        var39 = module0.BaseJSONConfigManager()
        assert var39 is not None
        var40 = var39.get(var38)
        assert var40 is not None
        var41 = module0.BaseJSONConfigManager()
        assert var41 is not None
        var42 = var41.file_name(var38)
        assert var42 == './.json'
        var43 = 17
        var44 = var39.directory(var43)
    except BaseException:
        pass


def test_case_99():
    try:
        var0 = False
        var1 = (
            b'\x88\xd4\xef\xd5\x92\xa9\x95\xcb\x99 \x08\x8c\xc5\xd7\xe7\xbf\x83 \x15\xc6'
            )
        var2 = {var0, var1}
        var3 = module0.remove_defaults(var0, var2)
    except BaseException:
        pass


def test_case_100():
    try:
        var0 = 'K&H94v*%\r'
        var1 = {var0: var0, var0: var0, var0: var0}
        var2 = module0.BaseJSONConfigManager(**var1)
        assert var2 is not None
        var3 = var2.ensure_config_dir_exists()
        assert var3 is None
        var4 = ''
        var5 = module0.BaseJSONConfigManager()
        assert var5 is not None
        var6 = var5.get(var4)
        assert var6 is not None
        var7 = module0.BaseJSONConfigManager()
        assert var7 is not None
        var8 = var7.ensure_config_dir_exists()
        assert var8 is None
        var9 = ''
        var10 = module0.BaseJSONConfigManager()
        assert var10 is not None
        var11 = var10.get(var9)
        assert var11 is not None
        var12 = module0.BaseJSONConfigManager()
        assert var12 is not None
        var13 = ''
        var14 = module0.BaseJSONConfigManager()
        assert var14 is not None
        var15 = var14.get(var13)
        assert var15 is not None
        var16 = module0.BaseJSONConfigManager()
        assert var16 is not None
        var17 = ''
        var18 = module0.BaseJSONConfigManager()
        assert var18 is not None
        var19 = var18.get(var17)
        assert var19 is not None
        var20 = module0.BaseJSONConfigManager()
        assert var20 is not None
        var21 = var20.file_name(var17)
        assert var21 == './.json'
        var22 = ''
        var23 = module0.BaseJSONConfigManager()
        assert var23 is not None
        var24 = var23.get(var22)
        assert var24 is not None
        var25 = var23.ensure_config_dir_exists()
        assert var25 is None
        var26 = var23.ensure_config_dir_exists()
        assert var26 is None
        var27 = ''
        var28 = module0.BaseJSONConfigManager()
        assert var28 is not None
        var29 = var28.get(var27)
        assert var29 is not None
        var30 = module0.BaseJSONConfigManager()
        assert var30 is not None
        var31 = module0.BaseJSONConfigManager()
        assert var31 is not None
        var32 = ''
        var33 = module0.BaseJSONConfigManager()
        assert var33 is not None
        var34 = var33.get(var32)
        assert var34 is not None
        var35 = ''
        var36 = module0.BaseJSONConfigManager()
        assert var36 is not None
        var37 = var36.get(var35)
        assert var37 is not None
        var38 = var36.ensure_config_dir_exists()
        assert var38 is None
        var39 = None
        var40 = module0.recursive_update(var39, var39)
    except BaseException:
        pass


def test_case_101():
    try:
        var0 = module0.BaseJSONConfigManager()
        assert var0 is not None
        var1 = ''
        var2 = module0.BaseJSONConfigManager()
        assert var2 is not None
        var3 = var2.get(var1)
        assert var3 is not None
        var4 = var2.ensure_config_dir_exists()
        assert var4 is None
        var5 = ''
        var6 = module0.BaseJSONConfigManager()
        assert var6 is not None
        var7 = var6.get(var5)
        assert var7 is not None
        var8 = module0.BaseJSONConfigManager()
        assert var8 is not None
        var9 = var8.ensure_config_dir_exists()
        assert var9 is None
        var10 = ''
        var11 = module0.BaseJSONConfigManager()
        assert var11 is not None
        var12 = var11.get(var10)
        assert var12 is not None
        var13 = module0.BaseJSONConfigManager()
        assert var13 is not None
        var14 = ''
        var15 = module0.BaseJSONConfigManager()
        assert var15 is not None
        var16 = var15.get(var14)
        assert var16 is not None
        var17 = module0.BaseJSONConfigManager()
        assert var17 is not None
        var18 = ''
        var19 = module0.BaseJSONConfigManager()
        assert var19 is not None
        var20 = var19.get(var18)
        assert var20 is not None
        var21 = module0.BaseJSONConfigManager()
        assert var21 is not None
        var22 = var21.file_name(var18)
        assert var22 == './.json'
        var23 = -696
        var24 = var11.directory(var23)
    except BaseException:
        pass


def test_case_102():
    try:
        var0 = 'Y_2 0H8-b^x5[\tmS~?'
        var1 = None
        var2 = {var1: var1}
        var3 = module0.BaseJSONConfigManager(**var2)
    except BaseException:
        pass


def test_case_103():
    try:
        var0 = ''
        var1 = module0.BaseJSONConfigManager()
        assert var1 is not None
        var2 = var1.get(var0)
        assert var2 is not None
        var3 = module0.BaseJSONConfigManager()
        assert var3 is not None
        var4 = ''
        var5 = module0.BaseJSONConfigManager()
        assert var5 is not None
        var6 = var5.get(var4)
        assert var6 is not None
        var7 = module0.BaseJSONConfigManager()
        assert var7 is not None
        var8 = var7.file_name(var4)
        assert var8 == './.json'
        var9 = ''
        var10 = module0.BaseJSONConfigManager()
        assert var10 is not None
        var11 = var10.get(var9)
        assert var11 is not None
        var12 = module0.BaseJSONConfigManager()
        assert var12 is not None
        var13 = module0.BaseJSONConfigManager()
        assert var13 is not None
        var14 = module0.BaseJSONConfigManager()
        assert var14 is not None
        var15 = module0.BaseJSONConfigManager()
        assert var15 is not None
        var16 = ''
        var17 = module0.BaseJSONConfigManager()
        assert var17 is not None
        var18 = var17.get(var16)
        assert var18 is not None
        var19 = ''
        var20 = module0.BaseJSONConfigManager()
        assert var20 is not None
        var21 = var20.get(var19)
        assert var21 is not None
        var22 = var20.ensure_config_dir_exists()
        assert var22 is None
        var23 = var20.ensure_config_dir_exists()
        assert var23 is None
        var24 = ''
        var25 = module0.BaseJSONConfigManager()
        assert var25 is not None
        var26 = var25.get(var24)
        assert var26 is not None
        var27 = var25.ensure_config_dir_exists()
        assert var27 is None
        var28 = 17
        var29 = '*AEp6+x'
        var30 = [var29]
        var31 = var1.set(var28, var30)
    except BaseException:
        pass


def test_case_104():
    try:
        var0 = ''
        var1 = module0.BaseJSONConfigManager()
        assert var1 is not None
        var2 = var1.get(var0)
        assert var2 is not None
        var3 = module0.BaseJSONConfigManager()
        assert var3 is not None
        var4 = ''
        var5 = module0.BaseJSONConfigManager()
        assert var5 is not None
        var6 = var5.get(var4)
        assert var6 is not None
        var7 = var5.ensure_config_dir_exists()
        assert var7 is None
        var8 = var5.ensure_config_dir_exists()
        assert var8 is None
        var9 = 'K&H94v*%\r'
        var10 = {var9: var9, var9: var9, var9: var9}
        var11 = module0.BaseJSONConfigManager(**var10)
        assert var11 is not None
        var12 = var11.ensure_config_dir_exists()
        assert var12 is None
        var13 = module0.BaseJSONConfigManager()
        assert var13 is not None
        var14 = ''
        var15 = module0.BaseJSONConfigManager()
        assert var15 is not None
        var16 = var15.get(var14)
        assert var16 is not None
        var17 = module0.BaseJSONConfigManager()
        assert var17 is not None
        var18 = var17.ensure_config_dir_exists()
        assert var18 is None
        var19 = ''
        var20 = module0.BaseJSONConfigManager()
        assert var20 is not None
        var21 = var20.get(var19)
        assert var21 is not None
        var22 = module0.BaseJSONConfigManager()
        assert var22 is not None
        var23 = ''
        var24 = module0.BaseJSONConfigManager()
        assert var24 is not None
        var25 = var24.get(var23)
        assert var25 is not None
        var26 = module0.BaseJSONConfigManager()
        assert var26 is not None
        var27 = var26.ensure_config_dir_exists()
        assert var27 is None
        var28 = None
        var29 = b"\xc3\x8c\xb9\xb1\x99['\xe0\xcc\xf3\xecO\xe79Q\xdd\x9ba\xf0"
        var30 = var24.get(var28, var29)
    except BaseException:
        pass


def test_case_105():
    try:
        var0 = ''
        var1 = module0.BaseJSONConfigManager()
        assert var1 is not None
        var2 = var1.get(var0)
        assert var2 is not None
        var3 = module0.BaseJSONConfigManager()
        assert var3 is not None
        var4 = var3.ensure_config_dir_exists()
        assert var4 is None
        var5 = ''
        var6 = module0.BaseJSONConfigManager()
        assert var6 is not None
        var7 = var6.get(var5)
        assert var7 is not None
        var8 = module0.BaseJSONConfigManager()
        assert var8 is not None
        var9 = ''
        var10 = module0.BaseJSONConfigManager()
        assert var10 is not None
        var11 = var10.get(var9)
        assert var11 is not None
        var12 = module0.BaseJSONConfigManager()
        assert var12 is not None
        var13 = module0.BaseJSONConfigManager()
        assert var13 is not None
        var14 = module0.BaseJSONConfigManager()
        assert var14 is not None
        var15 = module0.BaseJSONConfigManager()
        assert var15 is not None
        var16 = ''
        var17 = module0.BaseJSONConfigManager()
        assert var17 is not None
        var18 = var17.get(var16)
        assert var18 is not None
        var19 = ''
        var20 = module0.BaseJSONConfigManager()
        assert var20 is not None
        var21 = var20.get(var19)
        assert var21 is not None
        var22 = module0.BaseJSONConfigManager()
        assert var22 is not None
        var23 = False
        var24 = var8.set(var15, var23)
    except BaseException:
        pass


def test_case_106():
    try:
        var0 = ''
        var1 = module0.BaseJSONConfigManager()
        assert var1 is not None
        var2 = var1.get(var0)
        assert var2 is not None
        var3 = module0.BaseJSONConfigManager()
        assert var3 is not None
        var4 = module0.BaseJSONConfigManager()
        assert var4 is not None
        var5 = module0.BaseJSONConfigManager()
        assert var5 is not None
        var6 = ''
        var7 = module0.BaseJSONConfigManager()
        assert var7 is not None
        var8 = var7.get(var6)
        assert var8 is not None
        var9 = module0.BaseJSONConfigManager()
        assert var9 is not None
        var10 = ''
        var11 = module0.BaseJSONConfigManager()
        assert var11 is not None
        var12 = var11.get(var10)
        assert var12 is not None
        var13 = var11.ensure_config_dir_exists()
        assert var13 is None
        var14 = b'C\xe9\xcf!\x08lc\x8d'
        var15 = var3.directory(var14)
    except BaseException:
        pass


def test_case_107():
    try:
        var0 = ''
        var1 = module0.BaseJSONConfigManager()
        assert var1 is not None
        var2 = var1.get(var0)
        assert var2 is not None
        var3 = module0.BaseJSONConfigManager()
        assert var3 is not None
        var4 = var3.ensure_config_dir_exists()
        assert var4 is None
        var5 = ''
        var6 = module0.BaseJSONConfigManager()
        assert var6 is not None
        var7 = var6.get(var5)
        assert var7 is not None
        var8 = module0.BaseJSONConfigManager()
        assert var8 is not None
        var9 = ''
        var10 = module0.BaseJSONConfigManager()
        assert var10 is not None
        var11 = var10.get(var9)
        assert var11 is not None
        var12 = var10.ensure_config_dir_exists()
        assert var12 is None
        var13 = var10.ensure_config_dir_exists()
        assert var13 is None
        var14 = 'K&H94v*%\r'
        var15 = {var14: var14, var14: var14, var14: var14}
        var16 = module0.BaseJSONConfigManager(**var15)
        assert var16 is not None
        var17 = var16.ensure_config_dir_exists()
        assert var17 is None
        var18 = ''
        var19 = module0.BaseJSONConfigManager()
        assert var19 is not None
        var20 = var19.get(var18)
        assert var20 is not None
        var21 = module0.BaseJSONConfigManager()
        assert var21 is not None
        var22 = var21.ensure_config_dir_exists()
        assert var22 is None
        var23 = ''
        var24 = module0.BaseJSONConfigManager()
        assert var24 is not None
        var25 = var24.get(var23)
        assert var25 is not None
        var26 = var24.ensure_config_dir_exists()
        assert var26 is None
        var27 = ''
        var28 = module0.BaseJSONConfigManager()
        assert var28 is not None
        var29 = var28.get(var27)
        assert var29 is not None
        var30 = module0.BaseJSONConfigManager()
        assert var30 is not None
        var31 = module0.BaseJSONConfigManager()
        assert var31 is not None
        var32 = ''
        var33 = module0.BaseJSONConfigManager()
        assert var33 is not None
        var34 = var33.get(var32)
        assert var34 is not None
        var35 = ''
        var36 = module0.BaseJSONConfigManager()
        assert var36 is not None
        var37 = var36.get(var35)
        assert var37 is not None
        var38 = module0.BaseJSONConfigManager()
        assert var38 is not None
        var39 = ''
        var40 = module0.BaseJSONConfigManager()
        assert var40 is not None
        var41 = var40.get(var39)
        assert var41 is not None
        var42 = module0.BaseJSONConfigManager()
        assert var42 is not None
        var43 = var42.file_name(var39)
        assert var43 == './.json'
        var44 = {var2, var41}
    except BaseException:
        pass


def test_case_108():
    try:
        var0 = ''
        var1 = module0.BaseJSONConfigManager()
        assert var1 is not None
        var2 = var1.get(var0)
        assert var2 is not None
        var3 = var1.ensure_config_dir_exists()
        assert var3 is None
        var4 = ''
        var5 = module0.BaseJSONConfigManager()
        assert var5 is not None
        var6 = var5.get(var4)
        assert var6 is not None
        var7 = module0.BaseJSONConfigManager()
        assert var7 is not None
        var8 = ''
        var9 = module0.BaseJSONConfigManager()
        assert var9 is not None
        var10 = var9.get(var8)
        assert var10 is not None
        var11 = module0.BaseJSONConfigManager()
        assert var11 is not None
        var12 = var11.file_name(var8)
        assert var12 == './.json'
        var13 = module0.BaseJSONConfigManager()
        assert var13 is not None
        var14 = ''
        var15 = module0.BaseJSONConfigManager()
        assert var15 is not None
        var16 = var15.get(var14)
        assert var16 is not None
        var17 = module0.BaseJSONConfigManager()
        assert var17 is not None
        var18 = var17.ensure_config_dir_exists()
        assert var18 is None
        var19 = ''
        var20 = module0.BaseJSONConfigManager()
        assert var20 is not None
        var21 = var20.get(var19)
        assert var21 is not None
        var22 = module0.BaseJSONConfigManager()
        assert var22 is not None
        var23 = 'K&H94v*%\r'
        var24 = {var23: var23, var23: var23, var23: var23}
        var25 = module0.BaseJSONConfigManager(**var24)
        assert var25 is not None
        var26 = var25.ensure_config_dir_exists()
        assert var26 is None
        var27 = ''
        var28 = module0.BaseJSONConfigManager()
        assert var28 is not None
        var29 = var28.get(var27)
        assert var29 is not None
        var30 = module0.BaseJSONConfigManager()
        assert var30 is not None
        var31 = var30.ensure_config_dir_exists()
        assert var31 is None
        var32 = ''
        var33 = module0.BaseJSONConfigManager()
        assert var33 is not None
        var34 = var33.get(var32)
        assert var34 is not None
        var35 = module0.BaseJSONConfigManager()
        assert var35 is not None
        var36 = ''
        var37 = module0.BaseJSONConfigManager()
        assert var37 is not None
        var38 = var37.get(var36)
        assert var38 is not None
        var39 = module0.BaseJSONConfigManager()
        assert var39 is not None
        var40 = module0.BaseJSONConfigManager()
        assert var40 is not None
        var41 = module0.BaseJSONConfigManager()
        assert var41 is not None
        var42 = module0.BaseJSONConfigManager()
        assert var42 is not None
        var43 = {var38}
    except BaseException:
        pass


def test_case_109():
    try:
        var0 = ''
        var1 = module0.BaseJSONConfigManager()
        assert var1 is not None
        var2 = var1.get(var0)
        assert var2 is not None
        var3 = var1.ensure_config_dir_exists()
        assert var3 is None
        var4 = var1.ensure_config_dir_exists()
        assert var4 is None
        var5 = {var2, var3}
    except BaseException:
        pass


def test_case_110():
    try:
        var0 = module0.BaseJSONConfigManager()
        assert var0 is not None
        var1 = False
        var2 = {var1}
        var3 = module0.remove_defaults(var0, var2)
    except BaseException:
        pass


def test_case_111():
    try:
        var0 = ''
        var1 = module0.BaseJSONConfigManager()
        assert var1 is not None
        var2 = var1.get(var0)
        assert var2 is not None
        var3 = module0.BaseJSONConfigManager()
        assert var3 is not None
        var4 = [var3]
        var5 = {var1: var3}
        var6 = module0.remove_defaults(var4, var5)
    except BaseException:
        pass


def test_case_112():
    try:
        var0 = module0.BaseJSONConfigManager()
        assert var0 is not None
        var1 = ''
        var2 = module0.BaseJSONConfigManager()
        assert var2 is not None
        var3 = var2.get(var1)
        assert var3 is not None
        var4 = ''
        var5 = module0.BaseJSONConfigManager()
        assert var5 is not None
        var6 = var5.get(var4)
        assert var6 is not None
        var7 = var5.ensure_config_dir_exists()
        assert var7 is None
        var8 = var5.ensure_config_dir_exists()
        assert var8 is None
        var9 = ''
        var10 = module0.BaseJSONConfigManager()
        assert var10 is not None
        var11 = var10.get(var9)
        assert var11 is not None
        var12 = module0.BaseJSONConfigManager()
        assert var12 is not None
        var13 = var12.ensure_config_dir_exists()
        assert var13 is None
        var14 = ''
        var15 = module0.BaseJSONConfigManager()
        assert var15 is not None
        var16 = var15.get(var14)
        assert var16 is not None
        var17 = module0.BaseJSONConfigManager()
        assert var17 is not None
        var18 = ''
        var19 = module0.BaseJSONConfigManager()
        assert var19 is not None
        var20 = var19.get(var18)
        assert var20 is not None
        var21 = var19.ensure_config_dir_exists()
        assert var21 is None
        var22 = 'K&H94v*%\r'
        var23 = {var22: var22, var22: var22, var22: var22}
        var24 = module0.BaseJSONConfigManager(**var23)
        assert var24 is not None
        var25 = var24.ensure_config_dir_exists()
        assert var25 is None
        var26 = -1074
        var27 = 28
        var28 = module0.BaseJSONConfigManager()
        assert var28 is not None
        var29 = var28.set(var26, var27)
    except BaseException:
        pass


def test_case_113():
    try:
        var0 = ''
        var1 = module0.BaseJSONConfigManager()
        assert var1 is not None
        var2 = var1.get(var0)
        assert var2 is not None
        var3 = module0.BaseJSONConfigManager()
        assert var3 is not None
        var4 = ''
        var5 = module0.BaseJSONConfigManager()
        assert var5 is not None
        var6 = var5.get(var4)
        assert var6 is not None
        var7 = module0.BaseJSONConfigManager()
        assert var7 is not None
        var8 = var7.file_name(var4)
        assert var8 == './.json'
        var9 = None
        var10 = module0.remove_defaults(var9, var3)
    except BaseException:
        pass


def test_case_114():
    try:
        var0 = ''
        var1 = module0.BaseJSONConfigManager()
        assert var1 is not None
        var2 = var1.get(var0)
        assert var2 is not None
        var3 = module0.BaseJSONConfigManager()
        assert var3 is not None
        var4 = ''
        var5 = module0.BaseJSONConfigManager()
        assert var5 is not None
        var6 = var5.get(var4)
        assert var6 is not None
        var7 = module0.BaseJSONConfigManager()
        assert var7 is not None
        var8 = var7.ensure_config_dir_exists()
        assert var8 is None
        var9 = ''
        var10 = module0.BaseJSONConfigManager()
        assert var10 is not None
        var11 = var10.get(var9)
        assert var11 is not None
        var12 = module0.BaseJSONConfigManager()
        assert var12 is not None
        var13 = ''
        var14 = module0.BaseJSONConfigManager()
        assert var14 is not None
        var15 = var14.get(var13)
        assert var15 is not None
        var16 = [var5, var12, var4]
        var17 = {var9, var7}
        var18 = var1.set(var16, var17)
    except BaseException:
        pass


def test_case_115():
    try:
        var0 = ''
        var1 = module0.BaseJSONConfigManager()
        assert var1 is not None
        var2 = var1.get(var0)
        assert var2 is not None
        var3 = module0.BaseJSONConfigManager()
        assert var3 is not None
        var4 = module0.BaseJSONConfigManager()
        assert var4 is not None
        var5 = module0.BaseJSONConfigManager()
        assert var5 is not None
        var6 = ''
        var7 = module0.BaseJSONConfigManager()
        assert var7 is not None
        var8 = var7.get(var6)
        assert var8 is not None
        var9 = module0.BaseJSONConfigManager()
        assert var9 is not None
        var10 = ''
        var11 = module0.BaseJSONConfigManager()
        assert var11 is not None
        var12 = var11.get(var10)
        assert var12 is not None
        var13 = var11.ensure_config_dir_exists()
        assert var13 is None
        var14 = ''
        var15 = module0.BaseJSONConfigManager()
        assert var15 is not None
        var16 = var15.get(var14)
        assert var16 is not None
        var17 = var15.ensure_config_dir_exists()
        assert var17 is None
        var18 = var15.ensure_config_dir_exists()
        assert var18 is None
        var19 = module0.BaseJSONConfigManager()
        assert var19 is not None
        var20 = {}
        var21 = var3.set(var1, var20)
    except BaseException:
        pass


def test_case_116():
    try:
        var0 = ''
        var1 = module0.BaseJSONConfigManager()
        assert var1 is not None
        var2 = var1.get(var0)
        assert var2 is not None
        var3 = module0.BaseJSONConfigManager()
        assert var3 is not None
        var4 = var3.ensure_config_dir_exists()
        assert var4 is None
        var5 = ''
        var6 = module0.BaseJSONConfigManager()
        assert var6 is not None
        var7 = var6.get(var5)
        assert var7 is not None
        var8 = module0.BaseJSONConfigManager()
        assert var8 is not None
        var9 = ''
        var10 = module0.BaseJSONConfigManager()
        assert var10 is not None
        var11 = var10.get(var9)
        assert var11 is not None
        var12 = module0.BaseJSONConfigManager()
        assert var12 is not None
        var13 = var12.ensure_config_dir_exists()
        assert var13 is None
        var14 = [var6, var13]
        var15 = {}
        var16 = var14, var15, var0
        var17 = 1233.03
        var18 = var8.update(var16, var17)
    except BaseException:
        pass


def test_case_117():
    try:
        var0 = ''
        var1 = module0.BaseJSONConfigManager()
        assert var1 is not None
        var2 = var1.get(var0)
        assert var2 is not None
        var3 = module0.BaseJSONConfigManager()
        assert var3 is not None
        var4 = var3.ensure_config_dir_exists()
        assert var4 is None
        var5 = ''
        var6 = module0.BaseJSONConfigManager()
        assert var6 is not None
        var7 = var6.get(var5)
        assert var7 is not None
        var8 = module0.BaseJSONConfigManager()
        assert var8 is not None
        var9 = ''
        var10 = module0.BaseJSONConfigManager()
        assert var10 is not None
        var11 = var10.get(var9)
        assert var11 is not None
        var12 = module0.BaseJSONConfigManager()
        assert var12 is not None
        var13 = ''
        var14 = module0.BaseJSONConfigManager()
        assert var14 is not None
        var15 = var14.get(var13)
        assert var15 is not None
        var16 = var14.ensure_config_dir_exists()
        assert var16 is None
        var17 = var14.ensure_config_dir_exists()
        assert var17 is None
        var18 = ''
        var19 = module0.BaseJSONConfigManager()
        assert var19 is not None
        var20 = var19.get(var18)
        assert var20 is not None
        var21 = module0.BaseJSONConfigManager()
        assert var21 is not None
        var22 = ''
        var23 = module0.BaseJSONConfigManager()
        assert var23 is not None
        var24 = var23.get(var22)
        assert var24 is not None
        var25 = module0.BaseJSONConfigManager()
        assert var25 is not None
        var26 = var25.file_name(var22)
        assert var26 == './.json'
        var27 = ''
        var28 = module0.BaseJSONConfigManager()
        assert var28 is not None
        var29 = var28.get(var27)
        assert var29 is not None
        var30 = module0.BaseJSONConfigManager()
        assert var30 is not None
        var31 = var30.ensure_config_dir_exists()
        assert var31 is None
        var32 = ''
        var33 = module0.BaseJSONConfigManager()
        assert var33 is not None
        var34 = var33.get(var32)
        assert var34 is not None
        var35 = var33.ensure_config_dir_exists()
        assert var35 is None
        var36 = ''
        var37 = module0.BaseJSONConfigManager()
        assert var37 is not None
        var38 = var37.get(var36)
        assert var38 is not None
        var39 = module0.BaseJSONConfigManager()
        assert var39 is not None
        var40 = module0.BaseJSONConfigManager()
        assert var40 is not None
        var41 = module0.BaseJSONConfigManager()
        assert var41 is not None
        var42 = module0.BaseJSONConfigManager()
        assert var42 is not None
        var43 = 'K&H94v*%\r'
        var44 = {var43: var43, var43: var43, var43: var43}
        var45 = module0.BaseJSONConfigManager(**var44)
        assert var45 is not None
        var46 = var45.ensure_config_dir_exists()
        assert var46 is None
        var47 = ''
        var48 = module0.BaseJSONConfigManager()
        assert var48 is not None
        var49 = var48.get(var47)
        assert var49 is not None
        var50 = False
        var51 = 17
        var52 = module0.recursive_update(var50, var51)
    except BaseException:
        pass


def test_case_118():
    try:
        var0 = module0.BaseJSONConfigManager()
        assert var0 is not None
        var1 = ''
        var2 = module0.BaseJSONConfigManager()
        assert var2 is not None
        var3 = var2.get(var1)
        assert var3 is not None
        var4 = module0.BaseJSONConfigManager()
        assert var4 is not None
        var5 = var4.ensure_config_dir_exists()
        assert var5 is None
        var6 = ''
        var7 = module0.BaseJSONConfigManager()
        assert var7 is not None
        var8 = var7.get(var6)
        assert var8 is not None
        var9 = var7.ensure_config_dir_exists()
        assert var9 is None
        var10 = ''
        var11 = module0.BaseJSONConfigManager()
        assert var11 is not None
        var12 = var11.get(var10)
        assert var12 is not None
        var13 = False
        var14 = var11.file_name(var13)
    except BaseException:
        pass


def test_case_119():
    try:
        var0 = ''
        var1 = module0.BaseJSONConfigManager()
        assert var1 is not None
        var2 = var1.get(var0)
        assert var2 is not None
        var3 = module0.BaseJSONConfigManager()
        assert var3 is not None
        var4 = ''
        var5 = module0.BaseJSONConfigManager()
        assert var5 is not None
        var6 = var5.get(var4)
        assert var6 is not None
        var7 = module0.BaseJSONConfigManager()
        assert var7 is not None
        var8 = ''
        var9 = module0.BaseJSONConfigManager()
        assert var9 is not None
        var10 = var9.get(var8)
        assert var10 is not None
        var11 = module0.BaseJSONConfigManager()
        assert var11 is not None
        var12 = var11.file_name(var8)
        assert var12 == './.json'
        var13 = module0.BaseJSONConfigManager()
        assert var13 is not None
        var14 = ''
        var15 = module0.BaseJSONConfigManager()
        assert var15 is not None
        var16 = var15.get(var14)
        assert var16 is not None
        var17 = module0.BaseJSONConfigManager()
        assert var17 is not None
        var18 = var17.ensure_config_dir_exists()
        assert var18 is None
        var19 = ''
        var20 = module0.BaseJSONConfigManager()
        assert var20 is not None
        var21 = var20.get(var19)
        assert var21 is not None
        var22 = var20.ensure_config_dir_exists()
        assert var22 is None
        var23 = 'K&H94v*%\r'
        var24 = {var23: var23, var23: var23, var23: var23}
        var25 = module0.BaseJSONConfigManager(**var24)
        assert var25 is not None
        var26 = var25.ensure_config_dir_exists()
        assert var26 is None
        var27 = '=E2\\~'
        var28 = module0.BaseJSONConfigManager()
        assert var28 is not None
        var29 = var11.set(var27, var28)
    except BaseException:
        pass


def test_case_120():
    try:
        var0 = ''
        var1 = module0.BaseJSONConfigManager()
        assert var1 is not None
        var2 = var1.get(var0)
        assert var2 is not None
        var3 = module0.BaseJSONConfigManager()
        assert var3 is not None
        var4 = var3.ensure_config_dir_exists()
        assert var4 is None
        var5 = ''
        var6 = module0.BaseJSONConfigManager()
        assert var6 is not None
        var7 = var6.get(var5)
        assert var7 is not None
        var8 = module0.BaseJSONConfigManager()
        assert var8 is not None
        var9 = {var0: var2}
        var10 = module0.BaseJSONConfigManager(**var9)
        assert var10 is not None
        var11 = 'oX;%x(w6W[+Z\\zlCAmy'
        var12 = [var3, var5]
        var13 = var10, var11, var12
        var14 = {var0: var2, var13: var10, var9: var2, var11: var4}
    except BaseException:
        pass


def test_case_121():
    try:
        var0 = ''
        var1 = module0.BaseJSONConfigManager()
        assert var1 is not None
        var2 = var1.get(var0)
        assert var2 is not None
        var3 = module0.BaseJSONConfigManager()
        assert var3 is not None
        var4 = module0.BaseJSONConfigManager()
        assert var4 is not None
        var5 = module0.BaseJSONConfigManager()
        assert var5 is not None
        var6 = ''
        var7 = module0.BaseJSONConfigManager()
        assert var7 is not None
        var8 = var7.get(var6)
        assert var8 is not None
        var9 = module0.BaseJSONConfigManager()
        assert var9 is not None
        var10 = module0.BaseJSONConfigManager()
        assert var10 is not None
        var11 = ''
        var12 = module0.BaseJSONConfigManager()
        assert var12 is not None
        var13 = var12.get(var11)
        assert var13 is not None
        var14 = var12.ensure_config_dir_exists()
        assert var14 is None
        var15 = ''
        var16 = module0.BaseJSONConfigManager()
        assert var16 is not None
        var17 = var16.get(var15)
        assert var17 is not None
        var18 = module0.BaseJSONConfigManager()
        assert var18 is not None
        var19 = ''
        var20 = module0.BaseJSONConfigManager()
        assert var20 is not None
        var21 = var20.get(var19)
        assert var21 is not None
        var22 = module0.BaseJSONConfigManager()
        assert var22 is not None
        var23 = var22.file_name(var19)
        assert var23 == './.json'
        var24 = ''
        var25 = module0.BaseJSONConfigManager()
        assert var25 is not None
        var26 = var25.get(var24)
        assert var26 is not None
        var27 = module0.BaseJSONConfigManager()
        assert var27 is not None
        var28 = var27.ensure_config_dir_exists()
        assert var28 is None
        var29 = ''
        var30 = module0.BaseJSONConfigManager()
        assert var30 is not None
        var31 = var30.get(var29)
        assert var31 is not None
        var32 = var30.ensure_config_dir_exists()
        assert var32 is None
        var33 = var30.ensure_config_dir_exists()
        assert var33 is None
        var34 = b'\n\xcd\xee\x08hR\x08\xdac\xc3\x7f\x84I4O'
        var35 = 17
        var36 = b''
        var37 = ',Y\nAOTBtmRGnGpaNK'
        var38 = var34, var36, var19, var37
        var39 = var34, var35, var38
        var40 = False
        var41 = var39, var40
        var42 = [var39, var15, var34]
        var43 = module0.BaseJSONConfigManager()
        assert var43 is not None
        var44 = var43.set(var41, var42)
    except BaseException:
        pass


def test_case_122():
    try:
        var0 = ''
        var1 = module0.BaseJSONConfigManager()
        assert var1 is not None
        var2 = var1.get(var0)
        assert var2 is not None
        var3 = module0.BaseJSONConfigManager()
        assert var3 is not None
        var4 = var3.ensure_config_dir_exists()
        assert var4 is None
        var5 = ''
        var6 = module0.BaseJSONConfigManager()
        assert var6 is not None
        var7 = var6.get(var5)
        assert var7 is not None
        var8 = module0.BaseJSONConfigManager()
        assert var8 is not None
        var9 = ''
        var10 = module0.BaseJSONConfigManager()
        assert var10 is not None
        var11 = var10.get(var9)
        assert var11 is not None
        var12 = module0.BaseJSONConfigManager()
        assert var12 is not None
        var13 = ''
        var14 = module0.BaseJSONConfigManager()
        assert var14 is not None
        var15 = var14.get(var13)
        assert var15 is not None
        var16 = module0.BaseJSONConfigManager()
        assert var16 is not None
        var17 = ''
        var18 = module0.BaseJSONConfigManager()
        assert var18 is not None
        var19 = var18.get(var17)
        assert var19 is not None
        var20 = module0.BaseJSONConfigManager()
        assert var20 is not None
        var21 = var20.file_name(var17)
        assert var21 == './.json'
        var22 = ''
        var23 = module0.BaseJSONConfigManager()
        assert var23 is not None
        var24 = var23.get(var22)
        assert var24 is not None
        var25 = module0.BaseJSONConfigManager()
        assert var25 is not None
        var26 = module0.BaseJSONConfigManager()
        assert var26 is not None
        var27 = module0.BaseJSONConfigManager()
        assert var27 is not None
        var28 = ''
        var29 = module0.BaseJSONConfigManager()
        assert var29 is not None
        var30 = var29.get(var28)
        assert var30 is not None
        var31 = module0.BaseJSONConfigManager()
        assert var31 is not None
        var32 = var31.ensure_config_dir_exists()
        assert var32 is None
        var33 = 'K&H94v*%\r'
        var34 = {var33: var33, var33: var33, var33: var33}
        var35 = module0.BaseJSONConfigManager(**var34)
        assert var35 is not None
        var36 = var35.ensure_config_dir_exists()
        assert var36 is None
        var37 = ''
        var38 = module0.BaseJSONConfigManager()
        assert var38 is not None
        var39 = var38.get(var37)
        assert var39 is not None
        var40 = var38.ensure_config_dir_exists()
        assert var40 is None
        var41 = ''
        var42 = module0.BaseJSONConfigManager()
        assert var42 is not None
        var43 = var42.get(var41)
        assert var43 is not None
        var44 = var42.ensure_config_dir_exists()
        assert var44 is None
        var45 = var42.ensure_config_dir_exists()
        assert var45 is None
        var46 = module0.BaseJSONConfigManager()
        assert var46 is not None
        var47 = ''
        var48 = module0.BaseJSONConfigManager()
        assert var48 is not None
        var49 = var48.get(var47)
        assert var49 is not None
        var50 = module0.BaseJSONConfigManager()
        assert var50 is not None
        var51 = var50.file_name(var3)
    except BaseException:
        pass


def test_case_123():
    try:
        var0 = ''
        var1 = module0.BaseJSONConfigManager()
        assert var1 is not None
        var2 = var1.get(var0)
        assert var2 is not None
        var3 = module0.BaseJSONConfigManager()
        assert var3 is not None
        var4 = module0.BaseJSONConfigManager()
        assert var4 is not None
        var5 = module0.BaseJSONConfigManager()
        assert var5 is not None
        var6 = ''
        var7 = module0.BaseJSONConfigManager()
        assert var7 is not None
        var8 = var7.get(var6)
        assert var8 is not None
        var9 = var7.ensure_config_dir_exists()
        assert var9 is None
        var10 = ''
        var11 = module0.BaseJSONConfigManager()
        assert var11 is not None
        var12 = var11.get(var10)
        assert var12 is not None
        var13 = var11.ensure_config_dir_exists()
        assert var13 is None
        var14 = var11.ensure_config_dir_exists()
        assert var14 is None
        var15 = ''
        var16 = module0.BaseJSONConfigManager()
        assert var16 is not None
        var17 = var16.get(var15)
        assert var17 is not None
        var18 = module0.BaseJSONConfigManager()
        assert var18 is not None
        var19 = '7\rnof`\tT=1,'
        var20 = b"[\x1c\xc6'y\xc9\xd2\xed\x19\x1c\x17\x0b\x94W\x07\x1fK\xd7"
        var21 = var20,
        var22 = var16.set(var19, var21)
    except BaseException:
        pass


def test_case_124():
    try:
        var0 = ''
        var1 = module0.BaseJSONConfigManager()
        assert var1 is not None
        var2 = var1.get(var0)
        assert var2 is not None
        var3 = var1.ensure_config_dir_exists()
        assert var3 is None
        var4 = var1.ensure_config_dir_exists()
        assert var4 is None
        var5 = module0.BaseJSONConfigManager()
        assert var5 is not None
        var6 = ''
        var7 = module0.BaseJSONConfigManager()
        assert var7 is not None
        var8 = var7.get(var6)
        assert var8 is not None
        var9 = module0.BaseJSONConfigManager()
        assert var9 is not None
        var10 = module0.BaseJSONConfigManager()
        assert var10 is not None
        var11 = module0.BaseJSONConfigManager()
        assert var11 is not None
        var12 = ''
        var13 = module0.BaseJSONConfigManager()
        assert var13 is not None
        var14 = var13.get(var12)
        assert var14 is not None
        var15 = module0.BaseJSONConfigManager()
        assert var15 is not None
        var16 = var15.ensure_config_dir_exists()
        assert var16 is None
        var17 = ''
        var18 = module0.BaseJSONConfigManager()
        assert var18 is not None
        var19 = var18.get(var17)
        assert var19 is not None
        var20 = var18.ensure_config_dir_exists()
        assert var20 is None
        var21 = var18.ensure_config_dir_exists()
        assert var21 is None
        var22 = ''
        var23 = module0.BaseJSONConfigManager()
        assert var23 is not None
        var24 = var23.get(var22)
        assert var24 is not None
        var25 = var23.ensure_config_dir_exists()
        assert var25 is None
        var26 = 'K&H94v*%\r'
        var27 = {var26: var26, var26: var26, var26: var26}
        var28 = module0.BaseJSONConfigManager(**var27)
        assert var28 is not None
        var29 = var28.ensure_config_dir_exists()
        assert var29 is None
        var30 = '- y8JD(\\a'
        var31 = var30,
        var32 = module0.BaseJSONConfigManager()
        assert var32 is not None
        var33 = var32.set(var13, var31)
    except BaseException:
        pass


def test_case_125():
    try:
        var0 = ''
        var1 = module0.BaseJSONConfigManager()
        assert var1 is not None
        var2 = var1.get(var0)
        assert var2 is not None
        var3 = module0.BaseJSONConfigManager()
        assert var3 is not None
        var4 = ''
        var5 = module0.BaseJSONConfigManager()
        assert var5 is not None
        var6 = var5.get(var4)
        assert var6 is not None
        var7 = module0.BaseJSONConfigManager()
        assert var7 is not None
        var8 = var7.file_name(var4)
        assert var8 == './.json'
        var9 = ''
        var10 = module0.BaseJSONConfigManager()
        assert var10 is not None
        var11 = var10.get(var9)
        assert var11 is not None
        var12 = var10.ensure_config_dir_exists()
        assert var12 is None
        var13 = var10.ensure_config_dir_exists()
        assert var13 is None
        var14 = module0.BaseJSONConfigManager()
        assert var14 is not None
        var15 = ''
        var16 = module0.BaseJSONConfigManager()
        assert var16 is not None
        var17 = var16.get(var15)
        assert var17 is not None
        var18 = module0.BaseJSONConfigManager()
        assert var18 is not None
        var19 = module0.BaseJSONConfigManager()
        assert var19 is not None
        var20 = module0.BaseJSONConfigManager()
        assert var20 is not None
        var21 = ''
        var22 = module0.BaseJSONConfigManager()
        assert var22 is not None
        var23 = var22.get(var21)
        assert var23 is not None
        var24 = module0.BaseJSONConfigManager()
        assert var24 is not None
        var25 = var24.ensure_config_dir_exists()
        assert var25 is None
        var26 = module0.BaseJSONConfigManager()
        assert var26 is not None
        var27 = ''
        var28 = module0.BaseJSONConfigManager()
        assert var28 is not None
        var29 = var28.get(var27)
        assert var29 is not None
        var30 = module0.BaseJSONConfigManager()
        assert var30 is not None
        var31 = var30.ensure_config_dir_exists()
        assert var31 is None
        var32 = ''
        var33 = module0.BaseJSONConfigManager()
        assert var33 is not None
        var34 = var33.get(var32)
        assert var34 is not None
        var35 = module0.BaseJSONConfigManager()
        assert var35 is not None
        var36 = ''
        var37 = module0.BaseJSONConfigManager()
        assert var37 is not None
        var38 = var37.get(var36)
        assert var38 is not None
        var39 = ''
        var40 = module0.BaseJSONConfigManager()
        assert var40 is not None
        var41 = var40.get(var39)
        assert var41 is not None
        var42 = var40.ensure_config_dir_exists()
        assert var42 is None
        var43 = ''
        var44 = module0.BaseJSONConfigManager()
        assert var44 is not None
        var45 = var44.get(var43)
        assert var45 is not None
        var46 = var44.ensure_config_dir_exists()
        assert var46 is None
        var47 = var44.ensure_config_dir_exists()
        assert var47 is None
        var48 = [var12, var39, var28]
        var49 = {}
        var50 = {var49, var49, var13}
    except BaseException:
        pass


def test_case_126():
    try:
        var0 = 'K&H94v*%\r'
        var1 = {var0: var0, var0: var0, var0: var0}
        var2 = module0.BaseJSONConfigManager(**var1)
        assert var2 is not None
        var3 = var2.ensure_config_dir_exists()
        assert var3 is None
        var4 = ''
        var5 = module0.BaseJSONConfigManager()
        assert var5 is not None
        var6 = var5.get(var4)
        assert var6 is not None
        var7 = var5.ensure_config_dir_exists()
        assert var7 is None
        var8 = var5.ensure_config_dir_exists()
        assert var8 is None
        var9 = module0.BaseJSONConfigManager()
        assert var9 is not None
        var10 = ''
        var11 = module0.BaseJSONConfigManager()
        assert var11 is not None
        var12 = var11.get(var10)
        assert var12 is not None
        var13 = var11.ensure_config_dir_exists()
        assert var13 is None
        var14 = var11.ensure_config_dir_exists()
        assert var14 is None
        var15 = ''
        var16 = module0.BaseJSONConfigManager()
        assert var16 is not None
        var17 = var16.get(var15)
        assert var17 is not None
        var18 = module0.BaseJSONConfigManager()
        assert var18 is not None
        var19 = var18.ensure_config_dir_exists()
        assert var19 is None
        var20 = ''
        var21 = module0.BaseJSONConfigManager()
        assert var21 is not None
        var22 = var21.get(var20)
        assert var22 is not None
        var23 = module0.BaseJSONConfigManager()
        assert var23 is not None
        var24 = ''
        var25 = module0.BaseJSONConfigManager()
        assert var25 is not None
        var26 = var25.get(var24)
        assert var26 is not None
        var27 = module0.BaseJSONConfigManager()
        assert var27 is not None
        var28 = module0.BaseJSONConfigManager()
        assert var28 is not None
        var29 = module0.BaseJSONConfigManager()
        assert var29 is not None
        var30 = module0.BaseJSONConfigManager()
        assert var30 is not None
        var31 = ''
        var32 = module0.BaseJSONConfigManager()
        assert var32 is not None
        var33 = var32.get(var31)
        assert var33 is not None
        var34 = ''
        var35 = module0.BaseJSONConfigManager()
        assert var35 is not None
        var36 = var35.get(var34)
        assert var36 is not None
        var37 = module0.BaseJSONConfigManager()
        assert var37 is not None
        var38 = ''
        var39 = module0.BaseJSONConfigManager()
        assert var39 is not None
        var40 = var39.get(var38)
        assert var40 is not None
        var41 = module0.BaseJSONConfigManager()
        assert var41 is not None
        var42 = var41.file_name(var38)
        assert var42 == './.json'
        var43 = 'vo6a}bNN1e$>-\x0bWHSp'
        var44 = """Start a kernel for a session and return its kernel_id.

        Parameters
        ----------
        kernel_id : uuid
            The uuid to associate the new kernel with. If this
            is not None, this kernel will be persistent whenever it is
            requested.
        path : API path
            The API path (unicode, '/' delimited) for the cwd.
            Will be transformed to an OS path relative to root_dir.
        """
        var45 = var32.set(var43, var44)
    except BaseException:
        pass


def test_case_127():
    try:
        var0 = ''
        var1 = module0.BaseJSONConfigManager()
        assert var1 is not None
        var2 = var1.get(var0)
        assert var2 is not None
        var3 = module0.BaseJSONConfigManager()
        assert var3 is not None
        var4 = ''
        var5 = module0.BaseJSONConfigManager()
        assert var5 is not None
        var6 = var5.get(var4)
        assert var6 is not None
        var7 = module0.BaseJSONConfigManager()
        assert var7 is not None
        var8 = var7.file_name(var4)
        assert var8 == './.json'
        var9 = ''
        var10 = module0.BaseJSONConfigManager()
        assert var10 is not None
        var11 = var10.get(var9)
        assert var11 is not None
        var12 = module0.BaseJSONConfigManager()
        assert var12 is not None
        var13 = module0.BaseJSONConfigManager()
        assert var13 is not None
        var14 = module0.BaseJSONConfigManager()
        assert var14 is not None
        var15 = ''
        var16 = module0.BaseJSONConfigManager()
        assert var16 is not None
        var17 = var16.get(var15)
        assert var17 is not None
        var18 = module0.BaseJSONConfigManager()
        assert var18 is not None
        var19 = var18.ensure_config_dir_exists()
        assert var19 is None
        var20 = ''
        var21 = module0.BaseJSONConfigManager()
        assert var21 is not None
        var22 = var21.get(var20)
        assert var22 is not None
        var23 = module0.BaseJSONConfigManager()
        assert var23 is not None
        var24 = ''
        var25 = module0.BaseJSONConfigManager()
        assert var25 is not None
        var26 = var25.get(var24)
        assert var26 is not None
        var27 = module0.BaseJSONConfigManager()
        assert var27 is not None
        var28 = var27.ensure_config_dir_exists()
        assert var28 is None
        var29 = ''
        var30 = module0.BaseJSONConfigManager()
        assert var30 is not None
        var31 = var30.get(var29)
        assert var31 is not None
        var32 = module0.BaseJSONConfigManager()
        assert var32 is not None
        var33 = 'K&H94v*%\r'
        var34 = {var33: var33, var33: var33, var33: var33}
        var35 = module0.BaseJSONConfigManager(**var34)
        assert var35 is not None
        var36 = var35.ensure_config_dir_exists()
        assert var36 is None
        var37 = None
        var38 = b'\x02\x96\x18i\xa2\xb2\x04.\xa8Y\xe8R]\r\x05\x01;\x00q'
        var39 = var33, var37, var38
        var40 = module0.recursive_update(var39, var37)
    except BaseException:
        pass


def test_case_128():
    try:
        var0 = 'login.html'
        var1 = {var0: var0}
        var2 = module0.recursive_update(var0, var1)
    except BaseException:
        pass


def test_case_129():
    try:
        var0 = ''
        var1 = module0.BaseJSONConfigManager()
        assert var1 is not None
        var2 = var1.get(var0)
        assert var2 is not None
        var3 = module0.BaseJSONConfigManager()
        assert var3 is not None
        var4 = var3.ensure_config_dir_exists()
        assert var4 is None
        var5 = module0.BaseJSONConfigManager()
        assert var5 is not None
        var6 = ''
        var7 = module0.BaseJSONConfigManager()
        assert var7 is not None
        var8 = var7.get(var6)
        assert var8 is not None
        var9 = module0.BaseJSONConfigManager()
        assert var9 is not None
        var10 = var9.ensure_config_dir_exists()
        assert var10 is None
        var11 = ''
        var12 = module0.BaseJSONConfigManager()
        assert var12 is not None
        var13 = var12.get(var11)
        assert var13 is not None
        var14 = module0.BaseJSONConfigManager()
        assert var14 is not None
        var15 = 'K&H94v*%\r'
        var16 = {var15: var15, var15: var15, var15: var15}
        var17 = module0.BaseJSONConfigManager(**var16)
        assert var17 is not None
        var18 = var17.ensure_config_dir_exists()
        assert var18 is None
        var19 = {}
        var20 = []
        var21 = module0.remove_defaults(var19, var20)
        assert var21 is None
        var22 = -792
        var23 = var17.file_name(var22)
    except BaseException:
        pass


def test_case_130():
    try:
        var0 = ''
        var1 = module0.BaseJSONConfigManager()
        assert var1 is not None
        var2 = var1.get(var0)
        assert var2 is not None
        var3 = module0.BaseJSONConfigManager()
        assert var3 is not None
        var4 = ''
        var5 = module0.BaseJSONConfigManager()
        assert var5 is not None
        var6 = var5.get(var4)
        assert var6 is not None
        var7 = module0.BaseJSONConfigManager()
        assert var7 is not None
        var8 = var7.file_name(var4)
        assert var8 == './.json'
        var9 = module0.BaseJSONConfigManager()
        assert var9 is not None
        var10 = 'K&H94v*%\r'
        var11 = {var10: var10, var10: var10, var10: var10}
        var12 = module0.BaseJSONConfigManager(**var11)
        assert var12 is not None
        var13 = var12.ensure_config_dir_exists()
        assert var13 is None
        var14 = ''
        var15 = module0.BaseJSONConfigManager()
        assert var15 is not None
        var16 = var15.get(var14)
        assert var16 is not None
        var17 = var15.ensure_config_dir_exists()
        assert var17 is None
        var18 = var15.ensure_config_dir_exists()
        assert var18 is None
        var19 = module0.BaseJSONConfigManager()
        assert var19 is not None
        var20 = ''
        var21 = module0.BaseJSONConfigManager()
        assert var21 is not None
        var22 = var21.get(var20)
        assert var22 is not None
        var23 = var21.ensure_config_dir_exists()
        assert var23 is None
        var24 = var21.ensure_config_dir_exists()
        assert var24 is None
        var25 = ''
        var26 = module0.BaseJSONConfigManager()
        assert var26 is not None
        var27 = var26.get(var25)
        assert var27 is not None
        var28 = module0.BaseJSONConfigManager()
        assert var28 is not None
        var29 = var28.ensure_config_dir_exists()
        assert var29 is None
        var30 = ''
        var31 = module0.BaseJSONConfigManager()
        assert var31 is not None
        var32 = var31.get(var30)
        assert var32 is not None
        var33 = module0.BaseJSONConfigManager()
        assert var33 is not None
        var34 = ''
        var35 = module0.BaseJSONConfigManager()
        assert var35 is not None
        var36 = var35.get(var34)
        assert var36 is not None
        var37 = module0.BaseJSONConfigManager()
        assert var37 is not None
        var38 = var37.ensure_config_dir_exists()
        assert var38 is None
        var39 = ''
        var40 = module0.BaseJSONConfigManager()
        assert var40 is not None
        var41 = var40.get(var39)
        assert var41 is not None
        var42 = module0.BaseJSONConfigManager()
        assert var42 is not None
        var43 = ''
        var44 = module0.BaseJSONConfigManager()
        assert var44 is not None
        var45 = var44.get(var43)
        assert var45 is not None
        var46 = module0.BaseJSONConfigManager()
        assert var46 is not None
        var47 = module0.BaseJSONConfigManager()
        assert var47 is not None
        var48 = module0.BaseJSONConfigManager()
        assert var48 is not None
        var49 = 'K&H94v*%\r'
        var50 = {var49: var49, var49: var49, var49: var49}
        var51 = module0.BaseJSONConfigManager(**var50)
        assert var51 is not None
        var52 = var51.ensure_config_dir_exists()
        assert var52 is None
        var53 = {}
        var54 = []
        var55 = module0.remove_defaults(var53, var54)
        assert var55 is None
        var56 = var44.directory(var53)
    except BaseException:
        pass


def test_case_131():
    try:
        var0 = 'K&H94v*%\r'
        var1 = {var0: var0, var0: var0, var0: var0}
        var2 = module0.BaseJSONConfigManager(**var1)
        assert var2 is not None
        var3 = var2.ensure_config_dir_exists()
        assert var3 is None
        var4 = {}
        var5 = []
        var6 = module0.remove_defaults(var4, var5)
        assert var6 is None
        var7 = ''
        var8 = module0.BaseJSONConfigManager()
        assert var8 is not None
        var9 = var8.get(var7)
        assert var9 is not None
        var10 = ''
        var11 = module0.BaseJSONConfigManager()
        assert var11 is not None
        var12 = var11.get(var10)
        assert var12 is not None
        var13 = module0.BaseJSONConfigManager()
        assert var13 is not None
        var14 = module0.BaseJSONConfigManager()
        assert var14 is not None
        var15 = module0.BaseJSONConfigManager()
        assert var15 is not None
        var16 = b'\xcaM\xe8\xfe\x00'
        var17 = module0.recursive_update(var16, var13)
    except BaseException:
        pass


def test_case_132():
    try:
        var0 = ''
        var1 = module0.BaseJSONConfigManager()
        assert var1 is not None
        var2 = var1.get(var0)
        assert var2 is not None
        var3 = var1.ensure_config_dir_exists()
        assert var3 is None
        var4 = var1.ensure_config_dir_exists()
        assert var4 is None
        var5 = ''
        var6 = module0.BaseJSONConfigManager()
        assert var6 is not None
        var7 = var6.get(var5)
        assert var7 is not None
        var8 = module0.BaseJSONConfigManager()
        assert var8 is not None
        var9 = module0.BaseJSONConfigManager()
        assert var9 is not None
        var10 = ''
        var11 = module0.BaseJSONConfigManager()
        assert var11 is not None
        var12 = var11.get(var10)
        assert var12 is not None
        var13 = ''
        var14 = module0.BaseJSONConfigManager()
        assert var14 is not None
        var15 = var14.get(var13)
        assert var15 is not None
        var16 = module0.BaseJSONConfigManager()
        assert var16 is not None
        var17 = var16.ensure_config_dir_exists()
        assert var17 is None
        var18 = ''
        var19 = module0.BaseJSONConfigManager()
        assert var19 is not None
        var20 = var19.get(var18)
        assert var20 is not None
        var21 = module0.BaseJSONConfigManager()
        assert var21 is not None
        var22 = 'K&H94v*%\r'
        var23 = {var22: var22, var22: var22, var22: var22}
        var24 = module0.BaseJSONConfigManager(**var23)
        assert var24 is not None
        var25 = var24.ensure_config_dir_exists()
        assert var25 is None
        var26 = {}
        var27 = []
        var28 = module0.remove_defaults(var26, var27)
        assert var28 is None
        var29 = 'K&H94v*%\r'
        var30 = {var29: var29, var29: var29, var29: var29}
        var31 = module0.BaseJSONConfigManager(**var30)
        assert var31 is not None
        var32 = var31.ensure_config_dir_exists()
        assert var32 is None
        var33 = 17
        var34 = None
        var35 = var33, var34
        var36 = var24.get(var35)
    except BaseException:
        pass


def test_case_133():
    try:
        var0 = 'K&H94v*%\r'
        var1 = {var0: var0, var0: var0, var0: var0}
        var2 = module0.BaseJSONConfigManager(**var1)
        assert var2 is not None
        var3 = var2.ensure_config_dir_exists()
        assert var3 is None
        var4 = {}
        var5 = []
        var6 = module0.remove_defaults(var4, var5)
        assert var6 is None
        var7 = 'K&H94v*%\r'
        var8 = {var7: var7, var7: var7, var7: var7}
        var9 = module0.BaseJSONConfigManager(**var8)
        assert var9 is not None
        var10 = var9.ensure_config_dir_exists()
        assert var10 is None
        var11 = ''
        var12 = module0.BaseJSONConfigManager()
        assert var12 is not None
        var13 = var12.get(var11)
        assert var13 is not None
        var14 = module0.BaseJSONConfigManager()
        assert var14 is not None
        var15 = ''
        var16 = module0.BaseJSONConfigManager()
        assert var16 is not None
        var17 = var16.get(var15)
        assert var17 is not None
        var18 = module0.BaseJSONConfigManager()
        assert var18 is not None
        var19 = module0.BaseJSONConfigManager()
        assert var19 is not None
        var20 = module0.BaseJSONConfigManager()
        assert var20 is not None
        var21 = ''
        var22 = module0.BaseJSONConfigManager()
        assert var22 is not None
        var23 = var22.get(var21)
        assert var23 is not None
        var24 = var22.ensure_config_dir_exists()
        assert var24 is None
        var25 = ''
        var26 = module0.BaseJSONConfigManager()
        assert var26 is not None
        var27 = var26.get(var25)
        assert var27 is not None
        var28 = var26.ensure_config_dir_exists()
        assert var28 is None
        var29 = var26.ensure_config_dir_exists()
        assert var29 is None
        var30 = module0.BaseJSONConfigManager()
        assert var30 is not None
        var31 = ''
        var32 = module0.BaseJSONConfigManager()
        assert var32 is not None
        var33 = var32.get(var31)
        assert var33 is not None
        var34 = module0.BaseJSONConfigManager()
        assert var34 is not None
        var35 = var34.ensure_config_dir_exists()
        assert var35 is None
        var36 = module0.BaseJSONConfigManager()
        assert var36 is not None
        var37 = ''
        var38 = module0.BaseJSONConfigManager()
        assert var38 is not None
        var39 = var38.get(var37)
        assert var39 is not None
        var40 = 'application/zip'
        var41 = {var37, var31, var12, var34}
        var42 = var36.set(var40, var41)
    except BaseException:
        pass


def test_case_134():
    try:
        var0 = ''
        var1 = module0.BaseJSONConfigManager()
        assert var1 is not None
        var2 = var1.get(var0)
        assert var2 is not None
        var3 = var1.ensure_config_dir_exists()
        assert var3 is None
        var4 = var1.ensure_config_dir_exists()
        assert var4 is None
        var5 = ''
        var6 = module0.BaseJSONConfigManager()
        assert var6 is not None
        var7 = var6.get(var5)
        assert var7 is not None
        var8 = module0.BaseJSONConfigManager()
        assert var8 is not None
        var9 = module0.BaseJSONConfigManager()
        assert var9 is not None
        var10 = module0.BaseJSONConfigManager()
        assert var10 is not None
        var11 = ''
        var12 = module0.BaseJSONConfigManager()
        assert var12 is not None
        var13 = var12.get(var11)
        assert var13 is not None
        var14 = var12.ensure_config_dir_exists()
        assert var14 is None
        var15 = set()
        var16 = var6.update(var12, var15)
    except BaseException:
        pass


def test_case_135():
    try:
        var0 = ''
        var1 = module0.BaseJSONConfigManager()
        assert var1 is not None
        var2 = var1.get(var0)
        assert var2 is not None
        var3 = var1.ensure_config_dir_exists()
        assert var3 is None
        var4 = var1.ensure_config_dir_exists()
        assert var4 is None
        var5 = ''
        var6 = module0.BaseJSONConfigManager()
        assert var6 is not None
        var7 = var6.get(var5)
        assert var7 is not None
        var8 = var6.ensure_config_dir_exists()
        assert var8 is None
        var9 = var6.ensure_config_dir_exists()
        assert var9 is None
        var10 = module0.BaseJSONConfigManager()
        assert var10 is not None
        var11 = ''
        var12 = module0.BaseJSONConfigManager()
        assert var12 is not None
        var13 = var12.get(var11)
        assert var13 is not None
        var14 = module0.BaseJSONConfigManager()
        assert var14 is not None
        var15 = ''
        var16 = module0.BaseJSONConfigManager()
        assert var16 is not None
        var17 = var16.get(var15)
        assert var17 is not None
        var18 = ''
        var19 = module0.BaseJSONConfigManager()
        assert var19 is not None
        var20 = var19.get(var18)
        assert var20 is not None
        var21 = module0.BaseJSONConfigManager()
        assert var21 is not None
        var22 = ''
        var23 = module0.BaseJSONConfigManager()
        assert var23 is not None
        var24 = var23.get(var22)
        assert var24 is not None
        var25 = module0.BaseJSONConfigManager()
        assert var25 is not None
        var26 = var25.file_name(var22)
        assert var26 == './.json'
        var27 = ''
        var28 = module0.BaseJSONConfigManager()
        assert var28 is not None
        var29 = var28.get(var27)
        assert var29 is not None
        var30 = module0.BaseJSONConfigManager()
        assert var30 is not None
        var31 = var30.ensure_config_dir_exists()
        assert var31 is None
        var32 = module0.BaseJSONConfigManager()
        assert var32 is not None
        var33 = None
        var34 = b'[W\x16\xf8u\x90\xe8d+'
        var35 = var32.get(var33, var34)
    except BaseException:
        pass


def test_case_136():
    try:
        var0 = 'K&H94v*%\r'
        var1 = {var0: var0, var0: var0, var0: var0}
        var2 = module0.BaseJSONConfigManager(**var1)
        assert var2 is not None
        var3 = var2.ensure_config_dir_exists()
        assert var3 is None
        var4 = ''
        var5 = module0.BaseJSONConfigManager()
        assert var5 is not None
        var6 = var5.get(var4)
        assert var6 is not None
        var7 = var5.ensure_config_dir_exists()
        assert var7 is None
        var8 = ''
        var9 = module0.BaseJSONConfigManager()
        assert var9 is not None
        var10 = var9.get(var8)
        assert var10 is not None
        var11 = module0.BaseJSONConfigManager()
        assert var11 is not None
        var12 = module0.BaseJSONConfigManager()
        assert var12 is not None
        var13 = module0.BaseJSONConfigManager()
        assert var13 is not None
        var14 = ''
        var15 = module0.BaseJSONConfigManager()
        assert var15 is not None
        var16 = var15.get(var14)
        assert var16 is not None
        var17 = var15.ensure_config_dir_exists()
        assert var17 is None
        var18 = var15.ensure_config_dir_exists()
        assert var18 is None
        var19 = ''
        var20 = module0.BaseJSONConfigManager()
        assert var20 is not None
        var21 = var20.get(var19)
        assert var21 is not None
        var22 = 'K&H94v*%\r'
        var23 = {var22: var22, var22: var22, var22: var22}
        var24 = module0.BaseJSONConfigManager(**var23)
        assert var24 is not None
        var25 = var24.ensure_config_dir_exists()
        assert var25 is None
        var26 = {}
        var27 = []
        var28 = module0.remove_defaults(var26, var27)
        assert var28 is None
        var29 = ''
        var30 = module0.BaseJSONConfigManager()
        assert var30 is not None
        var31 = var30.get(var29)
        assert var31 is not None
        var32 = var30.ensure_config_dir_exists()
        assert var32 is None
        var33 = var30.ensure_config_dir_exists()
        assert var33 is None
        var34 = module0.BaseJSONConfigManager()
        assert var34 is not None
        var35 = ''
        var36 = module0.BaseJSONConfigManager()
        assert var36 is not None
        var37 = var36.get(var35)
        assert var37 is not None
        var38 = module0.BaseJSONConfigManager()
        assert var38 is not None
        var39 = var38.ensure_config_dir_exists()
        assert var39 is None
        var40 = ''
        var41 = module0.BaseJSONConfigManager()
        assert var41 is not None
        var42 = var41.get(var40)
        assert var42 is not None
        var43 = module0.BaseJSONConfigManager()
        assert var43 is not None
        var44 = var43.ensure_config_dir_exists()
        assert var44 is None
        var45 = ''
        var46 = module0.BaseJSONConfigManager()
        assert var46 is not None
        var47 = var46.get(var45)
        assert var47 is not None
        var48 = module0.BaseJSONConfigManager()
        assert var48 is not None
        var49 = module0.BaseJSONConfigManager()
        assert var49 is not None
        var50 = ()
        var51 = module0.remove_defaults(var50, var26)
    except BaseException:
        pass


def test_case_137():
    try:
        var0 = ''
        var1 = module0.BaseJSONConfigManager()
        assert var1 is not None
        var2 = var1.get(var0)
        assert var2 is not None
        var3 = module0.BaseJSONConfigManager()
        assert var3 is not None
        var4 = var3.ensure_config_dir_exists()
        assert var4 is None
        var5 = ''
        var6 = module0.BaseJSONConfigManager()
        assert var6 is not None
        var7 = var6.get(var5)
        assert var7 is not None
        var8 = module0.BaseJSONConfigManager()
        assert var8 is not None
        var9 = ''
        var10 = module0.BaseJSONConfigManager()
        assert var10 is not None
        var11 = var10.get(var9)
        assert var11 is not None
        var12 = module0.BaseJSONConfigManager()
        assert var12 is not None
        var13 = var12.file_name(var9)
        assert var13 == './.json'
        var14 = ''
        var15 = module0.BaseJSONConfigManager()
        assert var15 is not None
        var16 = var15.get(var14)
        assert var16 is not None
        var17 = var15.ensure_config_dir_exists()
        assert var17 is None
        var18 = var15.ensure_config_dir_exists()
        assert var18 is None
        var19 = ''
        var20 = module0.BaseJSONConfigManager()
        assert var20 is not None
        var21 = var20.get(var19)
        assert var21 is not None
        var22 = module0.BaseJSONConfigManager()
        assert var22 is not None
        var23 = module0.BaseJSONConfigManager()
        assert var23 is not None
        var24 = module0.BaseJSONConfigManager()
        assert var24 is not None
        var25 = ''
        var26 = module0.BaseJSONConfigManager()
        assert var26 is not None
        var27 = var26.get(var25)
        assert var27 is not None
        var28 = module0.BaseJSONConfigManager()
        assert var28 is not None
        var29 = var28.ensure_config_dir_exists()
        assert var29 is None
        var30 = ''
        var31 = module0.BaseJSONConfigManager()
        assert var31 is not None
        var32 = var31.get(var30)
        assert var32 is not None
        var33 = module0.BaseJSONConfigManager()
        assert var33 is not None
        var34 = module0.BaseJSONConfigManager()
        assert var34 is not None
        var35 = 'K&H94v*%\r'
        var36 = {var35: var35, var35: var35, var35: var35}
        var37 = module0.BaseJSONConfigManager(**var36)
        assert var37 is not None
        var38 = var37.ensure_config_dir_exists()
        assert var38 is None
        var39 = 'K&H94v*%\r'
        var40 = {var39: var39, var39: var39, var39: var39}
        var41 = module0.BaseJSONConfigManager(**var40)
        assert var41 is not None
        var42 = var41.ensure_config_dir_exists()
        assert var42 is None
        var43 = {}
        var44 = []
        var45 = module0.remove_defaults(var43, var44)
        assert var45 is None
        var46 = ''
        var47 = module0.BaseJSONConfigManager()
        assert var47 is not None
        var48 = var47.get(var46)
        assert var48 is not None
        var49 = var47.ensure_config_dir_exists()
        assert var49 is None
        var50 = ''
        var51 = module0.BaseJSONConfigManager()
        assert var51 is not None
        var52 = var51.get(var50)
        assert var52 is not None
        var53 = var51.ensure_config_dir_exists()
        assert var53 is None
        var54 = var51.ensure_config_dir_exists()
        assert var54 is None
        var55 = module0.BaseJSONConfigManager()
        assert var55 is not None
        var56 = 'FZM\tF+Lb6'
        var57 = module0.remove_defaults(var44, var56)
    except BaseException:
        pass


def test_case_138():
    try:
        var0 = ''
        var1 = module0.BaseJSONConfigManager()
        assert var1 is not None
        var2 = var1.get(var0)
        assert var2 is not None
        var3 = var1.ensure_config_dir_exists()
        assert var3 is None
        var4 = 'K&H94v*%\r'
        var5 = {var4: var4, var4: var4, var4: var4}
        var6 = module0.BaseJSONConfigManager(**var5)
        assert var6 is not None
        var7 = var6.ensure_config_dir_exists()
        assert var7 is None
        var8 = ''
        var9 = module0.BaseJSONConfigManager()
        assert var9 is not None
        var10 = var9.get(var8)
        assert var10 is not None
        var11 = var9.ensure_config_dir_exists()
        assert var11 is None
        var12 = var9.ensure_config_dir_exists()
        assert var12 is None
        var13 = module0.BaseJSONConfigManager()
        assert var13 is not None
        var14 = ''
        var15 = module0.BaseJSONConfigManager()
        assert var15 is not None
        var16 = var15.get(var14)
        assert var16 is not None
        var17 = module0.BaseJSONConfigManager()
        assert var17 is not None
        var18 = module0.BaseJSONConfigManager()
        assert var18 is not None
        var19 = module0.BaseJSONConfigManager()
        assert var19 is not None
        var20 = ''
        var21 = module0.BaseJSONConfigManager()
        assert var21 is not None
        var22 = var21.get(var20)
        assert var22 is not None
        var23 = module0.BaseJSONConfigManager()
        assert var23 is not None
        var24 = ''
        var25 = module0.BaseJSONConfigManager()
        assert var25 is not None
        var26 = var25.get(var24)
        assert var26 is not None
        var27 = (
            b'<\xfa\x85\xc3\x9d\xd8\x8d\x82\xfc\xb1\xa4\x87\\B \x9e\n\xed"C')
        var28 = 684.0
        var29 = module0.recursive_update(var27, var28)
    except BaseException:
        pass


def test_case_139():
    try:
        var0 = 1067
        var1 = {var0, var0, var0, var0}
        var2 = True
        var3 = module0.remove_defaults(var1, var2)
    except BaseException:
        pass


def test_case_140():
    try:
        var0 = module0.BaseJSONConfigManager()
        assert var0 is not None
        var1 = ''
        var2 = module0.BaseJSONConfigManager()
        assert var2 is not None
        var3 = var2.get(var1)
        assert var3 is not None
        var4 = var2.ensure_config_dir_exists()
        assert var4 is None
        var5 = 'K&H94v*%\r'
        var6 = {var5: var5, var5: var5, var5: var5}
        var7 = module0.BaseJSONConfigManager(**var6)
        assert var7 is not None
        var8 = var7.ensure_config_dir_exists()
        assert var8 is None
        var9 = ''
        var10 = module0.BaseJSONConfigManager()
        assert var10 is not None
        var11 = var10.get(var9)
        assert var11 is not None
        var12 = var10.ensure_config_dir_exists()
        assert var12 is None
        var13 = var10.ensure_config_dir_exists()
        assert var13 is None
        var14 = ''
        var15 = module0.BaseJSONConfigManager()
        assert var15 is not None
        var16 = var15.get(var14)
        assert var16 is not None
        var17 = var15.ensure_config_dir_exists()
        assert var17 is None
        var18 = var15.ensure_config_dir_exists()
        assert var18 is None
        var19 = module0.BaseJSONConfigManager()
        assert var19 is not None
        var20 = 'K&H94v*%\r'
        var21 = {var20: var20, var20: var20, var20: var20}
        var22 = module0.BaseJSONConfigManager(**var21)
        assert var22 is not None
        var23 = var22.ensure_config_dir_exists()
        assert var23 is None
        var24 = {}
        var25 = []
        var26 = module0.remove_defaults(var24, var25)
        assert var26 is None
        var27 = ''
        var28 = module0.BaseJSONConfigManager()
        assert var28 is not None
        var29 = var28.get(var27)
        assert var29 is not None
        var30 = ''
        var31 = module0.BaseJSONConfigManager()
        assert var31 is not None
        var32 = var31.get(var30)
        assert var32 is not None
        var33 = module0.BaseJSONConfigManager()
        assert var33 is not None
        var34 = var33.ensure_config_dir_exists()
        assert var34 is None
        var35 = ''
        var36 = module0.BaseJSONConfigManager()
        assert var36 is not None
        var37 = var36.get(var35)
        assert var37 is not None
        var38 = module0.BaseJSONConfigManager()
        assert var38 is not None
        var39 = module0.BaseJSONConfigManager()
        assert var39 is not None
        var40 = module0.BaseJSONConfigManager()
        assert var40 is not None
        var41 = var25,
        var42 = -3525.598638
        var43 = module0.BaseJSONConfigManager(**var21)
        assert var43 is not None
        var44 = var43.set(var41, var42)
    except BaseException:
        pass


def test_case_141():
    try:
        var0 = ''
        var1 = module0.BaseJSONConfigManager()
        assert var1 is not None
        var2 = var1.get(var0)
        assert var2 is not None
        var3 = {}
        var4 = module0.BaseJSONConfigManager(**var3)
        assert var4 is not None
        var5 = var4.ensure_config_dir_exists()
        assert var5 is None
        var6 = 'K&H94v*%\r'
        var7 = {var6: var6, var6: var6, var6: var6}
        var8 = module0.BaseJSONConfigManager(**var7)
        assert var8 is not None
        var9 = var8.ensure_config_dir_exists()
        assert var9 is None
        var10 = {}
        var11 = []
        var12 = module0.remove_defaults(var10, var11)
        assert var12 is None
        var13 = {var9, var8, var4, var1}
        var14 = module0.remove_defaults(var6, var13)
    except BaseException:
        pass


def test_case_142():
    try:
        var0 = 'K&H94v*%\r'
        var1 = {var0: var0, var0: var0, var0: var0}
        var2 = module0.BaseJSONConfigManager(**var1)
        assert var2 is not None
        var3 = var2.ensure_config_dir_exists()
        assert var3 is None
        var4 = {}
        var5 = []
        var6 = module0.remove_defaults(var4, var5)
        assert var6 is None
        var7 = module0.BaseJSONConfigManager()
        assert var7 is not None
        var8 = ''
        var9 = module0.BaseJSONConfigManager()
        assert var9 is not None
        var10 = var9.get(var8)
        assert var10 is not None
        var11 = var9.ensure_config_dir_exists()
        assert var11 is None
        var12 = ''
        var13 = module0.BaseJSONConfigManager()
        assert var13 is not None
        var14 = var13.get(var12)
        assert var14 is not None
        var15 = module0.BaseJSONConfigManager()
        assert var15 is not None
        var16 = module0.BaseJSONConfigManager()
        assert var16 is not None
        var17 = module0.BaseJSONConfigManager()
        assert var17 is not None
        var18 = ''
        var19 = module0.BaseJSONConfigManager()
        assert var19 is not None
        var20 = var19.get(var18)
        assert var20 is not None
        var21 = var19.ensure_config_dir_exists()
        assert var21 is None
        var22 = var19.ensure_config_dir_exists()
        assert var22 is None
        var23 = module0.BaseJSONConfigManager()
        assert var23 is not None
        var24 = ''
        var25 = module0.BaseJSONConfigManager()
        assert var25 is not None
        var26 = var25.get(var24)
        assert var26 is not None
        var27 = module0.BaseJSONConfigManager()
        assert var27 is not None
        var28 = var27.ensure_config_dir_exists()
        assert var28 is None
        var29 = ''
        var30 = module0.BaseJSONConfigManager()
        assert var30 is not None
        var31 = var30.get(var29)
        assert var31 is not None
        var32 = module0.BaseJSONConfigManager()
        assert var32 is not None
        var33 = ''
        var34 = module0.BaseJSONConfigManager()
        assert var34 is not None
        var35 = var34.get(var33)
        assert var35 is not None
        var36 = module0.BaseJSONConfigManager()
        assert var36 is not None
        var37 = var36.ensure_config_dir_exists()
        assert var37 is None
        var38 = {}
        var39 = module0.BaseJSONConfigManager(**var38)
        assert var39 is not None
        var40 = var39.ensure_config_dir_exists()
        assert var40 is None
        var41 = ''
        var42 = module0.BaseJSONConfigManager()
        assert var42 is not None
        var43 = var42.get(var41)
        assert var43 is not None
        var44 = module0.BaseJSONConfigManager()
        assert var44 is not None
        var45 = ''
        var46 = module0.BaseJSONConfigManager()
        assert var46 is not None
        var47 = var46.get(var45)
        assert var47 is not None
        var48 = module0.BaseJSONConfigManager()
        assert var48 is not None
        var49 = ''
        var50 = module0.BaseJSONConfigManager()
        assert var50 is not None
        var51 = var50.get(var49)
        assert var51 is not None
        var52 = module0.BaseJSONConfigManager()
        assert var52 is not None
        var53 = var52.file_name(var49)
        assert var53 == './.json'
        var54 = [var11]
        var55 = var46.directory(var54)
    except BaseException:
        pass


def test_case_143():
    try:
        var0 = ''
        var1 = module0.BaseJSONConfigManager()
        assert var1 is not None
        var2 = var1.get(var0)
        assert var2 is not None
        var3 = module0.BaseJSONConfigManager()
        assert var3 is not None
        var4 = var3.ensure_config_dir_exists()
        assert var4 is None
        var5 = ''
        var6 = module0.BaseJSONConfigManager()
        assert var6 is not None
        var7 = var6.get(var5)
        assert var7 is not None
        var8 = module0.BaseJSONConfigManager()
        assert var8 is not None
        var9 = ''
        var10 = module0.BaseJSONConfigManager()
        assert var10 is not None
        var11 = var10.get(var9)
        assert var11 is not None
        var12 = var10.ensure_config_dir_exists()
        assert var12 is None
        var13 = ''
        var14 = module0.BaseJSONConfigManager()
        assert var14 is not None
        var15 = var14.get(var13)
        assert var15 is not None
        var16 = var14.ensure_config_dir_exists()
        assert var16 is None
        var17 = var14.ensure_config_dir_exists()
        assert var17 is None
        var18 = {}
        var19 = module0.BaseJSONConfigManager(**var18)
        assert var19 is not None
        var20 = var19.ensure_config_dir_exists()
        assert var20 is None
        var21 = ''
        var22 = module0.BaseJSONConfigManager()
        assert var22 is not None
        var23 = var22.get(var21)
        assert var23 is not None
        var24 = var22.ensure_config_dir_exists()
        assert var24 is None
        var25 = var22.ensure_config_dir_exists()
        assert var25 is None
        var26 = module0.BaseJSONConfigManager()
        assert var26 is not None
        var27 = ''
        var28 = module0.BaseJSONConfigManager()
        assert var28 is not None
        var29 = var28.get(var27)
        assert var29 is not None
        var30 = 'K&H94v*%\r'
        var31 = {var30: var30, var30: var30, var30: var30}
        var32 = module0.BaseJSONConfigManager(**var31)
        assert var32 is not None
        var33 = var32.ensure_config_dir_exists()
        assert var33 is None
        var34 = {}
        var35 = []
        var36 = module0.remove_defaults(var34, var35)
        assert var36 is None
        var37 = ''
        var38 = module0.BaseJSONConfigManager()
        assert var38 is not None
        var39 = var38.get(var37)
        assert var39 is not None
        var40 = module0.BaseJSONConfigManager()
        assert var40 is not None
        var41 = ''
        var42 = module0.BaseJSONConfigManager()
        assert var42 is not None
        var43 = var42.get(var41)
        assert var43 is not None
        var44 = module0.BaseJSONConfigManager()
        assert var44 is not None
        var45 = var44.file_name(var41)
        assert var45 == './.json'
        var46 = None
        var47 = -4276.963223
        var48 = 1174
        var49 = var46, var46, var47, var48
        var50 = var44.directory(var49)
    except BaseException:
        pass


def test_case_144():
    try:
        var0 = 'K&H94v*%\r'
        var1 = {var0: var0, var0: var0, var0: var0}
        var2 = module0.BaseJSONConfigManager(**var1)
        assert var2 is not None
        var3 = var2.ensure_config_dir_exists()
        assert var3 is None
        var4 = ''
        var5 = module0.BaseJSONConfigManager()
        assert var5 is not None
        var6 = var5.get(var4)
        assert var6 is not None
        var7 = var5.ensure_config_dir_exists()
        assert var7 is None
        var8 = ''
        var9 = module0.BaseJSONConfigManager()
        assert var9 is not None
        var10 = var9.get(var8)
        assert var10 is not None
        var11 = module0.BaseJSONConfigManager()
        assert var11 is not None
        var12 = var11.ensure_config_dir_exists()
        assert var12 is None
        var13 = {}
        var14 = module0.BaseJSONConfigManager(**var13)
        assert var14 is not None
        var15 = var14.ensure_config_dir_exists()
        assert var15 is None
        var16 = 'K&H94v*%\r'
        var17 = {var16: var16, var16: var16, var16: var16}
        var18 = module0.BaseJSONConfigManager(**var17)
        assert var18 is not None
        var19 = var18.ensure_config_dir_exists()
        assert var19 is None
        var20 = {}
        var21 = []
        var22 = module0.remove_defaults(var20, var21)
        assert var22 is None
        var23 = ''
        var24 = module0.BaseJSONConfigManager()
        assert var24 is not None
        var25 = var24.get(var23)
        assert var25 is not None
        var26 = module0.BaseJSONConfigManager()
        assert var26 is not None
        var27 = ''
        var28 = module0.BaseJSONConfigManager()
        assert var28 is not None
        var29 = var28.get(var27)
        assert var29 is not None
        var30 = module0.BaseJSONConfigManager()
        assert var30 is not None
        var31 = var30.file_name(var27)
        assert var31 == './.json'
        var32 = module0.BaseJSONConfigManager()
        assert var32 is not None
        var33 = ''
        var34 = module0.BaseJSONConfigManager()
        assert var34 is not None
        var35 = var34.get(var33)
        assert var35 is not None
        var36 = module0.BaseJSONConfigManager()
        assert var36 is not None
        var37 = ''
        var38 = module0.BaseJSONConfigManager()
        assert var38 is not None
        var39 = var38.get(var37)
        assert var39 is not None
        var40 = module0.BaseJSONConfigManager()
        assert var40 is not None
        var41 = var40.ensure_config_dir_exists()
        assert var41 is None
        var42 = ''
        var43 = module0.BaseJSONConfigManager()
        assert var43 is not None
        var44 = var43.get(var42)
        assert var44 is not None
        var45 = module0.BaseJSONConfigManager()
        assert var45 is not None
        var46 = None
        var47 = var46,
        var48 = var11.update(var47, var47)
    except BaseException:
        pass


def test_case_145():
    try:
        var0 = module0.BaseJSONConfigManager()
        assert var0 is not None
        var1 = ''
        var2 = module0.BaseJSONConfigManager()
        assert var2 is not None
        var3 = var2.get(var1)
        assert var3 is not None
        var4 = module0.BaseJSONConfigManager()
        assert var4 is not None
        var5 = ''
        var6 = module0.BaseJSONConfigManager()
        assert var6 is not None
        var7 = var6.get(var5)
        assert var7 is not None
        var8 = module0.BaseJSONConfigManager()
        assert var8 is not None
        var9 = var8.file_name(var5)
        assert var9 == './.json'
        var10 = ''
        var11 = module0.BaseJSONConfigManager()
        assert var11 is not None
        var12 = var11.get(var10)
        assert var12 is not None
        var13 = var11.ensure_config_dir_exists()
        assert var13 is None
        var14 = var11.ensure_config_dir_exists()
        assert var14 is None
        var15 = module0.BaseJSONConfigManager()
        assert var15 is not None
        var16 = 'K&H94v*%\r'
        var17 = {var16: var16, var16: var16, var16: var16}
        var18 = module0.BaseJSONConfigManager(**var17)
        assert var18 is not None
        var19 = var18.ensure_config_dir_exists()
        assert var19 is None
        var20 = {}
        var21 = []
        var22 = module0.remove_defaults(var20, var21)
        assert var22 is None
        var23 = 'K&H94v*%\r'
        var24 = {var23: var23, var23: var23, var23: var23}
        var25 = module0.BaseJSONConfigManager(**var24)
        assert var25 is not None
        var26 = var25.ensure_config_dir_exists()
        assert var26 is None
        var27 = False
        var28 = 2586
        var29 = var15.set(var27, var28)
    except BaseException:
        pass


def test_case_146():
    try:
        var0 = ''
        var1 = module0.BaseJSONConfigManager()
        assert var1 is not None
        var2 = var1.get(var0)
        assert var2 is not None
        var3 = module0.BaseJSONConfigManager()
        assert var3 is not None
        var4 = var3.ensure_config_dir_exists()
        assert var4 is None
        var5 = 'K&H94v*%\r'
        var6 = {var5: var5, var5: var5, var5: var5}
        var7 = module0.BaseJSONConfigManager(**var6)
        assert var7 is not None
        var8 = var7.ensure_config_dir_exists()
        assert var8 is None
        var9 = {}
        var10 = []
        var11 = module0.remove_defaults(var9, var10)
        assert var11 is None
        var12 = 'K&H94v*%\r'
        var13 = {var12: var12, var12: var12, var12: var12}
        var14 = module0.BaseJSONConfigManager(**var13)
        assert var14 is not None
        var15 = var14.ensure_config_dir_exists()
        assert var15 is None
        var16 = ''
        var17 = module0.BaseJSONConfigManager()
        assert var17 is not None
        var18 = var17.get(var16)
        assert var18 is not None
        var19 = module0.BaseJSONConfigManager()
        assert var19 is not None
        var20 = var19.ensure_config_dir_exists()
        assert var20 is None
        var21 = ''
        var22 = module0.BaseJSONConfigManager()
        assert var22 is not None
        var23 = var22.get(var21)
        assert var23 is not None
        var24 = module0.BaseJSONConfigManager()
        assert var24 is not None
        var25 = ''
        var26 = module0.BaseJSONConfigManager()
        assert var26 is not None
        var27 = var26.get(var25)
        assert var27 is not None
        var28 = var26.ensure_config_dir_exists()
        assert var28 is None
        var29 = ''
        var30 = module0.BaseJSONConfigManager()
        assert var30 is not None
        var31 = var30.get(var29)
        assert var31 is not None
        var32 = var30.ensure_config_dir_exists()
        assert var32 is None
        var33 = var30.ensure_config_dir_exists()
        assert var33 is None
        var34 = module0.BaseJSONConfigManager()
        assert var34 is not None
        var35 = ''
        var36 = module0.BaseJSONConfigManager()
        assert var36 is not None
        var37 = var36.get(var35)
        assert var37 is not None
        var38 = ''
        var39 = module0.BaseJSONConfigManager()
        assert var39 is not None
        var40 = var39.get(var38)
        assert var40 is not None
        var41 = module0.BaseJSONConfigManager()
        assert var41 is not None
        var42 = ''
        var43 = module0.BaseJSONConfigManager()
        assert var43 is not None
        var44 = var43.get(var42)
        assert var44 is not None
        var45 = var43.ensure_config_dir_exists()
        assert var45 is None
        var46 = var43.ensure_config_dir_exists()
        assert var46 is None
        var47 = module0.BaseJSONConfigManager()
        assert var47 is not None
        var48 = None
        var49 = 111
        var50 = var19.update(var48, var49)
    except BaseException:
        pass


def test_case_147():
    try:
        var0 = ''
        var1 = module0.BaseJSONConfigManager()
        assert var1 is not None
        var2 = var1.get(var0)
        assert var2 is not None
        var3 = module0.BaseJSONConfigManager()
        assert var3 is not None
        var4 = ''
        var5 = module0.BaseJSONConfigManager()
        assert var5 is not None
        var6 = var5.get(var4)
        assert var6 is not None
        var7 = module0.BaseJSONConfigManager()
        assert var7 is not None
        var8 = var7.file_name(var4)
        assert var8 == './.json'
        var9 = module0.BaseJSONConfigManager()
        assert var9 is not None
        var10 = 'K&H94v*%\r'
        var11 = {var10: var10, var10: var10, var10: var10}
        var12 = module0.BaseJSONConfigManager(**var11)
        assert var12 is not None
        var13 = var12.ensure_config_dir_exists()
        assert var13 is None
        var14 = ''
        var15 = module0.BaseJSONConfigManager()
        assert var15 is not None
        var16 = var15.get(var14)
        assert var16 is not None
        var17 = module0.BaseJSONConfigManager()
        assert var17 is not None
        var18 = 'K&H94v*%\r'
        var19 = {var18: var18, var18: var18, var18: var18}
        var20 = module0.BaseJSONConfigManager(**var19)
        assert var20 is not None
        var21 = var20.ensure_config_dir_exists()
        assert var21 is None
        var22 = var20.ensure_config_dir_exists()
        assert var22 is None
        var23 = {}
        var24 = module0.BaseJSONConfigManager(**var23)
        assert var24 is not None
        var25 = var24.ensure_config_dir_exists()
        assert var25 is None
        var26 = ''
        var27 = module0.BaseJSONConfigManager()
        assert var27 is not None
        var28 = var27.get(var26)
        assert var28 is not None
        var29 = module0.BaseJSONConfigManager()
        assert var29 is not None
        var30 = module0.BaseJSONConfigManager()
        assert var30 is not None
        var31 = module0.BaseJSONConfigManager()
        assert var31 is not None
        var32 = ''
        var33 = module0.BaseJSONConfigManager()
        assert var33 is not None
        var34 = var33.get(var32)
        assert var34 is not None
        var35 = var33.ensure_config_dir_exists()
        assert var35 is None
        var36 = var33.ensure_config_dir_exists()
        assert var36 is None
        var37 = module0.BaseJSONConfigManager()
        assert var37 is not None
        var38 = 1004.32
        var39 = b'?\x92\xfc\xe1\xad\x88\x16\xd8-G^M\x92\xdd'
        var40 = module0.remove_defaults(var38, var39)
    except BaseException:
        pass


def test_case_148():
    try:
        var0 = {}
        var1 = module0.BaseJSONConfigManager(**var0)
        assert var1 is not None
        var2 = var1.ensure_config_dir_exists()
        assert var2 is None
        var3 = ''
        var4 = module0.BaseJSONConfigManager()
        assert var4 is not None
        var5 = var4.get(var3)
        assert var5 is not None
        var6 = var4.ensure_config_dir_exists()
        assert var6 is None
        var7 = var4.ensure_config_dir_exists()
        assert var7 is None
        var8 = module0.BaseJSONConfigManager()
        assert var8 is not None
        var9 = ''
        var10 = module0.BaseJSONConfigManager()
        assert var10 is not None
        var11 = var10.get(var9)
        assert var11 is not None
        var12 = var10.ensure_config_dir_exists()
        assert var12 is None
        var13 = var10.ensure_config_dir_exists()
        assert var13 is None
        var14 = module0.BaseJSONConfigManager()
        assert var14 is not None
        var15 = ''
        var16 = module0.BaseJSONConfigManager()
        assert var16 is not None
        var17 = var16.get(var15)
        assert var17 is not None
        var18 = module0.BaseJSONConfigManager()
        assert var18 is not None
        var19 = var18.ensure_config_dir_exists()
        assert var19 is None
        var20 = ''
        var21 = module0.BaseJSONConfigManager()
        assert var21 is not None
        var22 = var21.get(var20)
        assert var22 is not None
        var23 = module0.BaseJSONConfigManager()
        assert var23 is not None
        var24 = ''
        var25 = module0.BaseJSONConfigManager()
        assert var25 is not None
        var26 = var25.get(var24)
        assert var26 is not None
        var27 = module0.BaseJSONConfigManager()
        assert var27 is not None
        var28 = -543
        var29 = module0.recursive_update(var23, var28)
    except BaseException:
        pass


def test_case_149():
    try:
        var0 = ''
        var1 = module0.BaseJSONConfigManager()
        assert var1 is not None
        var2 = var1.get(var0)
        assert var2 is not None
        var3 = module0.BaseJSONConfigManager()
        assert var3 is not None
        var4 = ''
        var5 = module0.BaseJSONConfigManager()
        assert var5 is not None
        var6 = var5.get(var4)
        assert var6 is not None
        var7 = module0.BaseJSONConfigManager()
        assert var7 is not None
        var8 = var7.file_name(var4)
        assert var8 == './.json'
        var9 = 'K&H94v*%\r'
        var10 = {var9: var9, var9: var9, var9: var9}
        var11 = module0.BaseJSONConfigManager(**var10)
        assert var11 is not None
        var12 = var11.ensure_config_dir_exists()
        assert var12 is None
        var13 = ''
        var14 = module0.BaseJSONConfigManager()
        assert var14 is not None
        var15 = var14.get(var13)
        assert var15 is not None
        var16 = module0.BaseJSONConfigManager()
        assert var16 is not None
        var17 = ''
        var18 = module0.BaseJSONConfigManager()
        assert var18 is not None
        var19 = var18.get(var17)
        assert var19 is not None
        var20 = ''
        var21 = module0.BaseJSONConfigManager()
        assert var21 is not None
        var22 = var21.get(var20)
        assert var22 is not None
        var23 = var21.ensure_config_dir_exists()
        assert var23 is None
        var24 = var21.ensure_config_dir_exists()
        assert var24 is None
        var25 = ''
        var26 = module0.BaseJSONConfigManager()
        assert var26 is not None
        var27 = var26.get(var25)
        assert var27 is not None
        var28 = module0.BaseJSONConfigManager()
        assert var28 is not None
        var29 = var28.ensure_config_dir_exists()
        assert var29 is None
        var30 = ''
        var31 = module0.BaseJSONConfigManager()
        assert var31 is not None
        var32 = var31.get(var30)
        assert var32 is not None
        var33 = module0.BaseJSONConfigManager()
        assert var33 is not None
        var34 = ''
        var35 = module0.BaseJSONConfigManager()
        assert var35 is not None
        var36 = var35.get(var34)
        assert var36 is not None
        var37 = module0.BaseJSONConfigManager()
        assert var37 is not None
        var38 = var37.ensure_config_dir_exists()
        assert var38 is None
        var39 = -1702
        var40 = var11.set(var39, var33)
    except BaseException:
        pass


def test_case_150():
    try:
        var0 = False
        var1 = [var0, var0]
        var2 = module0.BaseJSONConfigManager()
        assert var2 is not None
        var3 = var2.directory(var1)
    except BaseException:
        pass


def test_case_151():
    try:
        var0 = {}
        var1 = module0.BaseJSONConfigManager(**var0)
        assert var1 is not None
        var2 = var1.ensure_config_dir_exists()
        assert var2 is None
        var3 = ''
        var4 = module0.BaseJSONConfigManager()
        assert var4 is not None
        var5 = var4.get(var3)
        assert var5 is not None
        var6 = module0.BaseJSONConfigManager()
        assert var6 is not None
        var7 = var6.ensure_config_dir_exists()
        assert var7 is None
        var8 = ''
        var9 = module0.BaseJSONConfigManager()
        assert var9 is not None
        var10 = var9.get(var8)
        assert var10 is not None
        var11 = module0.BaseJSONConfigManager()
        assert var11 is not None
        var12 = ''
        var13 = module0.BaseJSONConfigManager()
        assert var13 is not None
        var14 = var13.get(var12)
        assert var14 is not None
        var15 = ''
        var16 = module0.BaseJSONConfigManager()
        assert var16 is not None
        var17 = var16.get(var15)
        assert var17 is not None
        var18 = var16.ensure_config_dir_exists()
        assert var18 is None
        var19 = var16.ensure_config_dir_exists()
        assert var19 is None
        var20 = module0.BaseJSONConfigManager()
        assert var20 is not None
        var21 = ''
        var22 = module0.BaseJSONConfigManager()
        assert var22 is not None
        var23 = var22.get(var21)
        assert var23 is not None
        var24 = module0.BaseJSONConfigManager()
        assert var24 is not None
        var25 = module0.BaseJSONConfigManager()
        assert var25 is not None
        var26 = 'K&H94v*%\r'
        var27 = {var26: var26, var26: var26, var26: var26}
        var28 = module0.BaseJSONConfigManager(**var27)
        assert var28 is not None
        var29 = var28.ensure_config_dir_exists()
        assert var29 is None
        var30 = var28.ensure_config_dir_exists()
        assert var30 is None
        var31 = module0.BaseJSONConfigManager()
        assert var31 is not None
        var32 = ''
        var33 = module0.BaseJSONConfigManager()
        assert var33 is not None
        var34 = var33.get(var32)
        assert var34 is not None
        var35 = var33.ensure_config_dir_exists()
        assert var35 is None
        var36 = 'K&H94v*%\r'
        var37 = {var36: var36, var36: var36, var36: var36}
        var38 = module0.BaseJSONConfigManager(**var37)
        assert var38 is not None
        var39 = var38.ensure_config_dir_exists()
        assert var39 is None
        var40 = ''
        var41 = module0.BaseJSONConfigManager()
        assert var41 is not None
        var42 = var41.get(var40)
        assert var42 is not None
        var43 = var41.ensure_config_dir_exists()
        assert var43 is None
        var44 = var41.ensure_config_dir_exists()
        assert var44 is None
        var45 = 17
        var46 = ']fjrSDts%,6\nPFB'
        var47 = b'\xb6/\xa3n\xc4\x0f\xedF'
        var48 = {var46, var41, var47}
        var49 = 0.5
        var50 = var45, var33, var48, var49
        var51 = var24.directory(var50)
    except BaseException:
        pass


def test_case_152():
    try:
        var0 = module0.BaseJSONConfigManager()
        assert var0 is not None
        var1 = None
        var2 = {var1: var0}
        var3 = module0.recursive_update(var0, var2)
    except BaseException:
        pass


def test_case_153():
    try:
        var0 = {}
        var1 = module0.BaseJSONConfigManager(**var0)
        assert var1 is not None
        var2 = var1.ensure_config_dir_exists()
        assert var2 is None
        var3 = ''
        var4 = module0.BaseJSONConfigManager()
        assert var4 is not None
        var5 = var4.get(var3)
        assert var5 is not None
        var6 = module0.BaseJSONConfigManager()
        assert var6 is not None
        var7 = var6.ensure_config_dir_exists()
        assert var7 is None
        var8 = ''
        var9 = module0.BaseJSONConfigManager()
        assert var9 is not None
        var10 = var9.get(var8)
        assert var10 is not None
        var11 = module0.BaseJSONConfigManager()
        assert var11 is not None
        var12 = ''
        var13 = module0.BaseJSONConfigManager()
        assert var13 is not None
        var14 = var13.get(var12)
        assert var14 is not None
        var15 = module0.BaseJSONConfigManager()
        assert var15 is not None
        var16 = ''
        var17 = module0.BaseJSONConfigManager()
        assert var17 is not None
        var18 = var17.get(var16)
        assert var18 is not None
        var19 = var17.ensure_config_dir_exists()
        assert var19 is None
        var20 = var17.ensure_config_dir_exists()
        assert var20 is None
        var21 = []
        var22 = var15.get(var21)
    except BaseException:
        pass


def test_case_154():
    try:
        var0 = ''
        var1 = module0.BaseJSONConfigManager()
        assert var1 is not None
        var2 = var1.get(var0)
        assert var2 is not None
        var3 = module0.BaseJSONConfigManager()
        assert var3 is not None
        var4 = var3.ensure_config_dir_exists()
        assert var4 is None
        var5 = ''
        var6 = module0.BaseJSONConfigManager()
        assert var6 is not None
        var7 = var6.get(var5)
        assert var7 is not None
        var8 = module0.BaseJSONConfigManager()
        assert var8 is not None
        var9 = module0.BaseJSONConfigManager()
        assert var9 is not None
        var10 = module0.BaseJSONConfigManager()
        assert var10 is not None
        var11 = ''
        var12 = module0.BaseJSONConfigManager()
        assert var12 is not None
        var13 = var12.get(var11)
        assert var13 is not None
        var14 = module0.BaseJSONConfigManager()
        assert var14 is not None
        var15 = ''
        var16 = module0.BaseJSONConfigManager()
        assert var16 is not None
        var17 = var16.get(var15)
        assert var17 is not None
        var18 = module0.BaseJSONConfigManager()
        assert var18 is not None
        var19 = var18.file_name(var15)
        assert var19 == './.json'
        var20 = {}
        var21 = module0.BaseJSONConfigManager(**var20)
        assert var21 is not None
        var22 = var21.ensure_config_dir_exists()
        assert var22 is None
        var23 = ''
        var24 = module0.BaseJSONConfigManager()
        assert var24 is not None
        var25 = var24.get(var23)
        assert var25 is not None
        var26 = module0.BaseJSONConfigManager()
        assert var26 is not None
        var27 = ''
        var28 = module0.BaseJSONConfigManager()
        assert var28 is not None
        var29 = var28.get(var27)
        assert var29 is not None
        var30 = var28.ensure_config_dir_exists()
        assert var30 is None
        var31 = var28.ensure_config_dir_exists()
        assert var31 is None
        var32 = module0.BaseJSONConfigManager()
        assert var32 is not None
        var33 = ''
        var34 = module0.BaseJSONConfigManager()
        assert var34 is not None
        var35 = var34.get(var33)
        assert var35 is not None
        var36 = 'K&H94v*%\r'
        var37 = {var36: var36, var36: var36, var36: var36}
        var38 = module0.BaseJSONConfigManager(**var37)
        assert var38 is not None
        var39 = var38.ensure_config_dir_exists()
        assert var39 is None
        var40 = 'K&H94v*%\r'
        var41 = {var40: var40, var40: var40, var40: var40}
        var42 = module0.BaseJSONConfigManager(**var41)
        assert var42 is not None
        var43 = var42.ensure_config_dir_exists()
        assert var43 is None
        var44 = {}
        var45 = []
        var46 = module0.remove_defaults(var44, var45)
        assert var46 is None
        var47 = module0.BaseJSONConfigManager()
        assert var47 is not None
        var48 = 'K&H94v*%\r'
        var49 = {var48: var48, var48: var48, var48: var48}
        var50 = module0.BaseJSONConfigManager(**var49)
        assert var50 is not None
        var51 = var50.ensure_config_dir_exists()
        assert var51 is None
        var52 = var50.ensure_config_dir_exists()
        assert var52 is None
        var53 = None
        var54 = False
        var55 = var21.set(var53, var54)
    except BaseException:
        pass


def test_case_155():
    try:
        var0 = module0.BaseJSONConfigManager()
        assert var0 is not None
        var1 = 'login.html'
        var2 = 'RR&v]:"85\rL\n'
        var3 = 410
        var4 = var2, var3
        var5 = module0.recursive_update(var1, var4)
    except BaseException:
        pass


def test_case_156():
    try:
        var0 = module0.BaseJSONConfigManager()
        assert var0 is not None
        var1 = 'K&H94v*%\r'
        var2 = {var1: var1, var1: var1, var1: var1}
        var3 = module0.BaseJSONConfigManager(**var2)
        assert var3 is not None
        var4 = var3.ensure_config_dir_exists()
        assert var4 is None
        var5 = var3.ensure_config_dir_exists()
        assert var5 is None
        var6 = True
        var7 = 101
        var8 = module0.remove_defaults(var6, var7)
    except BaseException:
        pass


def test_case_157():
    try:
        var0 = ''
        var1 = module0.BaseJSONConfigManager()
        assert var1 is not None
        var2 = var1.get(var0)
        assert var2 is not None
        var3 = module0.BaseJSONConfigManager()
        assert var3 is not None
        var4 = module0.BaseJSONConfigManager()
        assert var4 is not None
        var5 = module0.BaseJSONConfigManager()
        assert var5 is not None
        var6 = module0.BaseJSONConfigManager()
        assert var6 is not None
        var7 = 'K&H94v*%\r'
        var8 = {var7: var7, var7: var7, var7: var7}
        var9 = module0.BaseJSONConfigManager(**var8)
        assert var9 is not None
        var10 = var9.ensure_config_dir_exists()
        assert var10 is None
        var11 = var9.ensure_config_dir_exists()
        assert var11 is None
        var12 = ''
        var13 = module0.BaseJSONConfigManager()
        assert var13 is not None
        var14 = var13.get(var12)
        assert var14 is not None
        var15 = module0.BaseJSONConfigManager()
        assert var15 is not None
        var16 = ''
        var17 = module0.BaseJSONConfigManager()
        assert var17 is not None
        var18 = var17.get(var16)
        assert var18 is not None
        var19 = {var11: var0, var16: var5, var2: var11, var4: var12}
    except BaseException:
        pass


def test_case_158():
    try:
        var0 = module0.BaseJSONConfigManager()
        assert var0 is not None
        var1 = 'K&H94v*%\r'
        var2 = {var1: var1, var1: var1, var1: var1}
        var3 = module0.BaseJSONConfigManager(**var2)
        assert var3 is not None
        var4 = var3.ensure_config_dir_exists()
        assert var4 is None
        var5 = var3.ensure_config_dir_exists()
        assert var5 is None
        var6 = [var5, var1, var5]
        var7 = var3.file_name(var6)
    except BaseException:
        pass


def test_case_159():
    try:
        var0 = ''
        var1 = module0.BaseJSONConfigManager()
        assert var1 is not None
        var2 = var1.get(var0)
        assert var2 is not None
        var3 = module0.BaseJSONConfigManager()
        assert var3 is not None
        var4 = var3.ensure_config_dir_exists()
        assert var4 is None
        var5 = ''
        var6 = module0.BaseJSONConfigManager()
        assert var6 is not None
        var7 = var6.get(var5)
        assert var7 is not None
        var8 = module0.BaseJSONConfigManager()
        assert var8 is not None
        var9 = ''
        var10 = module0.BaseJSONConfigManager()
        assert var10 is not None
        var11 = var10.get(var9)
        assert var11 is not None
        var12 = var10.ensure_config_dir_exists()
        assert var12 is None
        var13 = var10.ensure_config_dir_exists()
        assert var13 is None
        var14 = module0.BaseJSONConfigManager()
        assert var14 is not None
        var15 = 'K&H94v*%\r'
        var16 = {var15: var15, var15: var15, var15: var15}
        var17 = module0.BaseJSONConfigManager(**var16)
        assert var17 is not None
        var18 = var17.ensure_config_dir_exists()
        assert var18 is None
        var19 = {}
        var20 = []
        var21 = module0.remove_defaults(var19, var20)
        assert var21 is None
        var22 = ''
        var23 = module0.BaseJSONConfigManager()
        assert var23 is not None
        var24 = var23.get(var22)
        assert var24 is not None
        var25 = module0.BaseJSONConfigManager()
        assert var25 is not None
        var26 = module0.BaseJSONConfigManager()
        assert var26 is not None
        var27 = 'K&H94v*%\r'
        var28 = {var27: var27, var27: var27, var27: var27}
        var29 = module0.BaseJSONConfigManager(**var28)
        assert var29 is not None
        var30 = var29.ensure_config_dir_exists()
        assert var30 is None
        var31 = var29.ensure_config_dir_exists()
        assert var31 is None
        var32 = ''
        var33 = module0.BaseJSONConfigManager()
        assert var33 is not None
        var34 = var33.get(var32)
        assert var34 is not None
        var35 = module0.BaseJSONConfigManager()
        assert var35 is not None
        var36 = var35.ensure_config_dir_exists()
        assert var36 is None
        var37 = module0.BaseJSONConfigManager()
        assert var37 is not None
        var38 = ''
        var39 = module0.BaseJSONConfigManager()
        assert var39 is not None
        var40 = var39.get(var38)
        assert var40 is not None
        var41 = var39.ensure_config_dir_exists()
        assert var41 is None
        var42 = b'^\xc8\xd1\x99W\x10\x999\xba\x91H\x12\xf4='
        var43 = 2743
        var44 = var10.update(var42, var43)
    except BaseException:
        pass


def test_case_160():
    try:
        var0 = ''
        var1 = module0.BaseJSONConfigManager()
        assert var1 is not None
        var2 = var1.get(var0)
        assert var2 is not None
        var3 = var1.ensure_config_dir_exists()
        assert var3 is None
        var4 = 'K&H94v*%\r'
        var5 = {var4: var4, var4: var4, var4: var4}
        var6 = module0.BaseJSONConfigManager(**var5)
        assert var6 is not None
        var7 = var6.ensure_config_dir_exists()
        assert var7 is None
        var8 = {}
        var9 = []
        var10 = module0.remove_defaults(var8, var9)
        assert var10 is None
        var11 = module0.BaseJSONConfigManager()
        assert var11 is not None
        var12 = 'K&H94v*%\r'
        var13 = {var12: var12, var12: var12, var12: var12}
        var14 = module0.BaseJSONConfigManager(**var13)
        assert var14 is not None
        var15 = var14.ensure_config_dir_exists()
        assert var15 is None
        var16 = var14.ensure_config_dir_exists()
        assert var16 is None
        var17 = ''
        var18 = module0.BaseJSONConfigManager()
        assert var18 is not None
        var19 = var18.get(var17)
        assert var19 is not None
        var20 = module0.BaseJSONConfigManager()
        assert var20 is not None
        var21 = ''
        var22 = module0.BaseJSONConfigManager()
        assert var22 is not None
        var23 = var22.get(var21)
        assert var23 is not None
        var24 = module0.BaseJSONConfigManager()
        assert var24 is not None
        var25 = var24.file_name(var21)
        assert var25 == './.json'
        var26 = ''
        var27 = module0.BaseJSONConfigManager()
        assert var27 is not None
        var28 = var27.get(var26)
        assert var28 is not None
        var29 = ''
        var30 = module0.BaseJSONConfigManager()
        assert var30 is not None
        var31 = var30.get(var29)
        assert var31 is not None
        var32 = module0.BaseJSONConfigManager()
        assert var32 is not None
        var33 = var32.ensure_config_dir_exists()
        assert var33 is None
        var34 = ''
        var35 = module0.BaseJSONConfigManager()
        assert var35 is not None
        var36 = var35.get(var34)
        assert var36 is not None
        var37 = module0.BaseJSONConfigManager()
        assert var37 is not None
        var38 = ''
        var39 = module0.BaseJSONConfigManager()
        assert var39 is not None
        var40 = var39.get(var38)
        assert var40 is not None
        var41 = module0.BaseJSONConfigManager()
        assert var41 is not None
        var42 = module0.BaseJSONConfigManager()
        assert var42 is not None
        var43 = module0.BaseJSONConfigManager()
        assert var43 is not None
        var44 = ''
        var45 = module0.BaseJSONConfigManager()
        assert var45 is not None
        var46 = var45.get(var44)
        assert var46 is not None
        var47 = module0.BaseJSONConfigManager()
        assert var47 is not None
        var48 = module0.BaseJSONConfigManager()
        assert var48 is not None
        var49 = {}
        var50 = module0.BaseJSONConfigManager(**var49)
        assert var50 is not None
        var51 = var50.ensure_config_dir_exists()
        assert var51 is None
        var52 = set()
        var53 = var6.file_name(var52)
    except BaseException:
        pass


def test_case_161():
    try:
        var0 = ''
        var1 = module0.BaseJSONConfigManager()
        assert var1 is not None
        var2 = var1.get(var0)
        assert var2 is not None
        var3 = module0.BaseJSONConfigManager()
        assert var3 is not None
        var4 = var3.ensure_config_dir_exists()
        assert var4 is None
        var5 = ''
        var6 = module0.BaseJSONConfigManager()
        assert var6 is not None
        var7 = var6.get(var5)
        assert var7 is not None
        var8 = module0.BaseJSONConfigManager()
        assert var8 is not None
        var9 = ''
        var10 = module0.BaseJSONConfigManager()
        assert var10 is not None
        var11 = var10.get(var9)
        assert var11 is not None
        var12 = module0.BaseJSONConfigManager()
        assert var12 is not None
        var13 = var12.ensure_config_dir_exists()
        assert var13 is None
        var14 = ''
        var15 = module0.BaseJSONConfigManager()
        assert var15 is not None
        var16 = var15.get(var14)
        assert var16 is not None
        var17 = module0.BaseJSONConfigManager()
        assert var17 is not None
        var18 = set()
        var19 = b'b'
        var20 = var1.update(var18, var19)
    except BaseException:
        pass


def test_case_162():
    try:
        var0 = ''
        var1 = module0.BaseJSONConfigManager()
        assert var1 is not None
        var2 = var1.get(var0)
        assert var2 is not None
        var3 = module0.BaseJSONConfigManager()
        assert var3 is not None
        var4 = module0.BaseJSONConfigManager()
        assert var4 is not None
        var5 = module0.BaseJSONConfigManager()
        assert var5 is not None
        var6 = {}
        var7 = module0.BaseJSONConfigManager(**var6)
        assert var7 is not None
        var8 = var7.ensure_config_dir_exists()
        assert var8 is None
        var9 = ''
        var10 = module0.BaseJSONConfigManager()
        assert var10 is not None
        var11 = var10.get(var9)
        assert var11 is not None
        var12 = module0.BaseJSONConfigManager()
        assert var12 is not None
        var13 = ''
        var14 = module0.BaseJSONConfigManager()
        assert var14 is not None
        var15 = var14.get(var13)
        assert var15 is not None
        var16 = module0.BaseJSONConfigManager()
        assert var16 is not None
        var17 = var16.file_name(var13)
        assert var17 == './.json'
        var18 = ''
        var19 = module0.BaseJSONConfigManager()
        assert var19 is not None
        var20 = var19.get(var18)
        assert var20 is not None
        var21 = var19.ensure_config_dir_exists()
        assert var21 is None
        var22 = ''
        var23 = module0.BaseJSONConfigManager()
        assert var23 is not None
        var24 = var23.get(var22)
        assert var24 is not None
        var25 = module0.BaseJSONConfigManager()
        assert var25 is not None
        var26 = var25.ensure_config_dir_exists()
        assert var26 is None
        var27 = ''
        var28 = module0.BaseJSONConfigManager()
        assert var28 is not None
        var29 = var28.get(var27)
        assert var29 is not None
        var30 = module0.BaseJSONConfigManager()
        assert var30 is not None
        var31 = -2160.0
        var32 = 'Q+\tKO5'
        var33 = var31, var32
        var34 = var12.get(var33)
    except BaseException:
        pass


def test_case_163():
    try:
        var0 = ''
        var1 = module0.BaseJSONConfigManager()
        assert var1 is not None
        var2 = var1.get(var0)
        assert var2 is not None
        var3 = module0.BaseJSONConfigManager()
        assert var3 is not None
        var4 = var3.ensure_config_dir_exists()
        assert var4 is None
        var5 = ''
        var6 = module0.BaseJSONConfigManager()
        assert var6 is not None
        var7 = var6.get(var5)
        assert var7 is not None
        var8 = module0.BaseJSONConfigManager()
        assert var8 is not None
        var9 = ''
        var10 = module0.BaseJSONConfigManager()
        assert var10 is not None
        var11 = var10.get(var9)
        assert var11 is not None
        var12 = module0.BaseJSONConfigManager()
        assert var12 is not None
        var13 = var12.ensure_config_dir_exists()
        assert var13 is None
        var14 = ''
        var15 = module0.BaseJSONConfigManager()
        assert var15 is not None
        var16 = var15.get(var14)
        assert var16 is not None
        var17 = module0.BaseJSONConfigManager()
        assert var17 is not None
        var18 = 'K&H94v*%\r'
        var19 = {var18: var18, var18: var18, var18: var18}
        var20 = module0.BaseJSONConfigManager(**var19)
        assert var20 is not None
        var21 = var20.ensure_config_dir_exists()
        assert var21 is None
        var22 = ''
        var23 = module0.BaseJSONConfigManager()
        assert var23 is not None
        var24 = var23.get(var22)
        assert var24 is not None
        var25 = var23.ensure_config_dir_exists()
        assert var25 is None
        var26 = var23.ensure_config_dir_exists()
        assert var26 is None
        var27 = module0.BaseJSONConfigManager()
        assert var27 is not None
        var28 = 'K&H94v*%\r'
        var29 = {var28: var28, var28: var28, var28: var28}
        var30 = module0.BaseJSONConfigManager(**var29)
        assert var30 is not None
        var31 = var30.ensure_config_dir_exists()
        assert var31 is None
        var32 = {}
        var33 = []
        var34 = module0.remove_defaults(var32, var33)
        assert var34 is None
        var35 = ''
        var36 = module0.BaseJSONConfigManager()
        assert var36 is not None
        var37 = var36.get(var35)
        assert var37 is not None
        var38 = {}
        var39 = module0.BaseJSONConfigManager(**var38)
        assert var39 is not None
        var40 = var39.ensure_config_dir_exists()
        assert var40 is None
        var41 = b"\xdeV\xa3\xab\xff'!'hJ#\xbf\xb2\x96"
        var42 = module0.remove_defaults(var20, var41)
    except BaseException:
        pass


def test_case_164():
    try:
        var0 = ''
        var1 = module0.BaseJSONConfigManager()
        assert var1 is not None
        var2 = var1.get(var0)
        assert var2 is not None
        var3 = module0.BaseJSONConfigManager()
        assert var3 is not None
        var4 = module0.BaseJSONConfigManager()
        assert var4 is not None
        var5 = module0.BaseJSONConfigManager()
        assert var5 is not None
        var6 = ''
        var7 = module0.BaseJSONConfigManager()
        assert var7 is not None
        var8 = var7.get(var6)
        assert var8 is not None
        var9 = module0.BaseJSONConfigManager()
        assert var9 is not None
        var10 = {}
        var11 = module0.BaseJSONConfigManager(**var10)
        assert var11 is not None
        var12 = var11.ensure_config_dir_exists()
        assert var12 is None
        var13 = ''
        var14 = module0.BaseJSONConfigManager()
        assert var14 is not None
        var15 = var14.get(var13)
        assert var15 is not None
        var16 = 'K&H94v*%\r'
        var17 = {var16: var16, var16: var16, var16: var16}
        var18 = module0.BaseJSONConfigManager(**var17)
        assert var18 is not None
        var19 = var18.ensure_config_dir_exists()
        assert var19 is None
        var20 = var1.directory(var11)
    except BaseException:
        pass


def test_case_165():
    try:
        var0 = 'K&H94v*%\r'
        var1 = {var0: var0, var0: var0, var0: var0}
        var2 = module0.BaseJSONConfigManager(**var1)
        assert var2 is not None
        var3 = var2.ensure_config_dir_exists()
        assert var3 is None
        var4 = {}
        var5 = []
        var6 = module0.remove_defaults(var4, var5)
        assert var6 is None
        var7 = ''
        var8 = module0.BaseJSONConfigManager()
        assert var8 is not None
        var9 = var8.get(var7)
        assert var9 is not None
        var10 = module0.BaseJSONConfigManager()
        assert var10 is not None
        var11 = var10.ensure_config_dir_exists()
        assert var11 is None
        var12 = ''
        var13 = module0.BaseJSONConfigManager()
        assert var13 is not None
        var14 = var13.get(var12)
        assert var14 is not None
        var15 = module0.BaseJSONConfigManager()
        assert var15 is not None
        var16 = ''
        var17 = module0.BaseJSONConfigManager()
        assert var17 is not None
        var18 = var17.get(var16)
        assert var18 is not None
        var19 = module0.BaseJSONConfigManager()
        assert var19 is not None
        var20 = var19.ensure_config_dir_exists()
        assert var20 is None
        var21 = {}
        var22 = module0.BaseJSONConfigManager(**var21)
        assert var22 is not None
        var23 = var22.ensure_config_dir_exists()
        assert var23 is None
        var24 = ''
        var25 = module0.BaseJSONConfigManager()
        assert var25 is not None
        var26 = var25.get(var24)
        assert var26 is not None
        var27 = var25.ensure_config_dir_exists()
        assert var27 is None
        var28 = 1000.0
        var29 = b'2\x82\x0c\xe7\x05(\xd2p\xdaa\x14\x84\xdaX)'
        var30 = var17.set(var28, var29)
    except BaseException:
        pass


def test_case_166():
    try:
        var0 = ''
        var1 = module0.BaseJSONConfigManager()
        assert var1 is not None
        var2 = var1.get(var0)
        assert var2 is not None
        var3 = ''
        var4 = module0.BaseJSONConfigManager()
        assert var4 is not None
        var5 = var4.get(var3)
        assert var5 is not None
        var6 = var4.ensure_config_dir_exists()
        assert var6 is None
        var7 = ''
        var8 = module0.BaseJSONConfigManager()
        assert var8 is not None
        var9 = var8.get(var7)
        assert var9 is not None
        var10 = module0.BaseJSONConfigManager()
        assert var10 is not None
        var11 = module0.BaseJSONConfigManager()
        assert var11 is not None
        var12 = module0.BaseJSONConfigManager()
        assert var12 is not None
        var13 = 'K&H94v*%\r'
        var14 = {var13: var13, var13: var13, var13: var13}
        var15 = module0.BaseJSONConfigManager(**var14)
        assert var15 is not None
        var16 = var15.ensure_config_dir_exists()
        assert var16 is None
        var17 = ''
        var18 = module0.BaseJSONConfigManager()
        assert var18 is not None
        var19 = var18.get(var17)
        assert var19 is not None
        var20 = var18.ensure_config_dir_exists()
        assert var20 is None
        var21 = var18.ensure_config_dir_exists()
        assert var21 is None
        var22 = module0.BaseJSONConfigManager()
        assert var22 is not None
        var23 = ''
        var24 = module0.BaseJSONConfigManager()
        assert var24 is not None
        var25 = var24.get(var23)
        assert var25 is not None
        var26 = module0.BaseJSONConfigManager()
        assert var26 is not None
        var27 = ''
        var28 = module0.BaseJSONConfigManager()
        assert var28 is not None
        var29 = var28.get(var27)
        assert var29 is not None
        var30 = module0.BaseJSONConfigManager()
        assert var30 is not None
        var31 = var30.file_name(var27)
        assert var31 == './.json'
        var32 = ''
        var33 = module0.BaseJSONConfigManager()
        assert var33 is not None
        var34 = var33.get(var32)
        assert var34 is not None
        var35 = module0.BaseJSONConfigManager()
        assert var35 is not None
        var36 = module0.BaseJSONConfigManager()
        assert var36 is not None
        var37 = {}
        var38 = module0.BaseJSONConfigManager(**var37)
        assert var38 is not None
        var39 = var38.ensure_config_dir_exists()
        assert var39 is None
        var40 = 'K&H94v*%\r'
        var41 = {var40: var40, var40: var40, var40: var40}
        var42 = module0.BaseJSONConfigManager(**var41)
        assert var42 is not None
        var43 = var42.ensure_config_dir_exists()
        assert var43 is None
        var44 = {}
        var45 = []
        var46 = module0.remove_defaults(var44, var45)
        assert var46 is None
        var47 = -2455
        var48 = var28.set(var47, var12)
    except BaseException:
        pass


def test_case_167():
    try:
        var0 = ''
        var1 = module0.BaseJSONConfigManager()
        assert var1 is not None
        var2 = var1.get(var0)
        assert var2 is not None
        var3 = module0.BaseJSONConfigManager()
        assert var3 is not None
        var4 = var3.ensure_config_dir_exists()
        assert var4 is None
        var5 = ''
        var6 = module0.BaseJSONConfigManager()
        assert var6 is not None
        var7 = var6.get(var5)
        assert var7 is not None
        var8 = module0.BaseJSONConfigManager()
        assert var8 is not None
        var9 = {}
        var10 = module0.BaseJSONConfigManager(**var9)
        assert var10 is not None
        var11 = var10.ensure_config_dir_exists()
        assert var11 is None
        var12 = 'K&H94v*%\r'
        var13 = {var12: var12, var12: var12, var12: var12}
        var14 = module0.BaseJSONConfigManager(**var13)
        assert var14 is not None
        var15 = var14.ensure_config_dir_exists()
        assert var15 is None
        var16 = ''
        var17 = module0.BaseJSONConfigManager()
        assert var17 is not None
        var18 = var17.get(var16)
        assert var18 is not None
        var19 = module0.BaseJSONConfigManager()
        assert var19 is not None
        var20 = module0.BaseJSONConfigManager()
        assert var20 is not None
        var21 = var20.directory(var19)
    except BaseException:
        pass


def test_case_168():
    try:
        var0 = module0.BaseJSONConfigManager()
        assert var0 is not None
        var1 = 'K&H94v*%\r'
        var2 = {var1: var1, var1: var1, var1: var1}
        var3 = module0.BaseJSONConfigManager(**var2)
        assert var3 is not None
        var4 = var3.ensure_config_dir_exists()
        assert var4 is None
        var5 = var3.ensure_config_dir_exists()
        assert var5 is None
        var6 = 'K&H94v*%\r'
        var7 = {var6: var6, var6: var6, var6: var6}
        var8 = module0.BaseJSONConfigManager(**var7)
        assert var8 is not None
        var9 = var8.ensure_config_dir_exists()
        assert var9 is None
        var10 = {}
        var11 = []
        var12 = module0.remove_defaults(var10, var11)
        assert var12 is None
        var13 = ''
        var14 = module0.BaseJSONConfigManager()
        assert var14 is not None
        var15 = var14.get(var13)
        assert var15 is not None
        var16 = var14.ensure_config_dir_exists()
        assert var16 is None
        var17 = 30.0
        var18 = var14.get(var17)
    except BaseException:
        pass


def test_case_169():
    try:
        var0 = 'K&H94v*%\r'
        var1 = {var0: var0, var0: var0, var0: var0}
        var2 = module0.BaseJSONConfigManager(**var1)
        assert var2 is not None
        var3 = var2.ensure_config_dir_exists()
        assert var3 is None
        var4 = 2062
        var5 = None
        var6 = var2.set(var4, var5)
    except BaseException:
        pass


def test_case_170():
    try:
        var0 = ''
        var1 = module0.BaseJSONConfigManager()
        assert var1 is not None
        var2 = var1.get(var0)
        assert var2 is not None
        var3 = module0.BaseJSONConfigManager()
        assert var3 is not None
        var4 = ''
        var5 = module0.BaseJSONConfigManager()
        assert var5 is not None
        var6 = var5.get(var4)
        assert var6 is not None
        var7 = module0.BaseJSONConfigManager()
        assert var7 is not None
        var8 = ''
        var9 = module0.BaseJSONConfigManager()
        assert var9 is not None
        var10 = var9.get(var8)
        assert var10 is not None
        var11 = module0.BaseJSONConfigManager()
        assert var11 is not None
        var12 = var11.file_name(var8)
        assert var12 == './.json'
        var13 = ''
        var14 = module0.BaseJSONConfigManager()
        assert var14 is not None
        var15 = var14.get(var13)
        assert var15 is not None
        var16 = module0.BaseJSONConfigManager()
        assert var16 is not None
        var17 = module0.BaseJSONConfigManager()
        assert var17 is not None
        var18 = module0.BaseJSONConfigManager()
        assert var18 is not None
        var19 = module0.BaseJSONConfigManager()
        assert var19 is not None
        var20 = True
        var21 = ()
        var22 = var16.get(var20, var21)
    except BaseException:
        pass


def test_case_171():
    try:
        var0 = ''
        var1 = module0.BaseJSONConfigManager()
        assert var1 is not None
        var2 = var1.get(var0)
        assert var2 is not None
        var3 = var1.ensure_config_dir_exists()
        assert var3 is None
        var4 = var1.ensure_config_dir_exists()
        assert var4 is None
        var5 = module0.BaseJSONConfigManager()
        assert var5 is not None
        var6 = ''
        var7 = module0.BaseJSONConfigManager()
        assert var7 is not None
        var8 = var7.get(var6)
        assert var8 is not None
        var9 = var7.ensure_config_dir_exists()
        assert var9 is None
        var10 = var7.ensure_config_dir_exists()
        assert var10 is None
        var11 = module0.BaseJSONConfigManager()
        assert var11 is not None
        var12 = 'K&H94v*%\r'
        var13 = {var12: var12, var12: var12, var12: var12}
        var14 = module0.BaseJSONConfigManager(**var13)
        assert var14 is not None
        var15 = var14.ensure_config_dir_exists()
        assert var15 is None
        var16 = var14.ensure_config_dir_exists()
        assert var16 is None
        var17 = 'K&H94v*%\r'
        var18 = {var17: var17, var17: var17, var17: var17}
        var19 = module0.BaseJSONConfigManager(**var18)
        assert var19 is not None
        var20 = var19.ensure_config_dir_exists()
        assert var20 is None
        var21 = {}
        var22 = []
        var23 = module0.remove_defaults(var21, var22)
        assert var23 is None
        var24 = module0.BaseJSONConfigManager()
        assert var24 is not None
        var25 = ''
        var26 = module0.BaseJSONConfigManager()
        assert var26 is not None
        var27 = var26.get(var25)
        assert var27 is not None
        var28 = module0.BaseJSONConfigManager()
        assert var28 is not None
        var29 = var28.ensure_config_dir_exists()
        assert var29 is None
        var30 = ''
        var31 = module0.BaseJSONConfigManager()
        assert var31 is not None
        var32 = var31.get(var30)
        assert var32 is not None
        var33 = module0.BaseJSONConfigManager()
        assert var33 is not None
        var34 = ''
        var35 = module0.BaseJSONConfigManager()
        assert var35 is not None
        var36 = var35.get(var34)
        assert var36 is not None
        var37 = module0.BaseJSONConfigManager()
        assert var37 is not None
        var38 = var37.file_name(var34)
        assert var38 == './.json'
        var39 = {}
        var40 = module0.BaseJSONConfigManager(**var39)
        assert var40 is not None
        var41 = var40.ensure_config_dir_exists()
        assert var41 is None
        var42 = ''
        var43 = module0.BaseJSONConfigManager()
        assert var43 is not None
        var44 = var43.get(var42)
        assert var44 is not None
        var45 = var43.ensure_config_dir_exists()
        assert var45 is None
        var46 = b'\xc2n=mE\xa9K*\xc4\x90\x1e'
        var47 = var1.file_name(var46)
    except BaseException:
        pass


def test_case_172():
    try:
        var0 = ''
        var1 = module0.BaseJSONConfigManager()
        assert var1 is not None
        var2 = var1.get(var0)
        assert var2 is not None
        var3 = module0.BaseJSONConfigManager()
        assert var3 is not None
        var4 = var3.ensure_config_dir_exists()
        assert var4 is None
        var5 = ''
        var6 = module0.BaseJSONConfigManager()
        assert var6 is not None
        var7 = var6.get(var5)
        assert var7 is not None
        var8 = module0.BaseJSONConfigManager()
        assert var8 is not None
        var9 = 'K&H94v*%\r'
        var10 = {var9: var9, var9: var9, var9: var9}
        var11 = module0.BaseJSONConfigManager(**var10)
        assert var11 is not None
        var12 = var11.ensure_config_dir_exists()
        assert var12 is None
        var13 = {}
        var14 = []
        var15 = module0.remove_defaults(var13, var14)
        assert var15 is None
        var16 = module0.BaseJSONConfigManager()
        assert var16 is not None
        var17 = 'K&H94v*%\r'
        var18 = {var17: var17, var17: var17, var17: var17}
        var19 = module0.BaseJSONConfigManager(**var18)
        assert var19 is not None
        var20 = var19.ensure_config_dir_exists()
        assert var20 is None
        var21 = var19.ensure_config_dir_exists()
        assert var21 is None
        var22 = ''
        var23 = module0.BaseJSONConfigManager()
        assert var23 is not None
        var24 = var23.get(var22)
        assert var24 is not None
        var25 = module0.BaseJSONConfigManager()
        assert var25 is not None
        var26 = module0.BaseJSONConfigManager()
        assert var26 is not None
        var27 = module0.BaseJSONConfigManager()
        assert var27 is not None
        var28 = ''
        var29 = module0.BaseJSONConfigManager()
        assert var29 is not None
        var30 = var29.get(var28)
        assert var30 is not None
        var31 = var29.ensure_config_dir_exists()
        assert var31 is None
        var32 = var29.ensure_config_dir_exists()
        assert var32 is None
        var33 = 1000.0
        var34 = False
        var35 = module0.BaseJSONConfigManager()
        assert var35 is not None
        var36 = var35.set(var33, var34)
    except BaseException:
        pass


def test_case_173():
    try:
        var0 = ''
        var1 = module0.BaseJSONConfigManager()
        assert var1 is not None
        var2 = var1.get(var0)
        assert var2 is not None
        var3 = module0.BaseJSONConfigManager()
        assert var3 is not None
        var4 = ''
        var5 = module0.BaseJSONConfigManager()
        assert var5 is not None
        var6 = var5.get(var4)
        assert var6 is not None
        var7 = module0.BaseJSONConfigManager()
        assert var7 is not None
        var8 = var7.file_name(var4)
        assert var8 == './.json'
        var9 = 0.01
        var10 = var3.get(var9)
    except BaseException:
        pass


def test_case_174():
    try:
        var0 = 'K&H94v*%\r'
        var1 = {var0: var0, var0: var0, var0: var0}
        var2 = module0.BaseJSONConfigManager(**var1)
        assert var2 is not None
        var3 = var2.ensure_config_dir_exists()
        assert var3 is None
        var4 = module0.BaseJSONConfigManager()
        assert var4 is not None
        var5 = ''
        var6 = module0.BaseJSONConfigManager()
        assert var6 is not None
        var7 = var6.get(var5)
        assert var7 is not None
        var8 = var6.ensure_config_dir_exists()
        assert var8 is None
        var9 = ''
        var10 = module0.BaseJSONConfigManager()
        assert var10 is not None
        var11 = var10.get(var9)
        assert var11 is not None
        var12 = {}
        var13 = module0.BaseJSONConfigManager(**var12)
        assert var13 is not None
        var14 = var13.ensure_config_dir_exists()
        assert var14 is None
        var15 = ''
        var16 = module0.BaseJSONConfigManager()
        assert var16 is not None
        var17 = var16.get(var15)
        assert var17 is not None
        var18 = module0.BaseJSONConfigManager()
        assert var18 is not None
        var19 = module0.BaseJSONConfigManager()
        assert var19 is not None
        var20 = 'K&H94v*%\r'
        var21 = {var20: var20, var20: var20, var20: var20}
        var22 = module0.BaseJSONConfigManager(**var21)
        assert var22 is not None
        var23 = var22.ensure_config_dir_exists()
        assert var23 is None
        var24 = var22.ensure_config_dir_exists()
        assert var24 is None
        var25 = ''
        var26 = module0.BaseJSONConfigManager()
        assert var26 is not None
        var27 = var26.get(var25)
        assert var27 is not None
        var28 = module0.BaseJSONConfigManager()
        assert var28 is not None
        var29 = ''
        var30 = module0.BaseJSONConfigManager()
        assert var30 is not None
        var31 = var30.get(var29)
        assert var31 is not None
        var32 = module0.BaseJSONConfigManager()
        assert var32 is not None
        var33 = var32.file_name(var29)
        assert var33 == './.json'
        var34 = True
        var35 = '`xc.0%Eak(wm'
        var36 = {var35, var34, var17}
    except BaseException:
        pass


def test_case_175():
    try:
        var0 = module0.BaseJSONConfigManager()
        assert var0 is not None
        var1 = {}
        var2 = module0.BaseJSONConfigManager(**var1)
        assert var2 is not None
        var3 = var2.ensure_config_dir_exists()
        assert var3 is None
        var4 = ''
        var5 = module0.BaseJSONConfigManager()
        assert var5 is not None
        var6 = var5.get(var4)
        assert var6 is not None
        var7 = module0.BaseJSONConfigManager()
        assert var7 is not None
        var8 = var7.ensure_config_dir_exists()
        assert var8 is None
        var9 = ''
        var10 = module0.BaseJSONConfigManager()
        assert var10 is not None
        var11 = var10.get(var9)
        assert var11 is not None
        var12 = module0.BaseJSONConfigManager()
        assert var12 is not None
        var13 = b'\xc9f\xbb\xa3xy\x9e\x99\x90*\x1a\xbb\x17B\xc8'
        var14 = 'Ad\\\x0b.FU4g\t+O7EX7'
        var15 = var10.set(var13, var14)
    except BaseException:
        pass


def test_case_176():
    try:
        var0 = ''
        var1 = module0.BaseJSONConfigManager()
        assert var1 is not None
        var2 = var1.get(var0)
        assert var2 is not None
        var3 = module0.BaseJSONConfigManager()
        assert var3 is not None
        var4 = module0.BaseJSONConfigManager()
        assert var4 is not None
        var5 = module0.BaseJSONConfigManager()
        assert var5 is not None
        var6 = None
        var7 = 'skip_check_origin'
        var8 = module0.recursive_update(var6, var7)
    except BaseException:
        pass


def test_case_177():
    try:
        var0 = module0.BaseJSONConfigManager()
        assert var0 is not None
        var1 = ''
        var2 = module0.BaseJSONConfigManager()
        assert var2 is not None
        var3 = var2.get(var1)
        assert var3 is not None
        var4 = module0.BaseJSONConfigManager()
        assert var4 is not None
        var5 = module0.BaseJSONConfigManager()
        assert var5 is not None
        var6 = module0.BaseJSONConfigManager()
        assert var6 is not None
        var7 = 'K&H94v*%\r'
        var8 = {var7: var7, var7: var7, var7: var7}
        var9 = module0.BaseJSONConfigManager(**var8)
        assert var9 is not None
        var10 = var9.ensure_config_dir_exists()
        assert var10 is None
        var11 = {}
        var12 = []
        var13 = module0.remove_defaults(var11, var12)
        assert var13 is None
        var14 = ''
        var15 = module0.BaseJSONConfigManager()
        assert var15 is not None
        var16 = var15.get(var14)
        assert var16 is not None
        var17 = module0.BaseJSONConfigManager()
        assert var17 is not None
        var18 = ''
        var19 = module0.BaseJSONConfigManager()
        assert var19 is not None
        var20 = var19.get(var18)
        assert var20 is not None
        var21 = module0.BaseJSONConfigManager()
        assert var21 is not None
        var22 = var21.file_name(var18)
        assert var22 == './.json'
        var23 = None
        var24 = var12, var23
        var25 = module0.remove_defaults(var24, var11)
    except BaseException:
        pass


def test_case_178():
    try:
        var0 = module0.BaseJSONConfigManager()
        assert var0 is not None
        var1 = ''
        var2 = module0.BaseJSONConfigManager()
        assert var2 is not None
        var3 = var2.get(var1)
        assert var3 is not None
        var4 = module0.BaseJSONConfigManager()
        assert var4 is not None
        var5 = var4.ensure_config_dir_exists()
        assert var5 is None
        var6 = ''
        var7 = module0.BaseJSONConfigManager()
        assert var7 is not None
        var8 = var7.get(var6)
        assert var8 is not None
        var9 = module0.BaseJSONConfigManager()
        assert var9 is not None
        var10 = ''
        var11 = module0.BaseJSONConfigManager()
        assert var11 is not None
        var12 = var11.get(var10)
        assert var12 is not None
        var13 = module0.BaseJSONConfigManager()
        assert var13 is not None
        var14 = module0.BaseJSONConfigManager()
        assert var14 is not None
        var15 = module0.BaseJSONConfigManager()
        assert var15 is not None
        var16 = b'\xd6\xcb5\x1bB\xfb\xd7\x87I6\x1b\xc7\xef\xf9\n\xcb\xde\x11'
        var17 = var14.directory(var16)
    except BaseException:
        pass


def test_case_179():
    try:
        var0 = None
        var1 = 'v^Nj+G=wjF;\x0c]f'
        var2 = 'iJ5\'"x~t'
        var3 = '*lDz3t+='
        var4 = {var1: var1, var2: var1, var3: var2}
        var5 = module0.BaseJSONConfigManager(**var4)
        assert var5 is not None
        var6 = var5.get(var0)
    except BaseException:
        pass


def test_case_180():
    try:
        var0 = 'K&H94v*%\r'
        var1 = {var0: var0, var0: var0, var0: var0}
        var2 = module0.BaseJSONConfigManager(**var1)
        assert var2 is not None
        var3 = var2.ensure_config_dir_exists()
        assert var3 is None
        var4 = ''
        var5 = module0.BaseJSONConfigManager()
        assert var5 is not None
        var6 = var5.get(var4)
        assert var6 is not None
        var7 = module0.BaseJSONConfigManager()
        assert var7 is not None
        var8 = ''
        var9 = module0.BaseJSONConfigManager()
        assert var9 is not None
        var10 = var9.get(var8)
        assert var10 is not None
        var11 = module0.BaseJSONConfigManager()
        assert var11 is not None
        var12 = var11.file_name(var8)
        assert var12 == './.json'
        var13 = ''
        var14 = module0.BaseJSONConfigManager()
        assert var14 is not None
        var15 = var14.get(var13)
        assert var15 is not None
        var16 = module0.BaseJSONConfigManager()
        assert var16 is not None
        var17 = var16.ensure_config_dir_exists()
        assert var17 is None
        var18 = ''
        var19 = module0.BaseJSONConfigManager()
        assert var19 is not None
        var20 = var19.get(var18)
        assert var20 is not None
        var21 = module0.BaseJSONConfigManager()
        assert var21 is not None
        var22 = ''
        var23 = module0.BaseJSONConfigManager()
        assert var23 is not None
        var24 = var23.get(var22)
        assert var24 is not None
        var25 = module0.BaseJSONConfigManager()
        assert var25 is not None
        var26 = module0.BaseJSONConfigManager()
        assert var26 is not None
        var27 = module0.BaseJSONConfigManager()
        assert var27 is not None
        var28 = module0.BaseJSONConfigManager()
        assert var28 is not None
        var29 = 'K&H94v*%\r'
        var30 = {var29: var29, var29: var29, var29: var29}
        var31 = module0.BaseJSONConfigManager(**var30)
        assert var31 is not None
        var32 = var31.ensure_config_dir_exists()
        assert var32 is None
        var33 = var31.ensure_config_dir_exists()
        assert var33 is None
        var34 = {var12, var4}
        var35 = var14.file_name(var34)
    except BaseException:
        pass


def test_case_181():
    try:
        var0 = ''
        var1 = module0.BaseJSONConfigManager()
        assert var1 is not None
        var2 = var1.get(var0)
        assert var2 is not None
        var3 = module0.BaseJSONConfigManager()
        assert var3 is not None
        var4 = ''
        var5 = module0.BaseJSONConfigManager()
        assert var5 is not None
        var6 = var5.get(var4)
        assert var6 is not None
        var7 = module0.BaseJSONConfigManager()
        assert var7 is not None
        var8 = var7.file_name(var4)
        assert var8 == './.json'
        var9 = ''
        var10 = module0.BaseJSONConfigManager()
        assert var10 is not None
        var11 = var10.get(var9)
        assert var11 is not None
        var12 = var10.ensure_config_dir_exists()
        assert var12 is None
        var13 = 'K&H94v*%\r'
        var14 = {var13: var13, var13: var13, var13: var13}
        var15 = module0.BaseJSONConfigManager(**var14)
        assert var15 is not None
        var16 = var15.ensure_config_dir_exists()
        assert var16 is None
        var17 = {}
        var18 = []
        var19 = module0.remove_defaults(var17, var18)
        assert var19 is None
        var20 = 'K&H94v*%\r'
        var21 = {var20: var20, var20: var20, var20: var20}
        var22 = module0.BaseJSONConfigManager(**var21)
        assert var22 is not None
        var23 = var22.ensure_config_dir_exists()
        assert var23 is None
        var24 = ''
        var25 = module0.BaseJSONConfigManager()
        assert var25 is not None
        var26 = var25.get(var24)
        assert var26 is not None
        var27 = ''
        var28 = module0.BaseJSONConfigManager()
        assert var28 is not None
        var29 = var28.get(var27)
        assert var29 is not None
        var30 = module0.BaseJSONConfigManager()
        assert var30 is not None
        var31 = module0.BaseJSONConfigManager()
        assert var31 is not None
        var32 = ''
        var33 = module0.BaseJSONConfigManager()
        assert var33 is not None
        var34 = var33.get(var32)
        assert var34 is not None
        var35 = var33.ensure_config_dir_exists()
        assert var35 is None
        var36 = var33.ensure_config_dir_exists()
        assert var36 is None
        var37 = module0.BaseJSONConfigManager()
        assert var37 is not None
        var38 = 2496.538
        var39 = var37.set(var22, var38)
    except BaseException:
        pass


def test_case_182():
    try:
        var0 = ''
        var1 = module0.BaseJSONConfigManager()
        assert var1 is not None
        var2 = var1.get(var0)
        assert var2 is not None
        var3 = module0.BaseJSONConfigManager()
        assert var3 is not None
        var4 = var3.ensure_config_dir_exists()
        assert var4 is None
        var5 = ''
        var6 = module0.BaseJSONConfigManager()
        assert var6 is not None
        var7 = var6.get(var5)
        assert var7 is not None
        var8 = module0.BaseJSONConfigManager()
        assert var8 is not None
        var9 = var8.ensure_config_dir_exists()
        assert var9 is None
        var10 = ''
        var11 = module0.BaseJSONConfigManager()
        assert var11 is not None
        var12 = var11.get(var10)
        assert var12 is not None
        var13 = module0.BaseJSONConfigManager()
        assert var13 is not None
        var14 = ''
        var15 = module0.BaseJSONConfigManager()
        assert var15 is not None
        var16 = var15.get(var14)
        assert var16 is not None
        var17 = var15.ensure_config_dir_exists()
        assert var17 is None
        var18 = var15.ensure_config_dir_exists()
        assert var18 is None
        var19 = module0.BaseJSONConfigManager()
        assert var19 is not None
        var20 = ''
        var21 = module0.BaseJSONConfigManager()
        assert var21 is not None
        var22 = var21.get(var20)
        assert var22 is not None
        var23 = var21.ensure_config_dir_exists()
        assert var23 is None
        var24 = module0.BaseJSONConfigManager()
        assert var24 is not None
        var25 = ''
        var26 = module0.BaseJSONConfigManager()
        assert var26 is not None
        var27 = var26.get(var25)
        assert var27 is not None
        var28 = module0.BaseJSONConfigManager()
        assert var28 is not None
        var29 = ''
        var30 = module0.BaseJSONConfigManager()
        assert var30 is not None
        var31 = var30.get(var29)
        assert var31 is not None
        var32 = module0.BaseJSONConfigManager()
        assert var32 is not None
        var33 = var32.file_name(var29)
        assert var33 == './.json'
        var34 = module0.BaseJSONConfigManager()
        assert var34 is not None
        var35 = 'K&H94v*%\r'
        var36 = {var35: var35, var35: var35, var35: var35}
        var37 = module0.BaseJSONConfigManager(**var36)
        assert var37 is not None
        var38 = var37.ensure_config_dir_exists()
        assert var38 is None
        var39 = var37.ensure_config_dir_exists()
        assert var39 is None
        var40 = ''
        var41 = module0.BaseJSONConfigManager()
        assert var41 is not None
        var42 = var41.get(var40)
        assert var42 is not None
        var43 = 'Z_Nbqsc@&'
        var44 = module0.BaseJSONConfigManager()
        assert var44 is not None
        var45 = {var40: var30, var41: var0, var43: var12, var2: var44}
    except BaseException:
        pass


def test_case_183():
    try:
        var0 = ''
        var1 = module0.BaseJSONConfigManager()
        assert var1 is not None
        var2 = var1.get(var0)
        assert var2 is not None
        var3 = var1.ensure_config_dir_exists()
        assert var3 is None
        var4 = ''
        var5 = module0.BaseJSONConfigManager()
        assert var5 is not None
        var6 = var5.get(var4)
        assert var6 is not None
        var7 = var5.ensure_config_dir_exists()
        assert var7 is None
        var8 = var5.ensure_config_dir_exists()
        assert var8 is None
        var9 = ''
        var10 = module0.BaseJSONConfigManager()
        assert var10 is not None
        var11 = var10.get(var9)
        assert var11 is not None
        var12 = module0.BaseJSONConfigManager()
        assert var12 is not None
        var13 = ''
        var14 = module0.BaseJSONConfigManager()
        assert var14 is not None
        var15 = var14.get(var13)
        assert var15 is not None
        var16 = module0.BaseJSONConfigManager()
        assert var16 is not None
        var17 = var16.file_name(var13)
        assert var17 == './.json'
        var18 = 'notebooks'
        var19 = 30.0
        var20 = module0.recursive_update(var18, var19)
    except BaseException:
        pass


def test_case_184():
    try:
        var0 = module0.BaseJSONConfigManager()
        assert var0 is not None
        var1 = 'K&H94v*%\r'
        var2 = {var1: var1, var1: var1, var1: var1}
        var3 = module0.BaseJSONConfigManager(**var2)
        assert var3 is not None
        var4 = var3.ensure_config_dir_exists()
        assert var4 is None
        var5 = var3.ensure_config_dir_exists()
        assert var5 is None
        var6 = ''
        var7 = module0.BaseJSONConfigManager()
        assert var7 is not None
        var8 = var7.get(var6)
        assert var8 is not None
        var9 = module0.BaseJSONConfigManager()
        assert var9 is not None
        var10 = ''
        var11 = module0.BaseJSONConfigManager()
        assert var11 is not None
        var12 = var11.get(var10)
        assert var12 is not None
        var13 = module0.BaseJSONConfigManager()
        assert var13 is not None
        var14 = var13.file_name(var10)
        assert var14 == './.json'
        var15 = ''
        var16 = module0.BaseJSONConfigManager()
        assert var16 is not None
        var17 = var16.get(var15)
        assert var17 is not None
        var18 = var16.ensure_config_dir_exists()
        assert var18 is None
        var19 = var16.ensure_config_dir_exists()
        assert var19 is None
        var20 = None
        var21 = module0.remove_defaults(var20, var11)
    except BaseException:
        pass


def test_case_185():
    try:
        var0 = 'K&H94v*%\r'
        var1 = {var0: var0, var0: var0, var0: var0}
        var2 = module0.BaseJSONConfigManager(**var1)
        assert var2 is not None
        var3 = var2.ensure_config_dir_exists()
        assert var3 is None
        var4 = ''
        var5 = module0.BaseJSONConfigManager()
        assert var5 is not None
        var6 = var5.get(var4)
        assert var6 is not None
        var7 = module0.BaseJSONConfigManager()
        assert var7 is not None
        var8 = var7.ensure_config_dir_exists()
        assert var8 is None
        var9 = ''
        var10 = module0.BaseJSONConfigManager()
        assert var10 is not None
        var11 = var10.get(var9)
        assert var11 is not None
        var12 = module0.BaseJSONConfigManager()
        assert var12 is not None
        var13 = ''
        var14 = module0.BaseJSONConfigManager()
        assert var14 is not None
        var15 = var14.get(var13)
        assert var15 is not None
        var16 = module0.BaseJSONConfigManager()
        assert var16 is not None
        var17 = var16.file_name(var13)
        assert var17 == './.json'
        var18 = -649
        var19 = var16.get(var18)
    except BaseException:
        pass


def test_case_186():
    try:
        var0 = ''
        var1 = module0.BaseJSONConfigManager()
        assert var1 is not None
        var2 = var1.get(var0)
        assert var2 is not None
        var3 = module0.BaseJSONConfigManager()
        assert var3 is not None
        var4 = module0.BaseJSONConfigManager()
        assert var4 is not None
        var5 = 'K&H94v*%\r'
        var6 = {var5: var5, var5: var5, var5: var5}
        var7 = module0.BaseJSONConfigManager(**var6)
        assert var7 is not None
        var8 = var7.ensure_config_dir_exists()
        assert var8 is None
        var9 = var7.ensure_config_dir_exists()
        assert var9 is None
        var10 = {}
        var11 = module0.BaseJSONConfigManager(**var10)
        assert var11 is not None
        var12 = var11.ensure_config_dir_exists()
        assert var12 is None
        var13 = module0.BaseJSONConfigManager()
        assert var13 is not None
        var14 = ''
        var15 = module0.BaseJSONConfigManager()
        assert var15 is not None
        var16 = var15.get(var14)
        assert var16 is not None
        var17 = var15.ensure_config_dir_exists()
        assert var17 is None
        var18 = 'K&H94v*%\r'
        var19 = {var18: var18, var18: var18, var18: var18}
        var20 = module0.BaseJSONConfigManager(**var19)
        assert var20 is not None
        var21 = var20.ensure_config_dir_exists()
        assert var21 is None
        var22 = ''
        var23 = module0.BaseJSONConfigManager()
        assert var23 is not None
        var24 = var23.get(var22)
        assert var24 is not None
        var25 = module0.BaseJSONConfigManager()
        assert var25 is not None
        var26 = module0.BaseJSONConfigManager()
        assert var26 is not None
        var27 = module0.BaseJSONConfigManager()
        assert var27 is not None
        var28 = ''
        var29 = module0.BaseJSONConfigManager()
        assert var29 is not None
        var30 = var29.get(var28)
        assert var30 is not None
        var31 = -3074
        var32 = None
        var33 = {var3: var31, var1: var32, var11: var0}
        var34 = var4.directory(var33)
    except BaseException:
        pass


def test_case_187():
    try:
        var0 = {}
        var1 = module0.BaseJSONConfigManager(**var0)
        assert var1 is not None
        var2 = var1.ensure_config_dir_exists()
        assert var2 is None
        var3 = ''
        var4 = module0.BaseJSONConfigManager()
        assert var4 is not None
        var5 = var4.get(var3)
        assert var5 is not None
        var6 = var4.ensure_config_dir_exists()
        assert var6 is None
        var7 = var4.ensure_config_dir_exists()
        assert var7 is None
        var8 = module0.BaseJSONConfigManager()
        assert var8 is not None
        var9 = ''
        var10 = module0.BaseJSONConfigManager()
        assert var10 is not None
        var11 = var10.get(var9)
        assert var11 is not None
        var12 = module0.BaseJSONConfigManager()
        assert var12 is not None
        var13 = ''
        var14 = module0.BaseJSONConfigManager()
        assert var14 is not None
        var15 = var14.get(var13)
        assert var15 is not None
        var16 = module0.BaseJSONConfigManager()
        assert var16 is not None
        var17 = var16.ensure_config_dir_exists()
        assert var17 is None
        var18 = ''
        var19 = module0.BaseJSONConfigManager()
        assert var19 is not None
        var20 = var19.get(var18)
        assert var20 is not None
        var21 = 'K&H94v*%\r'
        var22 = {var21: var21, var21: var21, var21: var21}
        var23 = module0.BaseJSONConfigManager(**var22)
        assert var23 is not None
        var24 = var23.ensure_config_dir_exists()
        assert var24 is None
        var25 = module0.BaseJSONConfigManager()
        assert var25 is not None
        var26 = 'K&H94v*%\r'
        var27 = {var26: var26, var26: var26, var26: var26}
        var28 = module0.BaseJSONConfigManager(**var27)
        assert var28 is not None
        var29 = var28.ensure_config_dir_exists()
        assert var29 is None
        var30 = var28.ensure_config_dir_exists()
        assert var30 is None
        var31 = b'\x86\xaf\xcb\xeae\xfa\xf4\xda\xb5'
        var32 = var19.update(var31, var31)
    except BaseException:
        pass


def test_case_188():
    try:
        var0 = True
        var1 = None
        var2 = {}
        var3 = module0.BaseJSONConfigManager(**var2)
        assert var3 is not None
        var4 = var3.update(var0, var1)
    except BaseException:
        pass


def test_case_189():
    try:
        var0 = ''
        var1 = module0.BaseJSONConfigManager()
        assert var1 is not None
        var2 = var1.get(var0)
        assert var2 is not None
        var3 = module0.BaseJSONConfigManager()
        assert var3 is not None
        var4 = ''
        var5 = module0.BaseJSONConfigManager()
        assert var5 is not None
        var6 = var5.get(var4)
        assert var6 is not None
        var7 = module0.BaseJSONConfigManager()
        assert var7 is not None
        var8 = var7.file_name(var4)
        assert var8 == './.json'
        var9 = ''
        var10 = module0.BaseJSONConfigManager()
        assert var10 is not None
        var11 = var10.get(var9)
        assert var11 is not None
        var12 = {}
        var13 = module0.BaseJSONConfigManager(**var12)
        assert var13 is not None
        var14 = var13.ensure_config_dir_exists()
        assert var14 is None
        var15 = ''
        var16 = module0.BaseJSONConfigManager()
        assert var16 is not None
        var17 = var16.get(var15)
        assert var17 is not None
        var18 = var16.ensure_config_dir_exists()
        assert var18 is None
        var19 = ''
        var20 = module0.BaseJSONConfigManager()
        assert var20 is not None
        var21 = var20.get(var19)
        assert var21 is not None
        var22 = module0.BaseJSONConfigManager()
        assert var22 is not None
        var23 = module0.BaseJSONConfigManager()
        assert var23 is not None
        var24 = module0.BaseJSONConfigManager()
        assert var24 is not None
        var25 = {}
        var26 = module0.BaseJSONConfigManager(**var25)
        assert var26 is not None
        var27 = var26.ensure_config_dir_exists()
        assert var27 is None
        var28 = ''
        var29 = module0.BaseJSONConfigManager()
        assert var29 is not None
        var30 = var29.get(var28)
        assert var30 is not None
        var31 = module0.BaseJSONConfigManager()
        assert var31 is not None
        var32 = var31.ensure_config_dir_exists()
        assert var32 is None
        var33 = module0.BaseJSONConfigManager()
        assert var33 is not None
        var34 = 'K&H94v*%\r'
        var35 = {var34: var34, var34: var34, var34: var34}
        var36 = module0.BaseJSONConfigManager(**var35)
        assert var36 is not None
        var37 = var36.ensure_config_dir_exists()
        assert var37 is None
        var38 = {}
        var39 = []
        var40 = module0.remove_defaults(var38, var39)
        assert var40 is None
        var41 = ''
        var42 = module0.BaseJSONConfigManager()
        assert var42 is not None
        var43 = var42.get(var41)
        assert var43 is not None
        var44 = module0.BaseJSONConfigManager()
        assert var44 is not None
        var45 = var44.ensure_config_dir_exists()
        assert var45 is None
        var46 = 'K&H94v*%\r'
        var47 = {var46: var46, var46: var46, var46: var46}
        var48 = module0.BaseJSONConfigManager(**var47)
        assert var48 is not None
        var49 = var48.ensure_config_dir_exists()
        assert var49 is None
        var50 = 'w":_lS^6a '
        var51 = module0.BaseJSONConfigManager()
        assert var51 is not None
        var52 = var51.set(var42, var50)
    except BaseException:
        pass


def test_case_190():
    try:
        var0 = {}
        var1 = module0.BaseJSONConfigManager(**var0)
        assert var1 is not None
        var2 = var1.ensure_config_dir_exists()
        assert var2 is None
        var3 = ''
        var4 = module0.BaseJSONConfigManager()
        assert var4 is not None
        var5 = var4.get(var3)
        assert var5 is not None
        var6 = module0.BaseJSONConfigManager()
        assert var6 is not None
        var7 = 95
        var8 = {var5: var7, var5: var2, var3: var5}
    except BaseException:
        pass


def test_case_191():
    try:
        var0 = ''
        var1 = module0.BaseJSONConfigManager()
        assert var1 is not None
        var2 = var1.get(var0)
        assert var2 is not None
        var3 = module0.BaseJSONConfigManager()
        assert var3 is not None
        var4 = module0.BaseJSONConfigManager()
        assert var4 is not None
        var5 = module0.BaseJSONConfigManager()
        assert var5 is not None
        var6 = {}
        var7 = module0.BaseJSONConfigManager(**var6)
        assert var7 is not None
        var8 = var7.ensure_config_dir_exists()
        assert var8 is None
        var9 = ''
        var10 = module0.BaseJSONConfigManager()
        assert var10 is not None
        var11 = var10.get(var9)
        assert var11 is not None
        var12 = module0.BaseJSONConfigManager()
        assert var12 is not None
        var13 = var12.ensure_config_dir_exists()
        assert var13 is None
        var14 = module0.BaseJSONConfigManager()
        assert var14 is not None
        var15 = ''
        var16 = module0.BaseJSONConfigManager()
        assert var16 is not None
        var17 = var16.get(var15)
        assert var17 is not None
        var18 = module0.BaseJSONConfigManager()
        assert var18 is not None
        var19 = 'K&H94v*%\r'
        var20 = {var19: var19, var19: var19, var19: var19}
        var21 = module0.BaseJSONConfigManager(**var20)
        assert var21 is not None
        var22 = var21.ensure_config_dir_exists()
        assert var22 is None
        var23 = {}
        var24 = []
        var25 = module0.remove_defaults(var23, var24)
        assert var25 is None
        var26 = 'K&H94v*%\r'
        var27 = {var26: var26, var26: var26, var26: var26}
        var28 = module0.BaseJSONConfigManager(**var27)
        assert var28 is not None
        var29 = var28.ensure_config_dir_exists()
        assert var29 is None
        var30 = {}
        var31 = module0.BaseJSONConfigManager(**var30)
        assert var31 is not None
        var32 = var31.ensure_config_dir_exists()
        assert var32 is None
        var33 = ''
        var34 = module0.BaseJSONConfigManager()
        assert var34 is not None
        var35 = var34.get(var33)
        assert var35 is not None
        var36 = module0.BaseJSONConfigManager()
        assert var36 is not None
        var37 = var36.ensure_config_dir_exists()
        assert var37 is None
        var38 = ''
        var39 = module0.BaseJSONConfigManager()
        assert var39 is not None
        var40 = var39.get(var38)
        assert var40 is not None
        var41 = module0.BaseJSONConfigManager()
        assert var41 is not None
        var42 = 1340
        var43 = var7, var42
        var44 = module0.remove_defaults(var31, var43)
    except BaseException:
        pass


def test_case_192():
    try:
        var0 = module0.BaseJSONConfigManager()
        assert var0 is not None
        var1 = None
        var2 = {var0: var0, var0: var0, var0: var1, var0: var0}
        var3 = var0.directory(var2)
    except BaseException:
        pass


def test_case_193():
    try:
        var0 = {}
        var1 = module0.BaseJSONConfigManager(**var0)
        assert var1 is not None
        var2 = var1.ensure_config_dir_exists()
        assert var2 is None
        var3 = var1.ensure_config_dir_exists()
        assert var3 is None
        var4 = ''
        var5 = module0.BaseJSONConfigManager()
        assert var5 is not None
        var6 = var5.get(var4)
        assert var6 is not None
        var7 = var5.ensure_config_dir_exists()
        assert var7 is None
        var8 = var5.ensure_config_dir_exists()
        assert var8 is None
        var9 = module0.BaseJSONConfigManager()
        assert var9 is not None
        var10 = {}
        var11 = module0.BaseJSONConfigManager(**var10)
        assert var11 is not None
        var12 = var11.ensure_config_dir_exists()
        assert var12 is None
        var13 = []
        var14 = var11.file_name(var13)
    except BaseException:
        pass


def test_case_194():
    try:
        var0 = ''
        var1 = module0.BaseJSONConfigManager()
        assert var1 is not None
        var2 = var1.get(var0)
        assert var2 is not None
        var3 = module0.BaseJSONConfigManager()
        assert var3 is not None
        var4 = var3.ensure_config_dir_exists()
        assert var4 is None
        var5 = ''
        var6 = module0.BaseJSONConfigManager()
        assert var6 is not None
        var7 = var6.get(var5)
        assert var7 is not None
        var8 = module0.BaseJSONConfigManager()
        assert var8 is not None
        var9 = 'K&H94v*%\r'
        var10 = {var9: var9, var9: var9, var9: var9}
        var11 = module0.BaseJSONConfigManager(**var10)
        assert var11 is not None
        var12 = var11.ensure_config_dir_exists()
        assert var12 is None
        var13 = {}
        var14 = []
        var15 = module0.remove_defaults(var13, var14)
        assert var15 is None
        var16 = ''
        var17 = module0.BaseJSONConfigManager()
        assert var17 is not None
        var18 = var17.get(var16)
        assert var18 is not None
        var19 = module0.BaseJSONConfigManager()
        assert var19 is not None
        var20 = var19.ensure_config_dir_exists()
        assert var20 is None
        var21 = ''
        var22 = module0.BaseJSONConfigManager()
        assert var22 is not None
        var23 = var22.get(var21)
        assert var23 is not None
        var24 = var22.ensure_config_dir_exists()
        assert var24 is None
        var25 = module0.BaseJSONConfigManager()
        assert var25 is not None
        var26 = 'K&H94v*%\r'
        var27 = {var26: var26, var26: var26, var26: var26}
        var28 = module0.BaseJSONConfigManager(**var27)
        assert var28 is not None
        var29 = var28.ensure_config_dir_exists()
        assert var29 is None
        var30 = var28.ensure_config_dir_exists()
        assert var30 is None
        var31 = {}
        var32 = module0.BaseJSONConfigManager(**var31)
        assert var32 is not None
        var33 = var32.ensure_config_dir_exists()
        assert var33 is None
        var34 = ''
        var35 = module0.BaseJSONConfigManager()
        assert var35 is not None
        var36 = var35.get(var34)
        assert var36 is not None
        var37 = module0.BaseJSONConfigManager()
        assert var37 is not None
        var38 = var37.ensure_config_dir_exists()
        assert var38 is None
        var39 = module0.BaseJSONConfigManager()
        assert var39 is not None
        var40 = module0.BaseJSONConfigManager()
        assert var40 is not None
        var41 = ''
        var42 = module0.BaseJSONConfigManager()
        assert var42 is not None
        var43 = var42.get(var41)
        assert var43 is not None
        var44 = var42.ensure_config_dir_exists()
        assert var44 is None
        var45 = var42.ensure_config_dir_exists()
        assert var45 is None
        var46 = module0.BaseJSONConfigManager()
        assert var46 is not None
        var47 = ''
        var48 = module0.BaseJSONConfigManager()
        assert var48 is not None
        var49 = var48.get(var47)
        assert var49 is not None
        var50 = var48.ensure_config_dir_exists()
        assert var50 is None
        var51 = var48.ensure_config_dir_exists()
        assert var51 is None
        var52 = var13,
        var53 = var25.set(var52, var13)
    except BaseException:
        pass


def test_case_195():
    try:
        var0 = {}
        var1 = module0.BaseJSONConfigManager(**var0)
        assert var1 is not None
        var2 = var1.ensure_config_dir_exists()
        assert var2 is None
        var3 = var1.ensure_config_dir_exists()
        assert var3 is None
        var4 = ''
        var5 = module0.BaseJSONConfigManager()
        assert var5 is not None
        var6 = var5.get(var4)
        assert var6 is not None
        var7 = module0.BaseJSONConfigManager()
        assert var7 is not None
        var8 = ''
        var9 = module0.BaseJSONConfigManager()
        assert var9 is not None
        var10 = var9.get(var8)
        assert var10 is not None
        var11 = module0.BaseJSONConfigManager()
        assert var11 is not None
        var12 = var11.file_name(var8)
        assert var12 == './.json'
        var13 = {}
        var14 = module0.BaseJSONConfigManager(**var13)
        assert var14 is not None
        var15 = var14.ensure_config_dir_exists()
        assert var15 is None
        var16 = module0.BaseJSONConfigManager()
        assert var16 is not None
        var17 = 'K&H94v*%\r'
        var18 = {var17: var17, var17: var17, var17: var17}
        var19 = module0.BaseJSONConfigManager(**var18)
        assert var19 is not None
        var20 = var19.ensure_config_dir_exists()
        assert var20 is None
        var21 = var19.ensure_config_dir_exists()
        assert var21 is None
        var22 = True
        var23 = module0.remove_defaults(var9, var22)
    except BaseException:
        pass


def test_case_196():
    try:
        var0 = {}
        var1 = module0.BaseJSONConfigManager(**var0)
        assert var1 is not None
        var2 = var1.ensure_config_dir_exists()
        assert var2 is None
        var3 = var1.ensure_config_dir_exists()
        assert var3 is None
        var4 = ''
        var5 = module0.BaseJSONConfigManager()
        assert var5 is not None
        var6 = var5.get(var4)
        assert var6 is not None
        var7 = module0.BaseJSONConfigManager()
        assert var7 is not None
        var8 = var7.ensure_config_dir_exists()
        assert var8 is None
        var9 = ''
        var10 = module0.BaseJSONConfigManager()
        assert var10 is not None
        var11 = var10.get(var9)
        assert var11 is not None
        var12 = module0.BaseJSONConfigManager()
        assert var12 is not None
        var13 = module0.BaseJSONConfigManager()
        assert var13 is not None
        var14 = ''
        var15 = module0.BaseJSONConfigManager()
        assert var15 is not None
        var16 = var15.get(var14)
        assert var16 is not None
        var17 = var15.ensure_config_dir_exists()
        assert var17 is None
        var18 = 'K&H94v*%\r'
        var19 = {var18: var18, var18: var18, var18: var18}
        var20 = module0.BaseJSONConfigManager(**var19)
        assert var20 is not None
        var21 = var20.ensure_config_dir_exists()
        assert var21 is None
        var22 = ''
        var23 = module0.BaseJSONConfigManager()
        assert var23 is not None
        var24 = var23.get(var22)
        assert var24 is not None
        var25 = module0.BaseJSONConfigManager()
        assert var25 is not None
        var26 = ''
        var27 = module0.BaseJSONConfigManager()
        assert var27 is not None
        var28 = var27.get(var26)
        assert var28 is not None
        var29 = module0.BaseJSONConfigManager()
        assert var29 is not None
        var30 = ''
        var31 = module0.BaseJSONConfigManager()
        assert var31 is not None
        var32 = var31.get(var30)
        assert var32 is not None
        var33 = module0.BaseJSONConfigManager()
        assert var33 is not None
        var34 = var33.file_name(var30)
        assert var34 == './.json'
        var35 = ''
        var36 = module0.BaseJSONConfigManager()
        assert var36 is not None
        var37 = var36.get(var35)
        assert var37 is not None
        var38 = var36.ensure_config_dir_exists()
        assert var38 is None
        var39 = var36.ensure_config_dir_exists()
        assert var39 is None
        var40 = module0.BaseJSONConfigManager()
        assert var40 is not None
        var41 = ''
        var42 = module0.BaseJSONConfigManager()
        assert var42 is not None
        var43 = var42.get(var41)
        assert var43 is not None
        var44 = module0.BaseJSONConfigManager()
        assert var44 is not None
        var45 = var44.ensure_config_dir_exists()
        assert var45 is None
        var46 = 'K&H94v*%\r'
        var47 = {var46: var46, var46: var46, var46: var46}
        var48 = module0.BaseJSONConfigManager(**var47)
        assert var48 is not None
        var49 = var48.ensure_config_dir_exists()
        assert var49 is None
        var50 = {}
        var51 = []
        var52 = module0.remove_defaults(var50, var51)
        assert var52 is None
        var53 = var25.get(var51)
    except BaseException:
        pass


def test_case_197():
    try:
        var0 = ''
        var1 = module0.BaseJSONConfigManager()
        assert var1 is not None
        var2 = var1.get(var0)
        assert var2 is not None
        var3 = module0.BaseJSONConfigManager()
        assert var3 is not None
        var4 = var3.ensure_config_dir_exists()
        assert var4 is None
        var5 = ''
        var6 = module0.BaseJSONConfigManager()
        assert var6 is not None
        var7 = var6.get(var5)
        assert var7 is not None
        var8 = module0.BaseJSONConfigManager()
        assert var8 is not None
        var9 = {}
        var10 = module0.BaseJSONConfigManager(**var9)
        assert var10 is not None
        var11 = var10.ensure_config_dir_exists()
        assert var11 is None
        var12 = ''
        var13 = module0.BaseJSONConfigManager()
        assert var13 is not None
        var14 = var13.get(var12)
        assert var14 is not None
        var15 = module0.BaseJSONConfigManager()
        assert var15 is not None
        var16 = var15.ensure_config_dir_exists()
        assert var16 is None
        var17 = module0.BaseJSONConfigManager()
        assert var17 is not None
        var18 = 17
        var19 = var8.get(var18)
    except BaseException:
        pass


def test_case_198():
    try:
        var0 = module0.BaseJSONConfigManager()
        assert var0 is not None
        var1 = {}
        var2 = module0.BaseJSONConfigManager(**var1)
        assert var2 is not None
        var3 = var2.ensure_config_dir_exists()
        assert var3 is None
        var4 = ''
        var5 = module0.BaseJSONConfigManager()
        assert var5 is not None
        var6 = var5.get(var4)
        assert var6 is not None
        var7 = module0.BaseJSONConfigManager()
        assert var7 is not None
        var8 = var7.ensure_config_dir_exists()
        assert var8 is None
        var9 = module0.BaseJSONConfigManager()
        assert var9 is not None
        var10 = 'K&H94v*%\r'
        var11 = {var10: var10, var10: var10, var10: var10}
        var12 = module0.BaseJSONConfigManager(**var11)
        assert var12 is not None
        var13 = var12.ensure_config_dir_exists()
        assert var13 is None
        var14 = {}
        var15 = []
        var16 = module0.remove_defaults(var14, var15)
        assert var16 is None
        var17 = var2.get(var14)
    except BaseException:
        pass


def test_case_199():
    try:
        var0 = 3452.33209
        var1 = b''
        var2 = """Run before finishing the GET request

        Extend this method to add logic that should fire before
        the websocket finishes completing.
        """
        var3 = 'vY[m,>'
        var4 = {var2: var2, var2: var2, var3: var3, var3: var2}
        var5 = module0.BaseJSONConfigManager(**var4)
        assert var5 is not None
        var6 = var5.update(var0, var1)
    except BaseException:
        pass


def test_case_200():
    try:
        var0 = module0.BaseJSONConfigManager()
        assert var0 is not None
        var1 = 'K&H94v*%\r'
        var2 = {var1: var1, var1: var1, var1: var1}
        var3 = module0.BaseJSONConfigManager(**var2)
        assert var3 is not None
        var4 = var3.ensure_config_dir_exists()
        assert var4 is None
        var5 = var3.ensure_config_dir_exists()
        assert var5 is None
        var6 = ''
        var7 = module0.BaseJSONConfigManager()
        assert var7 is not None
        var8 = var7.get(var6)
        assert var8 is not None
        var9 = ()
        var10 = set()
        var11 = module0.recursive_update(var9, var10)
    except BaseException:
        pass


def test_case_201():
    try:
        var0 = None
        var1 = 'd5F6y'
        var2 = module0.BaseJSONConfigManager()
        assert var2 is not None
        var3 = var2.set(var0, var1)
    except BaseException:
        pass


def test_case_202():
    try:
        var0 = module0.BaseJSONConfigManager()
        assert var0 is not None
        var1 = 'K&H94v*%\r'
        var2 = {var1: var1, var1: var1, var1: var1}
        var3 = module0.BaseJSONConfigManager(**var2)
        assert var3 is not None
        var4 = var3.ensure_config_dir_exists()
        assert var4 is None
        var5 = var3.ensure_config_dir_exists()
        assert var5 is None
        var6 = ''
        var7 = module0.BaseJSONConfigManager()
        assert var7 is not None
        var8 = var7.get(var6)
        assert var8 is not None
        var9 = module0.BaseJSONConfigManager()
        assert var9 is not None
        var10 = var9.ensure_config_dir_exists()
        assert var10 is None
        var11 = ''
        var12 = module0.BaseJSONConfigManager()
        assert var12 is not None
        var13 = var12.get(var11)
        assert var13 is not None
        var14 = module0.BaseJSONConfigManager()
        assert var14 is not None
        var15 = ''
        var16 = module0.BaseJSONConfigManager()
        assert var16 is not None
        var17 = var16.get(var15)
        assert var17 is not None
        var18 = var16.ensure_config_dir_exists()
        assert var18 is None
        var19 = var16.ensure_config_dir_exists()
        assert var19 is None
        var20 = module0.BaseJSONConfigManager()
        assert var20 is not None
        var21 = module0.BaseJSONConfigManager()
        assert var21 is not None
        var22 = ''
        var23 = module0.BaseJSONConfigManager()
        assert var23 is not None
        var24 = var23.get(var22)
        assert var24 is not None
        var25 = module0.BaseJSONConfigManager()
        assert var25 is not None
        var26 = ''
        var27 = module0.BaseJSONConfigManager()
        assert var27 is not None
        var28 = var27.get(var26)
        assert var28 is not None
        var29 = module0.BaseJSONConfigManager()
        assert var29 is not None
        var30 = var29.file_name(var26)
        assert var30 == './.json'
        var31 = '\tYV'
        var32 = {var31: var31}
        var33 = module0.BaseJSONConfigManager(**var32)
        assert var33 is not None
        var34 = var33.ensure_config_dir_exists()
        assert var34 is None
        var35 = 'K&H94v*%\r'
        var36 = {var35: var35, var35: var35, var35: var35}
        var37 = module0.BaseJSONConfigManager(**var36)
        assert var37 is not None
        var38 = var37.ensure_config_dir_exists()
        assert var38 is None
        var39 = module0.BaseJSONConfigManager()
        assert var39 is not None
        var40 = var39.ensure_config_dir_exists()
        assert var40 is None
        var41 = 'authorization'
        var42 = module0.remove_defaults(var29, var41)
    except BaseException:
        pass


def test_case_203():
    try:
        var0 = module0.BaseJSONConfigManager()
        assert var0 is not None
        var1 = 'K&H94v*%\r'
        var2 = {var1: var1, var1: var1, var1: var1}
        var3 = module0.BaseJSONConfigManager(**var2)
        assert var3 is not None
        var4 = var3.ensure_config_dir_exists()
        assert var4 is None
        var5 = var3.ensure_config_dir_exists()
        assert var5 is None
        var6 = 'K&H94v*%\r'
        var7 = {var6: var6, var6: var6, var6: var6}
        var8 = module0.BaseJSONConfigManager(**var7)
        assert var8 is not None
        var9 = var8.ensure_config_dir_exists()
        assert var9 is None
        var10 = {}
        var11 = []
        var12 = module0.remove_defaults(var10, var11)
        assert var12 is None
        var13 = '\tYV'
        var14 = {var13: var13}
        var15 = module0.BaseJSONConfigManager(**var14)
        assert var15 is not None
        var16 = var15.ensure_config_dir_exists()
        assert var16 is None
        var17 = ''
        var18 = module0.BaseJSONConfigManager()
        assert var18 is not None
        var19 = var18.get(var17)
        assert var19 is not None
        var20 = var18.ensure_config_dir_exists()
        assert var20 is None
        var21 = ''
        var22 = module0.BaseJSONConfigManager()
        assert var22 is not None
        var23 = var22.get(var21)
        assert var23 is not None
        var24 = module0.BaseJSONConfigManager()
        assert var24 is not None
        var25 = var24.ensure_config_dir_exists()
        assert var25 is None
        var26 = {}
        var27 = module0.BaseJSONConfigManager(**var26)
        assert var27 is not None
        var28 = var27.ensure_config_dir_exists()
        assert var28 is None
        var29 = var27.ensure_config_dir_exists()
        assert var29 is None
        var30 = var27.ensure_config_dir_exists()
        assert var30 is None
        var31 = var18.directory(var3)
    except BaseException:
        pass


def test_case_204():
    try:
        var0 = ()
        var1 = 'XIRQ@B|xmCd;'
        var2 = {var1: var1}
        var3 = module0.BaseJSONConfigManager(**var2)
        assert var3 is not None
        var4 = var3.get(var0)
    except BaseException:
        pass


def test_case_205():
    try:
        var0 = ''
        var1 = module0.BaseJSONConfigManager()
        assert var1 is not None
        var2 = var1.get(var0)
        assert var2 is not None
        var3 = module0.BaseJSONConfigManager()
        assert var3 is not None
        var4 = 'K&H94v*%\r'
        var5 = {var4: var4, var4: var4, var4: var4}
        var6 = module0.BaseJSONConfigManager(**var5)
        assert var6 is not None
        var7 = var6.ensure_config_dir_exists()
        assert var7 is None
        var8 = var6.ensure_config_dir_exists()
        assert var8 is None
        var9 = ''
        var10 = module0.BaseJSONConfigManager()
        assert var10 is not None
        var11 = var10.get(var9)
        assert var11 is not None
        var12 = var10.ensure_config_dir_exists()
        assert var12 is None
        var13 = var10.ensure_config_dir_exists()
        assert var13 is None
        var14 = module0.BaseJSONConfigManager()
        assert var14 is not None
        var15 = 'K&H94v*%\r'
        var16 = {var15: var15, var15: var15, var15: var15}
        var17 = module0.BaseJSONConfigManager(**var16)
        assert var17 is not None
        var18 = var17.ensure_config_dir_exists()
        assert var18 is None
        var19 = {}
        var20 = module0.BaseJSONConfigManager(**var19)
        assert var20 is not None
        var21 = var20.ensure_config_dir_exists()
        assert var21 is None
        var22 = var20.ensure_config_dir_exists()
        assert var22 is None
        var23 = 'K&H94v*%\r'
        var24 = {var23: var23, var23: var23, var23: var23}
        var25 = module0.BaseJSONConfigManager(**var24)
        assert var25 is not None
        var26 = var25.ensure_config_dir_exists()
        assert var26 is None
        var27 = {}
        var28 = []
        var29 = module0.remove_defaults(var27, var28)
        assert var29 is None
        var30 = module0.BaseJSONConfigManager()
        assert var30 is not None
        var31 = {}
        var32 = module0.BaseJSONConfigManager(**var31)
        assert var32 is not None
        var33 = var32.ensure_config_dir_exists()
        assert var33 is None
        var34 = var32.ensure_config_dir_exists()
        assert var34 is None
        var35 = var32.ensure_config_dir_exists()
        assert var35 is None
        var36 = ''
        var37 = module0.BaseJSONConfigManager()
        assert var37 is not None
        var38 = var37.get(var36)
        assert var38 is not None
        var39 = module0.BaseJSONConfigManager()
        assert var39 is not None
        var40 = ''
        var41 = module0.BaseJSONConfigManager()
        assert var41 is not None
        var42 = var41.get(var40)
        assert var42 is not None
        var43 = module0.BaseJSONConfigManager()
        assert var43 is not None
        var44 = var43.file_name(var40)
        assert var44 == './.json'
        var45 = 652.5404
        var46 = True
        var47 = var46,
        var48 = var32, var47, var47
        var49 = module0.recursive_update(var45, var48)
    except BaseException:
        pass


def test_case_206():
    try:
        var0 = module0.BaseJSONConfigManager()
        assert var0 is not None
        var1 = var0.ensure_config_dir_exists()
        assert var1 is None
        var2 = ''
        var3 = module0.BaseJSONConfigManager()
        assert var3 is not None
        var4 = var3.get(var2)
        assert var4 is not None
        var5 = var3.ensure_config_dir_exists()
        assert var5 is None
        var6 = var3.ensure_config_dir_exists()
        assert var6 is None
        var7 = ''
        var8 = module0.BaseJSONConfigManager()
        assert var8 is not None
        var9 = var8.get(var7)
        assert var9 is not None
        var10 = module0.BaseJSONConfigManager()
        assert var10 is not None
        var11 = {}
        var12 = module0.BaseJSONConfigManager(**var11)
        assert var12 is not None
        var13 = var12.ensure_config_dir_exists()
        assert var13 is None
        var14 = ''
        var15 = module0.BaseJSONConfigManager()
        assert var15 is not None
        var16 = var15.get(var14)
        assert var16 is not None
        var17 = module0.BaseJSONConfigManager()
        assert var17 is not None
        var18 = var17.ensure_config_dir_exists()
        assert var18 is None
        var19 = module0.BaseJSONConfigManager()
        assert var19 is not None
        var20 = {}
        var21 = module0.BaseJSONConfigManager(**var20)
        assert var21 is not None
        var22 = var21.ensure_config_dir_exists()
        assert var22 is None
        var23 = var21.ensure_config_dir_exists()
        assert var23 is None
        var24 = 'K&H94v*%\r'
        var25 = {var24: var24, var24: var24, var24: var24}
        var26 = module0.BaseJSONConfigManager(**var25)
        assert var26 is not None
        var27 = var26.ensure_config_dir_exists()
        assert var27 is None
        var28 = {}
        var29 = []
        var30 = module0.remove_defaults(var28, var29)
        assert var30 is None
        var31 = module0.BaseJSONConfigManager()
        assert var31 is not None
        var32 = {var26, var14}
        var33 = var8.set(var29, var32)
    except BaseException:
        pass


def test_case_207():
    try:
        var0 = ''
        var1 = module0.BaseJSONConfigManager()
        assert var1 is not None
        var2 = var1.get(var0)
        assert var2 is not None
        var3 = var1.ensure_config_dir_exists()
        assert var3 is None
        var4 = var1.ensure_config_dir_exists()
        assert var4 is None
        var5 = {}
        var6 = module0.BaseJSONConfigManager(**var5)
        assert var6 is not None
        var7 = var6.ensure_config_dir_exists()
        assert var7 is None
        var8 = ''
        var9 = module0.BaseJSONConfigManager()
        assert var9 is not None
        var10 = var9.get(var8)
        assert var10 is not None
        var11 = module0.BaseJSONConfigManager()
        assert var11 is not None
        var12 = var11.ensure_config_dir_exists()
        assert var12 is None
        var13 = ''
        var14 = module0.BaseJSONConfigManager()
        assert var14 is not None
        var15 = var14.get(var13)
        assert var15 is not None
        var16 = module0.BaseJSONConfigManager()
        assert var16 is not None
        var17 = {}
        var18 = module0.BaseJSONConfigManager(**var17)
        assert var18 is not None
        var19 = var18.ensure_config_dir_exists()
        assert var19 is None
        var20 = var18.ensure_config_dir_exists()
        assert var20 is None
        var21 = '\tYV'
        var22 = {var21: var21}
        var23 = module0.BaseJSONConfigManager(**var22)
        assert var23 is not None
        var24 = var23.ensure_config_dir_exists()
        assert var24 is None
        var25 = ''
        var26 = module0.BaseJSONConfigManager()
        assert var26 is not None
        var27 = var26.get(var25)
        assert var27 is not None
        var28 = module0.BaseJSONConfigManager()
        assert var28 is not None
        var29 = None
        var30 = var1.get(var29)
    except BaseException:
        pass


def test_case_208():
    try:
        var0 = module0.BaseJSONConfigManager()
        assert var0 is not None
        var1 = var0.ensure_config_dir_exists()
        assert var1 is None
        var2 = {}
        var3 = module0.BaseJSONConfigManager(**var2)
        assert var3 is not None
        var4 = var3.ensure_config_dir_exists()
        assert var4 is None
        var5 = '\tYV'
        var6 = {var5: var5}
        var7 = module0.BaseJSONConfigManager(**var6)
        assert var7 is not None
        var8 = var7.ensure_config_dir_exists()
        assert var8 is None
        var9 = {}
        var10 = module0.BaseJSONConfigManager(**var9)
        assert var10 is not None
        var11 = var10.ensure_config_dir_exists()
        assert var11 is None
        var12 = var10.ensure_config_dir_exists()
        assert var12 is None
        var13 = var10.ensure_config_dir_exists()
        assert var13 is None
        var14 = ''
        var15 = module0.BaseJSONConfigManager()
        assert var15 is not None
        var16 = var15.get(var14)
        assert var16 is not None
        var17 = module0.BaseJSONConfigManager()
        assert var17 is not None
        var18 = module0.BaseJSONConfigManager()
        assert var18 is not None
        var19 = module0.BaseJSONConfigManager()
        assert var19 is not None
        var20 = {}
        var21 = module0.BaseJSONConfigManager(**var20)
        assert var21 is not None
        var22 = var21.ensure_config_dir_exists()
        assert var22 is None
        var23 = "@^8 YSBOCxv2_Uy'\t"
        var24 = var21.file_name(var23)
        assert var24 == "./@^8 YSBOCxv2_Uy'\t.json"
        var25 = 'K&H94v*%\r'
        var26 = {var25: var25, var25: var25, var25: var25}
        var27 = module0.BaseJSONConfigManager(**var26)
        assert var27 is not None
        var28 = var27.ensure_config_dir_exists()
        assert var28 is None
        var29 = {}
        var30 = []
        var31 = module0.remove_defaults(var29, var30)
        assert var31 is None
        var32 = False
        var33 = var3.set(var14, var32)
    except BaseException:
        pass


def test_case_209():
    try:
        var0 = module0.BaseJSONConfigManager()
        assert var0 is not None
        var1 = 'K&H94v*%\r'
        var2 = {var1: var1, var1: var1, var1: var1}
        var3 = module0.BaseJSONConfigManager(**var2)
        assert var3 is not None
        var4 = var3.ensure_config_dir_exists()
        assert var4 is None
        var5 = var3.ensure_config_dir_exists()
        assert var5 is None
        var6 = 'K&H94v*%\r'
        var7 = {var6: var6, var6: var6, var6: var6}
        var8 = module0.BaseJSONConfigManager(**var7)
        assert var8 is not None
        var9 = var8.ensure_config_dir_exists()
        assert var9 is None
        var10 = {}
        var11 = module0.BaseJSONConfigManager(**var10)
        assert var11 is not None
        var12 = var11.ensure_config_dir_exists()
        assert var12 is None
        var13 = ''
        var14 = module0.BaseJSONConfigManager()
        assert var14 is not None
        var15 = var14.get(var13)
        assert var15 is not None
        var16 = module0.BaseJSONConfigManager()
        assert var16 is not None
        var17 = var16.ensure_config_dir_exists()
        assert var17 is None
        var18 = module0.BaseJSONConfigManager()
        assert var18 is not None
        var19 = ''
        var20 = module0.BaseJSONConfigManager()
        assert var20 is not None
        var21 = var20.get(var19)
        assert var21 is not None
        var22 = var20.ensure_config_dir_exists()
        assert var22 is None
        var23 = -4758
        var24 = b'\x99\x0e\xaa\x11\x85f\x14\x7f9\x0e\xf4\xdd\xae6\xb7'
        var25 = var23, var24
        var26 = module0.BaseJSONConfigManager()
        assert var26 is not None
        var27 = var26.update(var25, var23)
    except BaseException:
        pass


def test_case_210():
    try:
        var0 = ''
        var1 = module0.BaseJSONConfigManager()
        assert var1 is not None
        var2 = var1.get(var0)
        assert var2 is not None
        var3 = module0.BaseJSONConfigManager()
        assert var3 is not None
        var4 = var3.ensure_config_dir_exists()
        assert var4 is None
        var5 = {}
        var6 = module0.BaseJSONConfigManager(**var5)
        assert var6 is not None
        var7 = var6.ensure_config_dir_exists()
        assert var7 is None
        var8 = ''
        var9 = module0.BaseJSONConfigManager()
        assert var9 is not None
        var10 = var9.get(var8)
        assert var10 is not None
        var11 = {}
        var12 = module0.BaseJSONConfigManager(**var11)
        assert var12 is not None
        var13 = var12.ensure_config_dir_exists()
        assert var13 is None
        var14 = var12.ensure_config_dir_exists()
        assert var14 is None
        var15 = var12.ensure_config_dir_exists()
        assert var15 is None
        var16 = module0.BaseJSONConfigManager()
        assert var16 is not None
        var17 = var16.ensure_config_dir_exists()
        assert var17 is None
        var18 = ''
        var19 = module0.BaseJSONConfigManager()
        assert var19 is not None
        var20 = var19.get(var18)
        assert var20 is not None
        var21 = module0.BaseJSONConfigManager()
        assert var21 is not None
        var22 = module0.BaseJSONConfigManager()
        assert var22 is not None
        var23 = module0.BaseJSONConfigManager()
        assert var23 is not None
        var24 = ''
        var25 = module0.BaseJSONConfigManager()
        assert var25 is not None
        var26 = var25.get(var24)
        assert var26 is not None
        var27 = var25.ensure_config_dir_exists()
        assert var27 is None
        var28 = -599
        var29 = var22.directory(var28)
    except BaseException:
        pass


def test_case_211():
    try:
        var0 = 'K&H94v*%\r'
        var1 = {var0: var0, var0: var0, var0: var0}
        var2 = module0.BaseJSONConfigManager(**var1)
        assert var2 is not None
        var3 = var2.ensure_config_dir_exists()
        assert var3 is None
        var4 = {}
        var5 = module0.BaseJSONConfigManager(**var4)
        assert var5 is not None
        var6 = var5.ensure_config_dir_exists()
        assert var6 is None
        var7 = var5.ensure_config_dir_exists()
        assert var7 is None
        var8 = module0.BaseJSONConfigManager()
        assert var8 is not None
        var9 = {}
        var10 = module0.BaseJSONConfigManager(**var9)
        assert var10 is not None
        var11 = var10.ensure_config_dir_exists()
        assert var11 is None
        var12 = ''
        var13 = module0.BaseJSONConfigManager()
        assert var13 is not None
        var14 = var13.get(var12)
        assert var14 is not None
        var15 = var13.ensure_config_dir_exists()
        assert var15 is None
        var16 = var13.ensure_config_dir_exists()
        assert var16 is None
        var17 = module0.BaseJSONConfigManager()
        assert var17 is not None
        var18 = True
        var19 = var8.file_name(var18)
    except BaseException:
        pass


def test_case_212():
    try:
        var0 = {}
        var1 = module0.BaseJSONConfigManager(**var0)
        assert var1 is not None
        var2 = var1.ensure_config_dir_exists()
        assert var2 is None
        var3 = ''
        var4 = module0.BaseJSONConfigManager()
        assert var4 is not None
        var5 = var4.get(var3)
        assert var5 is not None
        var6 = module0.BaseJSONConfigManager()
        assert var6 is not None
        var7 = var6.ensure_config_dir_exists()
        assert var7 is None
        var8 = module0.BaseJSONConfigManager()
        assert var8 is not None
        var9 = ''
        var10 = module0.BaseJSONConfigManager()
        assert var10 is not None
        var11 = var10.get(var9)
        assert var11 is not None
        var12 = var10.ensure_config_dir_exists()
        assert var12 is None
        var13 = ''
        var14 = module0.BaseJSONConfigManager()
        assert var14 is not None
        var15 = var14.get(var13)
        assert var15 is not None
        var16 = module0.BaseJSONConfigManager()
        assert var16 is not None
        var17 = module0.BaseJSONConfigManager()
        assert var17 is not None
        var18 = module0.BaseJSONConfigManager()
        assert var18 is not None
        var19 = ''
        var20 = module0.BaseJSONConfigManager()
        assert var20 is not None
        var21 = var20.get(var19)
        assert var21 is not None
        var22 = module0.BaseJSONConfigManager()
        assert var22 is not None
        var23 = var22.ensure_config_dir_exists()
        assert var23 is None
        var24 = 'K&H94v*%\r'
        var25 = {var24: var24, var24: var24, var24: var24}
        var26 = module0.BaseJSONConfigManager(**var25)
        assert var26 is not None
        var27 = var26.ensure_config_dir_exists()
        assert var27 is None
        var28 = {}
        var29 = []
        var30 = module0.remove_defaults(var28, var29)
        assert var30 is None
        var31 = ''
        var32 = module0.BaseJSONConfigManager()
        assert var32 is not None
        var33 = var32.get(var31)
        assert var33 is not None
        var34 = module0.BaseJSONConfigManager()
        assert var34 is not None
        var35 = var34.ensure_config_dir_exists()
        assert var35 is None
        var36 = ''
        var37 = module0.BaseJSONConfigManager()
        assert var37 is not None
        var38 = var37.get(var36)
        assert var38 is not None
        var39 = module0.BaseJSONConfigManager()
        assert var39 is not None
        var40 = {}
        var41 = module0.BaseJSONConfigManager(**var40)
        assert var41 is not None
        var42 = var41.ensure_config_dir_exists()
        assert var42 is None
        var43 = "@^8 YSBOCxv2_Uy'\t"
        var44 = var41.file_name(var43)
        assert var44 == "./@^8 YSBOCxv2_Uy'\t.json"
        var45 = 'q/65V_TPG}@2ts\n'
        var46 = "fYLgt2cg'aN:yU6pTOR"
        var47 = module0.recursive_update(var45, var46)
    except BaseException:
        pass


def test_case_213():
    try:
        var0 = {}
        var1 = module0.BaseJSONConfigManager(**var0)
        assert var1 is not None
        var2 = var1.ensure_config_dir_exists()
        assert var2 is None
        var3 = module0.BaseJSONConfigManager()
        assert var3 is not None
        var4 = var3.ensure_config_dir_exists()
        assert var4 is None
        var5 = 'K&H94v*%\r'
        var6 = {var5: var5, var5: var5, var5: var5}
        var7 = module0.BaseJSONConfigManager(**var6)
        assert var7 is not None
        var8 = var7.ensure_config_dir_exists()
        assert var8 is None
        var9 = ''
        var10 = module0.BaseJSONConfigManager()
        assert var10 is not None
        var11 = var10.get(var9)
        assert var11 is not None
        var12 = var10.ensure_config_dir_exists()
        assert var12 is None
        var13 = var10.ensure_config_dir_exists()
        assert var13 is None
        var14 = '\tYV'
        var15 = {var14: var14}
        var16 = module0.BaseJSONConfigManager(**var15)
        assert var16 is not None
        var17 = var16.ensure_config_dir_exists()
        assert var17 is None
        var18 = {}
        var19 = module0.BaseJSONConfigManager(**var18)
        assert var19 is not None
        var20 = var19.ensure_config_dir_exists()
        assert var20 is None
        var21 = var19.ensure_config_dir_exists()
        assert var21 is None
        var22 = var19.ensure_config_dir_exists()
        assert var22 is None
        var23 = ''
        var24 = module0.BaseJSONConfigManager()
        assert var24 is not None
        var25 = var24.get(var23)
        assert var25 is not None
        var26 = var19.ensure_config_dir_exists()
        assert var26 is None
        var27 = {}
        var28 = module0.BaseJSONConfigManager(**var27)
        assert var28 is not None
        var29 = var28.ensure_config_dir_exists()
        assert var29 is None
        var30 = ''
        var31 = module0.BaseJSONConfigManager()
        assert var31 is not None
        var32 = var31.get(var30)
        assert var32 is not None
        var33 = module0.BaseJSONConfigManager()
        assert var33 is not None
        var34 = var33.ensure_config_dir_exists()
        assert var34 is None
        var35 = module0.BaseJSONConfigManager()
        assert var35 is not None
        var36 = module0.BaseJSONConfigManager()
        assert var36 is not None
        var37 = []
        var38 = var1.set(var36, var37)
    except BaseException:
        pass


def test_case_214():
    try:
        var0 = {}
        var1 = module0.BaseJSONConfigManager(**var0)
        assert var1 is not None
        var2 = var1.ensure_config_dir_exists()
        assert var2 is None
        var3 = var1.ensure_config_dir_exists()
        assert var3 is None
        var4 = var1.ensure_config_dir_exists()
        assert var4 is None
        var5 = ''
        var6 = module0.BaseJSONConfigManager()
        assert var6 is not None
        var7 = var6.get(var5)
        assert var7 is not None
        var8 = var6.ensure_config_dir_exists()
        assert var8 is None
        var9 = var6.ensure_config_dir_exists()
        assert var9 is None
        var10 = '\tYV'
        var11 = {var10: var10}
        var12 = module0.BaseJSONConfigManager(**var11)
        assert var12 is not None
        var13 = var12.ensure_config_dir_exists()
        assert var13 is None
        var14 = {var10: var8, var2: var5}
        var15 = {var9, var7}
    except BaseException:
        pass


def test_case_215():
    try:
        var0 = ''
        var1 = module0.BaseJSONConfigManager()
        assert var1 is not None
        var2 = var1.get(var0)
        assert var2 is not None
        var3 = var1.ensure_config_dir_exists()
        assert var3 is None
        var4 = var1.ensure_config_dir_exists()
        assert var4 is None
        var5 = module0.BaseJSONConfigManager()
        assert var5 is not None
        var6 = ''
        var7 = module0.BaseJSONConfigManager()
        assert var7 is not None
        var8 = var7.get(var6)
        assert var8 is not None
        var9 = var7.ensure_config_dir_exists()
        assert var9 is None
        var10 = {}
        var11 = module0.BaseJSONConfigManager(**var10)
        assert var11 is not None
        var12 = var11.ensure_config_dir_exists()
        assert var12 is None
        var13 = var11.ensure_config_dir_exists()
        assert var13 is None
        var14 = module0.BaseJSONConfigManager()
        assert var14 is not None
        var15 = 'K&H94v*%\r'
        var16 = {var15: var15, var15: var15, var15: var15}
        var17 = module0.BaseJSONConfigManager(**var16)
        assert var17 is not None
        var18 = var17.ensure_config_dir_exists()
        assert var18 is None
        var19 = var17.ensure_config_dir_exists()
        assert var19 is None
        var20 = ''
        var21 = module0.BaseJSONConfigManager()
        assert var21 is not None
        var22 = var21.get(var20)
        assert var22 is not None
        var23 = module0.BaseJSONConfigManager()
        assert var23 is not None
        var24 = module0.BaseJSONConfigManager()
        assert var24 is not None
        var25 = module0.BaseJSONConfigManager()
        assert var25 is not None
        var26 = {}
        var27 = module0.BaseJSONConfigManager(**var26)
        assert var27 is not None
        var28 = var27.ensure_config_dir_exists()
        assert var28 is None
        var29 = ''
        var30 = module0.BaseJSONConfigManager()
        assert var30 is not None
        var31 = var30.get(var29)
        assert var31 is not None
        var32 = var30.ensure_config_dir_exists()
        assert var32 is None
        var33 = var30.ensure_config_dir_exists()
        assert var33 is None
        var34 = module0.BaseJSONConfigManager()
        assert var34 is not None
        var35 = ''
        var36 = module0.BaseJSONConfigManager()
        assert var36 is not None
        var37 = var36.get(var35)
        assert var37 is not None
        var38 = module0.BaseJSONConfigManager()
        assert var38 is not None
        var39 = var38.ensure_config_dir_exists()
        assert var39 is None
        var40 = ''
        var41 = module0.BaseJSONConfigManager()
        assert var41 is not None
        var42 = var41.get(var40)
        assert var42 is not None
        var43 = module0.BaseJSONConfigManager()
        assert var43 is not None
        var44 = b'j]r\x92lU4'
        var45 = var1.directory(var44)
    except BaseException:
        pass


def test_case_216():
    try:
        var0 = {}
        var1 = module0.BaseJSONConfigManager(**var0)
        assert var1 is not None
        var2 = var1.ensure_config_dir_exists()
        assert var2 is None
        var3 = var1.ensure_config_dir_exists()
        assert var3 is None
        var4 = var1.ensure_config_dir_exists()
        assert var4 is None
        var5 = ''
        var6 = module0.BaseJSONConfigManager()
        assert var6 is not None
        var7 = var6.get(var5)
        assert var7 is not None
        var8 = var1.ensure_config_dir_exists()
        assert var8 is None
        var9 = ''
        var10 = module0.BaseJSONConfigManager()
        assert var10 is not None
        var11 = var10.get(var9)
        assert var11 is not None
        var12 = module0.BaseJSONConfigManager()
        assert var12 is not None
        var13 = var12.ensure_config_dir_exists()
        assert var13 is None
        var14 = module0.BaseJSONConfigManager()
        assert var14 is not None
        var15 = var14.ensure_config_dir_exists()
        assert var15 is None
        var16 = {}
        var17 = module0.BaseJSONConfigManager(**var16)
        assert var17 is not None
        var18 = var17.ensure_config_dir_exists()
        assert var18 is None
        var19 = var17.ensure_config_dir_exists()
        assert var19 is None
        var20 = var17.ensure_config_dir_exists()
        assert var20 is None
        var21 = ''
        var22 = module0.BaseJSONConfigManager()
        assert var22 is not None
        var23 = var22.get(var21)
        assert var23 is not None
        var24 = var22.ensure_config_dir_exists()
        assert var24 is None
        var25 = var22.ensure_config_dir_exists()
        assert var25 is None
        var26 = b'\xa8\x9bI\xafZ\xd5'
        var27 = var26, var22
        var28 = var6.get(var27)
    except BaseException:
        pass


def test_case_217():
    try:
        var0 = {}
        var1 = module0.BaseJSONConfigManager(**var0)
        assert var1 is not None
        var2 = var1.ensure_config_dir_exists()
        assert var2 is None
        var3 = var1.ensure_config_dir_exists()
        assert var3 is None
        var4 = ''
        var5 = module0.BaseJSONConfigManager()
        assert var5 is not None
        var6 = var5.get(var4)
        assert var6 is not None
        var7 = module0.BaseJSONConfigManager()
        assert var7 is not None
        var8 = var7.ensure_config_dir_exists()
        assert var8 is None
        var9 = {}
        var10 = module0.BaseJSONConfigManager(**var9)
        assert var10 is not None
        var11 = var10.ensure_config_dir_exists()
        assert var11 is None
        var12 = "@^8 YSBOCxv2_Uy'\t"
        var13 = var10.file_name(var12)
        assert var13 == "./@^8 YSBOCxv2_Uy'\t.json"
        var14 = -1376.717498
        var15 = var5.file_name(var14)
    except BaseException:
        pass


def test_case_218():
    try:
        var0 = ''
        var1 = module0.BaseJSONConfigManager()
        assert var1 is not None
        var2 = var1.get(var0)
        assert var2 is not None
        var3 = var1.ensure_config_dir_exists()
        assert var3 is None
        var4 = var1.ensure_config_dir_exists()
        assert var4 is None
        var5 = module0.BaseJSONConfigManager()
        assert var5 is not None
        var6 = {}
        var7 = module0.BaseJSONConfigManager(**var6)
        assert var7 is not None
        var8 = var7.ensure_config_dir_exists()
        assert var8 is None
        var9 = var7.ensure_config_dir_exists()
        assert var9 is None
        var10 = 'K&H94v*%\r'
        var11 = {var10: var10, var10: var10, var10: var10}
        var12 = module0.BaseJSONConfigManager(**var11)
        assert var12 is not None
        var13 = var12.ensure_config_dir_exists()
        assert var13 is None
        var14 = ''
        var15 = module0.BaseJSONConfigManager()
        assert var15 is not None
        var16 = var15.get(var14)
        assert var16 is not None
        var17 = module0.BaseJSONConfigManager()
        assert var17 is not None
        var18 = {}
        var19 = module0.BaseJSONConfigManager(**var18)
        assert var19 is not None
        var20 = var19.ensure_config_dir_exists()
        assert var20 is None
        var21 = var19.ensure_config_dir_exists()
        assert var21 is None
        var22 = var19.ensure_config_dir_exists()
        assert var22 is None
        var23 = ''
        var24 = module0.BaseJSONConfigManager()
        assert var24 is not None
        var25 = var24.get(var23)
        assert var25 is not None
        var26 = var19.ensure_config_dir_exists()
        assert var26 is None
        var27 = ''
        var28 = module0.BaseJSONConfigManager()
        assert var28 is not None
        var29 = var28.get(var27)
        assert var29 is not None
        var30 = module0.BaseJSONConfigManager()
        assert var30 is not None
        var31 = module0.BaseJSONConfigManager()
        assert var31 is not None
        var32 = module0.BaseJSONConfigManager()
        assert var32 is not None
        var33 = ''
        var34 = module0.BaseJSONConfigManager()
        assert var34 is not None
        var35 = var34.get(var33)
        assert var35 is not None
        var36 = var34.ensure_config_dir_exists()
        assert var36 is None
        var37 = var34.ensure_config_dir_exists()
        assert var37 is None
        var38 = module0.BaseJSONConfigManager()
        assert var38 is not None
        var39 = 'K&H94v*%\r'
        var40 = {var39: var39, var39: var39, var39: var39}
        var41 = module0.BaseJSONConfigManager(**var40)
        assert var41 is not None
        var42 = var41.ensure_config_dir_exists()
        assert var42 is None
        var43 = var41.ensure_config_dir_exists()
        assert var43 is None
        var44 = ''
        var45 = module0.BaseJSONConfigManager()
        assert var45 is not None
        var46 = var45.get(var44)
        assert var46 is not None
        var47 = {}
        var48 = module0.BaseJSONConfigManager(**var47)
        assert var48 is not None
        var49 = var48.ensure_config_dir_exists()
        assert var49 is None
        var50 = "@^8 YSBOCxv2_Uy'\t"
        var51 = var48.file_name(var50)
        assert var51 == "./@^8 YSBOCxv2_Uy'\t.json"
        var52 = b'\xa5ux\xc9\xa8b\x11#'
        var53 = module0.recursive_update(var27, var52)
    except BaseException:
        pass


def test_case_219():
    try:
        var0 = 'K&H94v*%\r'
        var1 = {var0: var0, var0: var0, var0: var0}
        var2 = module0.BaseJSONConfigManager(**var1)
        assert var2 is not None
        var3 = var2.ensure_config_dir_exists()
        assert var3 is None
        var4 = {}
        var5 = []
        var6 = module0.remove_defaults(var4, var5)
        assert var6 is None
        var7 = ''
        var8 = module0.BaseJSONConfigManager()
        assert var8 is not None
        var9 = var8.get(var7)
        assert var9 is not None
        var10 = module0.BaseJSONConfigManager()
        assert var10 is not None
        var11 = var10.ensure_config_dir_exists()
        assert var11 is None
        var12 = ()
        var13 = var10.directory(var12)
    except BaseException:
        pass


def test_case_220():
    try:
        var0 = 'K&H94v*%\r'
        var1 = {var0: var0, var0: var0, var0: var0}
        var2 = module0.BaseJSONConfigManager(**var1)
        assert var2 is not None
        var3 = var2.ensure_config_dir_exists()
        assert var3 is None
        var4 = module0.BaseJSONConfigManager()
        assert var4 is not None
        var5 = 'K&H94v*%\r'
        var6 = {var5: var5, var5: var5, var5: var5}
        var7 = module0.BaseJSONConfigManager(**var6)
        assert var7 is not None
        var8 = var7.ensure_config_dir_exists()
        assert var8 is None
        var9 = var7.ensure_config_dir_exists()
        assert var9 is None
        var10 = var4,
        var11 = var2.update(var7, var10)
    except BaseException:
        pass


def test_case_221():
    try:
        var0 = ''
        var1 = module0.BaseJSONConfigManager()
        assert var1 is not None
        var2 = var1.get(var0)
        assert var2 is not None
        var3 = var1.ensure_config_dir_exists()
        assert var3 is None
        var4 = var1.ensure_config_dir_exists()
        assert var4 is None
        var5 = {}
        var6 = module0.BaseJSONConfigManager(**var5)
        assert var6 is not None
        var7 = var6.ensure_config_dir_exists()
        assert var7 is None
        var8 = 'K&H94v*%\r'
        var9 = {var8: var8, var8: var8, var8: var8}
        var10 = module0.BaseJSONConfigManager(**var9)
        assert var10 is not None
        var11 = var10.ensure_config_dir_exists()
        assert var11 is None
        var12 = {}
        var13 = []
        var14 = module0.remove_defaults(var12, var13)
        assert var14 is None
        var15 = 'K&H94v*%\r'
        var16 = {var15: var15, var15: var15, var15: var15}
        var17 = module0.BaseJSONConfigManager(**var16)
        assert var17 is not None
        var18 = var17.ensure_config_dir_exists()
        assert var18 is None
        var19 = {var4, var14, var6}
        var20 = var10.file_name(var19)
    except BaseException:
        pass


def test_case_222():
    try:
        var0 = {}
        var1 = module0.BaseJSONConfigManager(**var0)
        assert var1 is not None
        var2 = var1.ensure_config_dir_exists()
        assert var2 is None
        var3 = "@^8 YSBOCxv2_Uy'\t"
        var4 = var1.file_name(var3)
        assert var4 == "./@^8 YSBOCxv2_Uy'\t.json"
        var5 = module0.BaseJSONConfigManager()
        assert var5 is not None
        var6 = 'K&H94v*%\r'
        var7 = {var6: var6, var6: var6, var6: var6}
        var8 = module0.BaseJSONConfigManager(**var7)
        assert var8 is not None
        var9 = var8.ensure_config_dir_exists()
        assert var9 is None
        var10 = var8.ensure_config_dir_exists()
        assert var10 is None
        var11 = {}
        var12 = module0.BaseJSONConfigManager(**var11)
        assert var12 is not None
        var13 = var12.ensure_config_dir_exists()
        assert var13 is None
        var14 = var12.ensure_config_dir_exists()
        assert var14 is None
        var15 = var12.ensure_config_dir_exists()
        assert var15 is None
        var16 = ''
        var17 = module0.BaseJSONConfigManager()
        assert var17 is not None
        var18 = var17.get(var16)
        assert var18 is not None
        var19 = module0.BaseJSONConfigManager()
        assert var19 is not None
        var20 = var19.ensure_config_dir_exists()
        assert var20 is None
        var21 = ''
        var22 = module0.BaseJSONConfigManager()
        assert var22 is not None
        var23 = var22.get(var21)
        assert var23 is not None
        var24 = module0.BaseJSONConfigManager()
        assert var24 is not None
        var25 = ''
        var26 = module0.BaseJSONConfigManager()
        assert var26 is not None
        var27 = var26.get(var25)
        assert var27 is not None
        var28 = module0.BaseJSONConfigManager()
        assert var28 is not None
        var29 = var28.ensure_config_dir_exists()
        assert var29 is None
        var30 = ''
        var31 = module0.BaseJSONConfigManager()
        assert var31 is not None
        var32 = var31.get(var30)
        assert var32 is not None
        var33 = var31.ensure_config_dir_exists()
        assert var33 is None
        var34 = ''
        var35 = module0.BaseJSONConfigManager()
        assert var35 is not None
        var36 = var35.get(var34)
        assert var36 is not None
        var37 = b'\xe37H\xb2'
        var38 = -854.966503
        var39 = var28.set(var37, var38)
    except BaseException:
        pass


def test_case_223():
    try:
        var0 = ''
        var1 = module0.BaseJSONConfigManager()
        assert var1 is not None
        var2 = var1.get(var0)
        assert var2 is not None
        var3 = module0.BaseJSONConfigManager()
        assert var3 is not None
        var4 = module0.BaseJSONConfigManager()
        assert var4 is not None
        var5 = module0.BaseJSONConfigManager()
        assert var5 is not None
        var6 = 'K&H94v*%\r'
        var7 = {var6: var6, var6: var6, var6: var6}
        var8 = module0.BaseJSONConfigManager(**var7)
        assert var8 is not None
        var9 = var8.ensure_config_dir_exists()
        assert var9 is None
        var10 = module0.BaseJSONConfigManager()
        assert var10 is not None
        var11 = True
        var12 = None
        var13 = module0.recursive_update(var11, var12)
    except BaseException:
        pass


def test_case_224():
    try:
        var0 = ''
        var1 = module0.BaseJSONConfigManager()
        assert var1 is not None
        var2 = var1.get(var0)
        assert var2 is not None
        var3 = module0.BaseJSONConfigManager()
        assert var3 is not None
        var4 = ''
        var5 = module0.BaseJSONConfigManager()
        assert var5 is not None
        var6 = var5.get(var4)
        assert var6 is not None
        var7 = module0.BaseJSONConfigManager()
        assert var7 is not None
        var8 = var7.file_name(var4)
        assert var8 == './.json'
        var9 = []
        var10 = var7.get(var9, var3)
    except BaseException:
        pass


def test_case_225():
    try:
        var0 = 'login.html'
        var1 = [var0, var0, var0]
        var2 = False
        var3 = '~O1:'
        var4 = {var3: var3}
        var5 = module0.BaseJSONConfigManager(**var4)
        assert var5 is not None
        var6 = var5.get(var1, var2)
    except BaseException:
        pass


def test_case_226():
    try:
        var0 = {}
        var1 = module0.BaseJSONConfigManager(**var0)
        assert var1 is not None
        var2 = var1.ensure_config_dir_exists()
        assert var2 is None
        var3 = var1.ensure_config_dir_exists()
        assert var3 is None
        var4 = ''
        var5 = module0.BaseJSONConfigManager()
        assert var5 is not None
        var6 = var5.get(var4)
        assert var6 is not None
        var7 = var5.ensure_config_dir_exists()
        assert var7 is None
        var8 = 'K&H94v*%\r'
        var9 = {var8: var8, var8: var8, var8: var8}
        var10 = module0.BaseJSONConfigManager(**var9)
        assert var10 is not None
        var11 = var10.ensure_config_dir_exists()
        assert var11 is None
        var12 = {}
        var13 = []
        var14 = module0.remove_defaults(var12, var13)
        assert var14 is None
        var15 = ''
        var16 = module0.BaseJSONConfigManager()
        assert var16 is not None
        var17 = var16.get(var15)
        assert var17 is not None
        var18 = module0.BaseJSONConfigManager()
        assert var18 is not None
        var19 = module0.BaseJSONConfigManager()
        assert var19 is not None
        var20 = module0.BaseJSONConfigManager()
        assert var20 is not None
        var21 = -1720.2329
        var22 = b'\xebf\n\xdf\xb2E\xd7:\xdbf\xbb\x89pX\x1fY\x0fgH'
        var23 = module0.recursive_update(var21, var22)
    except BaseException:
        pass


def test_case_227():
    try:
        var0 = 'K&H94v*%\r'
        var1 = {var0: var0, var0: var0, var0: var0}
        var2 = module0.BaseJSONConfigManager(**var1)
        assert var2 is not None
        var3 = var2.ensure_config_dir_exists()
        assert var3 is None
        var4 = {}
        var5 = []
        var6 = module0.remove_defaults(var4, var5)
        assert var6 is None
        var7 = ''
        var8 = module0.BaseJSONConfigManager()
        assert var8 is not None
        var9 = var8.get(var7)
        assert var9 is not None
        var10 = module0.BaseJSONConfigManager()
        assert var10 is not None
        var11 = module0.BaseJSONConfigManager()
        assert var11 is not None
        var12 = module0.BaseJSONConfigManager()
        assert var12 is not None
        var13 = {}
        var14 = module0.BaseJSONConfigManager(**var13)
        assert var14 is not None
        var15 = var14.ensure_config_dir_exists()
        assert var15 is None
        var16 = var14.ensure_config_dir_exists()
        assert var16 is None
        var17 = 17
        var18 = '{>sz$\n'
        var19 = var17, var18
        var20 = module0.BaseJSONConfigManager()
        assert var20 is not None
        var21 = var20.directory(var19)
    except BaseException:
        pass


def test_case_228():
    try:
        var0 = {}
        var1 = module0.BaseJSONConfigManager(**var0)
        assert var1 is not None
        var2 = var1.ensure_config_dir_exists()
        assert var2 is None
        var3 = var1.ensure_config_dir_exists()
        assert var3 is None
        var4 = '\tYV'
        var5 = {var4: var4}
        var6 = module0.BaseJSONConfigManager(**var5)
        assert var6 is not None
        var7 = var6.ensure_config_dir_exists()
        assert var7 is None
        var8 = module0.BaseJSONConfigManager()
        assert var8 is not None
        var9 = var8.ensure_config_dir_exists()
        assert var9 is None
        var10 = module0.BaseJSONConfigManager()
        assert var10 is not None
        var11 = 'K&H94v*%\r'
        var12 = {var11: var11, var11: var11, var11: var11}
        var13 = module0.BaseJSONConfigManager(**var12)
        assert var13 is not None
        var14 = var13.ensure_config_dir_exists()
        assert var14 is None
        var15 = var13.ensure_config_dir_exists()
        assert var15 is None
        var16 = b'j\xeb??\xeeFP\x06-'
        var17 = var6.update(var8, var16)
    except BaseException:
        pass


def test_case_229():
    try:
        var0 = ''
        var1 = module0.BaseJSONConfigManager()
        assert var1 is not None
        var2 = var1.get(var0)
        assert var2 is not None
        var3 = module0.BaseJSONConfigManager()
        assert var3 is not None
        var4 = var3.ensure_config_dir_exists()
        assert var4 is None
        var5 = ''
        var6 = module0.BaseJSONConfigManager()
        assert var6 is not None
        var7 = var6.get(var5)
        assert var7 is not None
        var8 = module0.BaseJSONConfigManager()
        assert var8 is not None
        var9 = module0.BaseJSONConfigManager()
        assert var9 is not None
        var10 = module0.BaseJSONConfigManager()
        assert var10 is not None
        var11 = {}
        var12 = module0.BaseJSONConfigManager(**var11)
        assert var12 is not None
        var13 = var12.ensure_config_dir_exists()
        assert var13 is None
        var14 = var12.ensure_config_dir_exists()
        assert var14 is None
        var15 = var12.ensure_config_dir_exists()
        assert var15 is None
        var16 = module0.BaseJSONConfigManager()
        assert var16 is not None
        var17 = 'K&H94v*%\r'
        var18 = {var17: var17, var17: var17, var17: var17}
        var19 = module0.BaseJSONConfigManager(**var18)
        assert var19 is not None
        var20 = var19.ensure_config_dir_exists()
        assert var20 is None
        var21 = var19.ensure_config_dir_exists()
        assert var21 is None
        var22 = {}
        var23 = module0.BaseJSONConfigManager(**var22)
        assert var23 is not None
        var24 = var23.ensure_config_dir_exists()
        assert var24 is None
        var25 = var23.ensure_config_dir_exists()
        assert var25 is None
        var26 = var23.ensure_config_dir_exists()
        assert var26 is None
        var27 = ''
        var28 = module0.BaseJSONConfigManager()
        assert var28 is not None
        var29 = var28.get(var27)
        assert var29 is not None
        var30 = var23.ensure_config_dir_exists()
        assert var30 is None
        var31 = ''
        var32 = module0.BaseJSONConfigManager()
        assert var32 is not None
        var33 = var32.get(var31)
        assert var33 is not None
        var34 = var32.ensure_config_dir_exists()
        assert var34 is None
        var35 = var32.ensure_config_dir_exists()
        assert var35 is None
        var36 = module0.BaseJSONConfigManager()
        assert var36 is not None
        var37 = {}
        var38 = module0.BaseJSONConfigManager(**var37)
        assert var38 is not None
        var39 = var38.ensure_config_dir_exists()
        assert var39 is None
        var40 = {var31: var0, var28: var12, var33: var5, var35: var12}
    except BaseException:
        pass


def test_case_230():
    try:
        var0 = []
        var1 = True
        var2 = '3Lcl5U;'
        var3 = {var2: var2, var2: var2}
        var4 = module0.BaseJSONConfigManager(**var3)
        assert var4 is not None
        var5 = var4.update(var0, var1)
    except BaseException:
        pass


def test_case_231():
    try:
        var0 = {}
        var1 = module0.BaseJSONConfigManager(**var0)
        assert var1 is not None
        var2 = var1.ensure_config_dir_exists()
        assert var2 is None
        var3 = '\tYV'
        var4 = {var3: var3}
        var5 = module0.BaseJSONConfigManager(**var4)
        assert var5 is not None
        var6 = var5.ensure_config_dir_exists()
        assert var6 is None
        var7 = ''
        var8 = module0.BaseJSONConfigManager()
        assert var8 is not None
        var9 = var8.get(var7)
        assert var9 is not None
        var10 = var8.ensure_config_dir_exists()
        assert var10 is None
        var11 = var8.ensure_config_dir_exists()
        assert var11 is None
        var12 = module0.BaseJSONConfigManager()
        assert var12 is not None
        var13 = 'K&H94v*%\r'
        var14 = {var13: var13, var13: var13, var13: var13}
        var15 = module0.BaseJSONConfigManager(**var14)
        assert var15 is not None
        var16 = var15.ensure_config_dir_exists()
        assert var16 is None
        var17 = {}
        var18 = []
        var19 = module0.remove_defaults(var17, var18)
        assert var19 is None
        var20 = ''
        var21 = module0.BaseJSONConfigManager()
        assert var21 is not None
        var22 = var21.get(var20)
        assert var22 is not None
        var23 = module0.BaseJSONConfigManager()
        assert var23 is not None
        var24 = 772
        var25 = 'M\x0cSRMqog00'
        var26 = module0.recursive_update(var24, var25)
    except BaseException:
        pass


def test_case_232():
    try:
        var0 = {}
        var1 = module0.BaseJSONConfigManager(**var0)
        assert var1 is not None
        var2 = var1.ensure_config_dir_exists()
        assert var2 is None
        var3 = var1.ensure_config_dir_exists()
        assert var3 is None
        var4 = module0.BaseJSONConfigManager()
        assert var4 is not None
        var5 = var4.ensure_config_dir_exists()
        assert var5 is None
        var6 = ''
        var7 = module0.BaseJSONConfigManager()
        assert var7 is not None
        var8 = var7.get(var6)
        assert var8 is not None
        var9 = module0.BaseJSONConfigManager()
        assert var9 is not None
        var10 = var9.ensure_config_dir_exists()
        assert var10 is None
        var11 = ''
        var12 = module0.BaseJSONConfigManager()
        assert var12 is not None
        var13 = var12.get(var11)
        assert var13 is not None
        var14 = var12.ensure_config_dir_exists()
        assert var14 is None
        var15 = var12.ensure_config_dir_exists()
        assert var15 is None
        var16 = var12.ensure_config_dir_exists()
        assert var16 is None
        var17 = '\tYV'
        var18 = {var17: var17}
        var19 = module0.BaseJSONConfigManager(**var18)
        assert var19 is not None
        var20 = var19.ensure_config_dir_exists()
        assert var20 is None
        var21 = 4009.14332
        var22 = True
        var23 = var9.update(var21, var22)
    except BaseException:
        pass


def test_case_233():
    try:
        var0 = ''
        var1 = module0.BaseJSONConfigManager()
        assert var1 is not None
        var2 = var1.get(var0)
        assert var2 is not None
        var3 = var1.ensure_config_dir_exists()
        assert var3 is None
        var4 = 'K&H94v*%\r'
        var5 = {var4: var4, var4: var4, var4: var4}
        var6 = module0.BaseJSONConfigManager(**var5)
        assert var6 is not None
        var7 = var6.ensure_config_dir_exists()
        assert var7 is None
        var8 = {}
        var9 = []
        var10 = module0.remove_defaults(var8, var9)
        assert var10 is None
        var11 = '\tYV'
        var12 = {var11: var11}
        var13 = module0.BaseJSONConfigManager(**var12)
        assert var13 is not None
        var14 = var13.ensure_config_dir_exists()
        assert var14 is None
        var15 = {}
        var16 = module0.BaseJSONConfigManager(**var15)
        assert var16 is not None
        var17 = var16.ensure_config_dir_exists()
        assert var17 is None
        var18 = var16.ensure_config_dir_exists()
        assert var18 is None
        var19 = ''
        var20 = module0.BaseJSONConfigManager()
        assert var20 is not None
        var21 = var20.get(var19)
        assert var21 is not None
        var22 = module0.BaseJSONConfigManager()
        assert var22 is not None
        var23 = var22.ensure_config_dir_exists()
        assert var23 is None
        var24 = {}
        var25 = module0.BaseJSONConfigManager(**var24)
        assert var25 is not None
        var26 = var25.ensure_config_dir_exists()
        assert var26 is None
        var27 = var25.ensure_config_dir_exists()
        assert var27 is None
        var28 = var25.ensure_config_dir_exists()
        assert var28 is None
        var29 = module0.BaseJSONConfigManager()
        assert var29 is not None
        var30 = 'K&H94v*%\r'
        var31 = {var30: var30, var30: var30, var30: var30}
        var32 = module0.BaseJSONConfigManager(**var31)
        assert var32 is not None
        var33 = var32.ensure_config_dir_exists()
        assert var33 is None
        var34 = var32.ensure_config_dir_exists()
        assert var34 is None
        var35 = {var9, var1, var5}
    except BaseException:
        pass


def test_case_234():
    try:
        var0 = {}
        var1 = module0.BaseJSONConfigManager(**var0)
        assert var1 is not None
        var2 = var1.ensure_config_dir_exists()
        assert var2 is None
        var3 = var1.ensure_config_dir_exists()
        assert var3 is None
        var4 = var1.ensure_config_dir_exists()
        assert var4 is None
        var5 = ''
        var6 = module0.BaseJSONConfigManager()
        assert var6 is not None
        var7 = var6.get(var5)
        assert var7 is not None
        var8 = module0.BaseJSONConfigManager()
        assert var8 is not None
        var9 = var8.ensure_config_dir_exists()
        assert var9 is None
        var10 = ''
        var11 = module0.BaseJSONConfigManager()
        assert var11 is not None
        var12 = var11.get(var10)
        assert var12 is not None
        var13 = module0.BaseJSONConfigManager()
        assert var13 is not None
        var14 = {}
        var15 = module0.BaseJSONConfigManager(**var14)
        assert var15 is not None
        var16 = var15.ensure_config_dir_exists()
        assert var16 is None
        var17 = "@^8 YSBOCxv2_Uy'\t"
        var18 = var15.file_name(var17)
        assert var18 == "./@^8 YSBOCxv2_Uy'\t.json"
        var19 = {var14, var4, var1, var2}
    except BaseException:
        pass


def test_case_235():
    try:
        var0 = module0.BaseJSONConfigManager()
        assert var0 is not None
        var1 = 'K&H94v*%\r'
        var2 = {var1: var1, var1: var1, var1: var1}
        var3 = module0.BaseJSONConfigManager(**var2)
        assert var3 is not None
        var4 = var3.ensure_config_dir_exists()
        assert var4 is None
        var5 = var3.ensure_config_dir_exists()
        assert var5 is None
        var6 = ''
        var7 = module0.BaseJSONConfigManager()
        assert var7 is not None
        var8 = var7.get(var6)
        assert var8 is not None
        var9 = module0.BaseJSONConfigManager()
        assert var9 is not None
        var10 = var9.ensure_config_dir_exists()
        assert var10 is None
        var11 = ''
        var12 = module0.BaseJSONConfigManager()
        assert var12 is not None
        var13 = var12.get(var11)
        assert var13 is not None
        var14 = module0.BaseJSONConfigManager()
        assert var14 is not None
        var15 = ''
        var16 = module0.BaseJSONConfigManager()
        assert var16 is not None
        var17 = var16.get(var15)
        assert var17 is not None
        var18 = var16.ensure_config_dir_exists()
        assert var18 is None
        var19 = var16.ensure_config_dir_exists()
        assert var19 is None
        var20 = ''
        var21 = module0.BaseJSONConfigManager()
        assert var21 is not None
        var22 = var21.get(var20)
        assert var22 is not None
        var23 = module0.BaseJSONConfigManager()
        assert var23 is not None
        var24 = {}
        var25 = module0.BaseJSONConfigManager(**var24)
        assert var25 is not None
        var26 = var25.ensure_config_dir_exists()
        assert var26 is None
        var27 = var25.ensure_config_dir_exists()
        assert var27 is None
        var28 = var25.ensure_config_dir_exists()
        assert var28 is None
        var29 = ''
        var30 = module0.BaseJSONConfigManager()
        assert var30 is not None
        var31 = var30.get(var29)
        assert var31 is not None
        var32 = var25.ensure_config_dir_exists()
        assert var32 is None
        var33 = 'Qe'
        var34 = {var33: var33}
        var35 = module0.BaseJSONConfigManager(**var34)
        assert var35 is not None
        var36 = ''
        var37 = module0.BaseJSONConfigManager()
        assert var37 is not None
        var38 = var37.get(var36)
        assert var38 is not None
        var39 = var37.ensure_config_dir_exists()
        assert var39 is None
        var40 = var37.ensure_config_dir_exists()
        assert var40 is None
        var41 = var37.ensure_config_dir_exists()
        assert var41 is None
        var42 = ''
        var43 = module0.BaseJSONConfigManager()
        assert var43 is not None
        var44 = var43.get(var42)
        assert var44 is not None
        var45 = module0.BaseJSONConfigManager()
        assert var45 is not None
        var46 = module0.BaseJSONConfigManager()
        assert var46 is not None
        var47 = module0.BaseJSONConfigManager()
        assert var47 is not None
        var48 = module0.BaseJSONConfigManager()
        assert var48 is not None
        var49 = var48.ensure_config_dir_exists()
        assert var49 is None
        var50 = module0.BaseJSONConfigManager()
        assert var50 is not None
        var51 = -868
        var52 = var37.file_name(var51)
    except BaseException:
        pass


def test_case_236():
    try:
        var0 = ''
        var1 = module0.BaseJSONConfigManager()
        assert var1 is not None
        var2 = var1.get(var0)
        assert var2 is not None
        var3 = var1.ensure_config_dir_exists()
        assert var3 is None
        var4 = {}
        var5 = module0.BaseJSONConfigManager(**var4)
        assert var5 is not None
        var6 = var5.ensure_config_dir_exists()
        assert var6 is None
        var7 = var5.ensure_config_dir_exists()
        assert var7 is None
        var8 = var5.ensure_config_dir_exists()
        assert var8 is None
        var9 = 'Qe'
        var10 = {var9: var9}
        var11 = module0.BaseJSONConfigManager(**var10)
        assert var11 is not None
        var12 = 'K&H94v*%\r'
        var13 = {var12: var12, var12: var12, var12: var12}
        var14 = module0.BaseJSONConfigManager(**var13)
        assert var14 is not None
        var15 = var14.ensure_config_dir_exists()
        assert var15 is None
        var16 = module0.BaseJSONConfigManager()
        assert var16 is not None
        var17 = var16.ensure_config_dir_exists()
        assert var17 is None
        var18 = ''
        var19 = module0.BaseJSONConfigManager()
        assert var19 is not None
        var20 = var19.get(var18)
        assert var20 is not None
        var21 = var19.ensure_config_dir_exists()
        assert var21 is None
        var22 = var19.ensure_config_dir_exists()
        assert var22 is None
        var23 = b',\x921e\x03\x13\xe8\xf2\x1ev\xb7\x7f\t\xce'
        var24 = True
        var25 = var14.update(var23, var24)
    except BaseException:
        pass


def test_case_237():
    try:
        var0 = {}
        var1 = module0.BaseJSONConfigManager(**var0)
        assert var1 is not None
        var2 = var1.ensure_config_dir_exists()
        assert var2 is None
        var3 = "@^8 YSBOCxv2_Uy'\t"
        var4 = var1.file_name(var3)
        assert var4 == "./@^8 YSBOCxv2_Uy'\t.json"
        var5 = {}
        var6 = module0.BaseJSONConfigManager(**var5)
        assert var6 is not None
        var7 = var6.ensure_config_dir_exists()
        assert var7 is None
        var8 = ''
        var9 = module0.BaseJSONConfigManager()
        assert var9 is not None
        var10 = var9.get(var8)
        assert var10 is not None
        var11 = module0.BaseJSONConfigManager()
        assert var11 is not None
        var12 = var11.ensure_config_dir_exists()
        assert var12 is None
        var13 = module0.BaseJSONConfigManager()
        assert var13 is not None
        var14 = {}
        var15 = module0.BaseJSONConfigManager(**var14)
        assert var15 is not None
        var16 = var15.ensure_config_dir_exists()
        assert var16 is None
        var17 = var15.ensure_config_dir_exists()
        assert var17 is None
        var18 = ''
        var19 = module0.BaseJSONConfigManager()
        assert var19 is not None
        var20 = var19.get(var18)
        assert var20 is not None
        var21 = var19.ensure_config_dir_exists()
        assert var21 is None
        var22 = var19.ensure_config_dir_exists()
        assert var22 is None
        var23 = module0.BaseJSONConfigManager()
        assert var23 is not None
        var24 = 'K&H94v*%\r'
        var25 = {var24: var24, var24: var24, var24: var24}
        var26 = module0.BaseJSONConfigManager(**var25)
        assert var26 is not None
        var27 = var26.ensure_config_dir_exists()
        assert var27 is None
        var28 = 'K&H94v*%\r'
        var29 = {var28: var28, var28: var28, var28: var28}
        var30 = module0.BaseJSONConfigManager(**var29)
        assert var30 is not None
        var31 = var30.ensure_config_dir_exists()
        assert var31 is None
        var32 = {}
        var33 = []
        var34 = module0.remove_defaults(var32, var33)
        assert var34 is None
        var35 = ''
        var36 = module0.BaseJSONConfigManager()
        assert var36 is not None
        var37 = var36.get(var35)
        assert var37 is not None
        var38 = ''
        var39 = module0.BaseJSONConfigManager()
        assert var39 is not None
        var40 = var39.get(var38)
        assert var40 is not None
        var41 = module0.BaseJSONConfigManager()
        assert var41 is not None
        var42 = 'Qe'
        var43 = {var42: var42}
        var44 = module0.BaseJSONConfigManager(**var43)
        assert var44 is not None
        var45 = b'%\x1b\x8b\xc1z'
        var46 = var23.file_name(var45)
    except BaseException:
        pass


def test_case_238():
    try:
        var0 = ''
        var1 = module0.BaseJSONConfigManager()
        assert var1 is not None
        var2 = var1.get(var0)
        assert var2 is not None
        var3 = module0.BaseJSONConfigManager()
        assert var3 is not None
        var4 = var3.ensure_config_dir_exists()
        assert var4 is None
        var5 = ''
        var6 = module0.BaseJSONConfigManager()
        assert var6 is not None
        var7 = var6.get(var5)
        assert var7 is not None
        var8 = module0.BaseJSONConfigManager()
        assert var8 is not None
        var9 = -1097.008
        var10 = var1.file_name(var9)
    except BaseException:
        pass


def test_case_239():
    try:
        var0 = {}
        var1 = module0.BaseJSONConfigManager(**var0)
        assert var1 is not None
        var2 = var1.ensure_config_dir_exists()
        assert var2 is None
        var3 = var1.ensure_config_dir_exists()
        assert var3 is None
        var4 = ''
        var5 = module0.BaseJSONConfigManager()
        assert var5 is not None
        var6 = var5.get(var4)
        assert var6 is not None
        var7 = var5.ensure_config_dir_exists()
        assert var7 is None
        var8 = var5.ensure_config_dir_exists()
        assert var8 is None
        var9 = var5.ensure_config_dir_exists()
        assert var9 is None
        var10 = 'Qe'
        var11 = {var10: var10}
        var12 = module0.BaseJSONConfigManager(**var11)
        assert var12 is not None
        var13 = {}
        var14 = module0.BaseJSONConfigManager(**var13)
        assert var14 is not None
        var15 = var14.ensure_config_dir_exists()
        assert var15 is None
        var16 = module0.BaseJSONConfigManager()
        assert var16 is not None
        var17 = var16.ensure_config_dir_exists()
        assert var17 is None
        var18 = ''
        var19 = module0.BaseJSONConfigManager()
        assert var19 is not None
        var20 = var19.get(var18)
        assert var20 is not None
        var21 = module0.BaseJSONConfigManager()
        assert var21 is not None
        var22 = 'K&H94v*%\r'
        var23 = {var22: var22, var22: var22, var22: var22}
        var24 = module0.BaseJSONConfigManager(**var23)
        assert var24 is not None
        var25 = var24.ensure_config_dir_exists()
        assert var25 is None
        var26 = {var25, var25, var9, var0}
    except BaseException:
        pass


def test_case_240():
    try:
        var0 = module0.BaseJSONConfigManager()
        assert var0 is not None
        var1 = var0.ensure_config_dir_exists()
        assert var1 is None
        var2 = '\tYV'
        var3 = {var2: var2}
        var4 = module0.BaseJSONConfigManager(**var3)
        assert var4 is not None
        var5 = var4.ensure_config_dir_exists()
        assert var5 is None
        var6 = 'K&H94v*%\r'
        var7 = {var6: var6, var6: var6, var6: var6}
        var8 = module0.BaseJSONConfigManager(**var7)
        assert var8 is not None
        var9 = var8.ensure_config_dir_exists()
        assert var9 is None
        var10 = 'K&H94v*%\r'
        var11 = {var10: var10, var10: var10, var10: var10}
        var12 = module0.BaseJSONConfigManager(**var11)
        assert var12 is not None
        var13 = var12.ensure_config_dir_exists()
        assert var13 is None
        var14 = {}
        var15 = []
        var16 = module0.remove_defaults(var14, var15)
        assert var16 is None
        var17 = {}
        var18 = module0.BaseJSONConfigManager(**var17)
        assert var18 is not None
        var19 = var18.ensure_config_dir_exists()
        assert var19 is None
        var20 = module0.BaseJSONConfigManager()
        assert var20 is not None
        var21 = 'K&H94v*%\r'
        var22 = {var21: var21, var21: var21, var21: var21}
        var23 = module0.BaseJSONConfigManager(**var22)
        assert var23 is not None
        var24 = var23.ensure_config_dir_exists()
        assert var24 is None
        var25 = var23.ensure_config_dir_exists()
        assert var25 is None
        var26 = {}
        var27 = module0.BaseJSONConfigManager(**var26)
        assert var27 is not None
        var28 = var27.ensure_config_dir_exists()
        assert var28 is None
        var29 = var27.ensure_config_dir_exists()
        assert var29 is None
        var30 = var27.ensure_config_dir_exists()
        assert var30 is None
        var31 = 4
        var32 = var23.directory(var31)
    except BaseException:
        pass


def test_case_241():
    try:
        var0 = {}
        var1 = module0.BaseJSONConfigManager(**var0)
        assert var1 is not None
        var2 = var1.ensure_config_dir_exists()
        assert var2 is None
        var3 = var1.ensure_config_dir_exists()
        assert var3 is None
        var4 = module0.BaseJSONConfigManager()
        assert var4 is not None
        var5 = ''
        var6 = module0.BaseJSONConfigManager()
        assert var6 is not None
        var7 = var6.get(var5)
        assert var7 is not None
        var8 = var6.ensure_config_dir_exists()
        assert var8 is None
        var9 = ''
        var10 = module0.BaseJSONConfigManager()
        assert var10 is not None
        var11 = var10.get(var9)
        assert var11 is not None
        var12 = {var11, var7, var0}
    except BaseException:
        pass


def test_case_242():
    try:
        var0 = module0.BaseJSONConfigManager()
        assert var0 is not None
        var1 = var0.ensure_config_dir_exists()
        assert var1 is None
        var2 = 'K&H94v*%\r'
        var3 = {var2: var2, var2: var2, var2: var2}
        var4 = module0.BaseJSONConfigManager(**var3)
        assert var4 is not None
        var5 = var4.ensure_config_dir_exists()
        assert var5 is None
        var6 = {}
        var7 = []
        var8 = module0.remove_defaults(var6, var7)
        assert var8 is None
        var9 = module0.BaseJSONConfigManager(**var3)
        assert var9 is not None
        var10 = var9.get(var6, var4)
    except BaseException:
        pass


def test_case_243():
    try:
        var0 = {}
        var1 = module0.BaseJSONConfigManager(**var0)
        assert var1 is not None
        var2 = var1.ensure_config_dir_exists()
        assert var2 is None
        var3 = "@^8 YSBOCxv2_Uy'\t"
        var4 = var1.file_name(var3)
        assert var4 == "./@^8 YSBOCxv2_Uy'\t.json"
        var5 = ''
        var6 = module0.BaseJSONConfigManager()
        assert var6 is not None
        var7 = var6.get(var5)
        assert var7 is not None
        var8 = var6.ensure_config_dir_exists()
        assert var8 is None
        var9 = var6.ensure_config_dir_exists()
        assert var9 is None
        var10 = module0.BaseJSONConfigManager()
        assert var10 is not None
        var11 = 'Qe'
        var12 = {var11: var11}
        var13 = module0.BaseJSONConfigManager(**var12)
        assert var13 is not None
        var14 = '\tYV'
        var15 = {var14: var14}
        var16 = module0.BaseJSONConfigManager(**var15)
        assert var16 is not None
        var17 = var16.ensure_config_dir_exists()
        assert var17 is None
        var18 = False
        var19 = None
        var20 = var13.update(var18, var19)
    except BaseException:
        pass


def test_case_244():
    try:
        var0 = {}
        var1 = module0.BaseJSONConfigManager(**var0)
        assert var1 is not None
        var2 = var1.ensure_config_dir_exists()
        assert var2 is None
        var3 = module0.BaseJSONConfigManager()
        assert var3 is not None
        var4 = 'K&H94v*%\r'
        var5 = {var4: var4, var4: var4, var4: var4}
        var6 = module0.BaseJSONConfigManager(**var5)
        assert var6 is not None
        var7 = var6.ensure_config_dir_exists()
        assert var7 is None
        var8 = var6.ensure_config_dir_exists()
        assert var8 is None
        var9 = ''
        var10 = module0.BaseJSONConfigManager()
        assert var10 is not None
        var11 = var10.get(var9)
        assert var11 is not None
        var12 = var10.ensure_config_dir_exists()
        assert var12 is None
        var13 = var10.ensure_config_dir_exists()
        assert var13 is None
        var14 = False
        var15 = True
        var16 = 3040.9656
        var17 = {var13: var2, var2: var13, var15: var16}
        var18 = b"3\x99>\xa9\x91i<f\x80\xb7'G\x87\x12\xc6"
        var19 = var14, var17, var9, var18
        var20 = module0.recursive_update(var19, var18)
    except BaseException:
        pass


def test_case_245():
    try:
        var0 = 542.61998
        var1 = '\x0b$Z8R%Cb2)h'
        var2 = module0.remove_defaults(var0, var1)
    except BaseException:
        pass


def test_case_246():
    try:
        var0 = 'Qe'
        var1 = {var0: var0}
        var2 = module0.BaseJSONConfigManager(**var1)
        assert var2 is not None
        var3 = ''
        var4 = module0.BaseJSONConfigManager()
        assert var4 is not None
        var5 = var4.get(var3)
        assert var5 is not None
        var6 = module0.BaseJSONConfigManager()
        assert var6 is not None
        var7 = var6.ensure_config_dir_exists()
        assert var7 is None
        var8 = {}
        var9 = module0.BaseJSONConfigManager(**var8)
        assert var9 is not None
        var10 = var9.ensure_config_dir_exists()
        assert var10 is None
        var11 = ''
        var12 = module0.BaseJSONConfigManager()
        assert var12 is not None
        var13 = var12.get(var11)
        assert var13 is not None
        var14 = module0.BaseJSONConfigManager()
        assert var14 is not None
        var15 = var14.ensure_config_dir_exists()
        assert var15 is None
        var16 = module0.BaseJSONConfigManager()
        assert var16 is not None
        var17 = 'K&H94v*%\r'
        var18 = {var17: var17, var17: var17, var17: var17}
        var19 = module0.BaseJSONConfigManager(**var18)
        assert var19 is not None
        var20 = var19.ensure_config_dir_exists()
        assert var20 is None
        var21 = {}
        var22 = []
        var23 = module0.remove_defaults(var21, var22)
        assert var23 is None
        var24 = ''
        var25 = module0.BaseJSONConfigManager()
        assert var25 is not None
        var26 = var25.get(var24)
        assert var26 is not None
        var27 = module0.BaseJSONConfigManager()
        assert var27 is not None
        var28 = ''
        var29 = module0.BaseJSONConfigManager()
        assert var29 is not None
        var30 = var29.get(var28)
        assert var30 is not None
        var31 = module0.BaseJSONConfigManager()
        assert var31 is not None
        var32 = var31.file_name(var28)
        assert var32 == './.json'
        var33 = ''
        var34 = module0.BaseJSONConfigManager()
        assert var34 is not None
        var35 = var34.get(var33)
        assert var35 is not None
        var36 = module0.BaseJSONConfigManager()
        assert var36 is not None
        var37 = {}
        var38 = module0.BaseJSONConfigManager(**var37)
        assert var38 is not None
        var39 = var38.ensure_config_dir_exists()
        assert var39 is None
        var40 = var38.ensure_config_dir_exists()
        assert var40 is None
        var41 = var38.ensure_config_dir_exists()
        assert var41 is None
        var42 = module0.BaseJSONConfigManager()
        assert var42 is not None
        var43 = module0.BaseJSONConfigManager()
        assert var43 is not None
        var44 = var43.ensure_config_dir_exists()
        assert var44 is None
        var45 = 'Rwe@'
        var46 = False
        var47 = module0.recursive_update(var45, var46)
    except BaseException:
        pass


def test_case_247():
    try:
        var0 = None
        var1 = module0.BaseJSONConfigManager()
        assert var1 is not None
        var2 = var1.directory(var0)
    except BaseException:
        pass


def test_case_248():
    try:
        var0 = 'Qe'
        var1 = {var0: var0}
        var2 = module0.BaseJSONConfigManager(**var1)
        assert var2 is not None
        var3 = ''
        var4 = module0.BaseJSONConfigManager()
        assert var4 is not None
        var5 = var4.get(var3)
        assert var5 is not None
        var6 = module0.BaseJSONConfigManager()
        assert var6 is not None
        var7 = var6.ensure_config_dir_exists()
        assert var7 is None
        var8 = ''
        var9 = module0.BaseJSONConfigManager()
        assert var9 is not None
        var10 = var9.get(var8)
        assert var10 is not None
        var11 = module0.BaseJSONConfigManager()
        assert var11 is not None
        var12 = module0.BaseJSONConfigManager()
        assert var12 is not None
        var13 = var12.ensure_config_dir_exists()
        assert var13 is None
        var14 = ''
        var15 = module0.BaseJSONConfigManager()
        assert var15 is not None
        var16 = var15.get(var14)
        assert var16 is not None
        var17 = module0.BaseJSONConfigManager()
        assert var17 is not None
        var18 = module0.BaseJSONConfigManager()
        assert var18 is not None
        var19 = module0.BaseJSONConfigManager()
        assert var19 is not None
        var20 = {}
        var21 = module0.BaseJSONConfigManager(**var20)
        assert var21 is not None
        var22 = var21.ensure_config_dir_exists()
        assert var22 is None
        var23 = var21.ensure_config_dir_exists()
        assert var23 is None
        var24 = var21.ensure_config_dir_exists()
        assert var24 is None
        var25 = ''
        var26 = module0.BaseJSONConfigManager()
        assert var26 is not None
        var27 = var26.get(var25)
        assert var27 is not None
        var28 = var21.ensure_config_dir_exists()
        assert var28 is None
        var29 = module0.BaseJSONConfigManager()
        assert var29 is not None
        var30 = 'K&H94v*%\r'
        var31 = {var30: var30, var30: var30, var30: var30}
        var32 = module0.BaseJSONConfigManager(**var31)
        assert var32 is not None
        var33 = var32.ensure_config_dir_exists()
        assert var33 is None
        var34 = var32.ensure_config_dir_exists()
        assert var34 is None
        var35 = ''
        var36 = module0.BaseJSONConfigManager()
        assert var36 is not None
        var37 = var36.get(var35)
        assert var37 is not None
        var38 = var36.ensure_config_dir_exists()
        assert var38 is None
        var39 = var36.ensure_config_dir_exists()
        assert var39 is None
        var40 = var36.ensure_config_dir_exists()
        assert var40 is None
        var41 = ''
        var42 = module0.BaseJSONConfigManager()
        assert var42 is not None
        var43 = var42.get(var41)
        assert var43 is not None
        var44 = var42.ensure_config_dir_exists()
        assert var44 is None
        var45 = '\tYV'
        var46 = {var45: var45}
        var47 = module0.BaseJSONConfigManager(**var46)
        assert var47 is not None
        var48 = var47.ensure_config_dir_exists()
        assert var48 is None
        var49 = {}
        var50 = module0.BaseJSONConfigManager(**var49)
        assert var50 is not None
        var51 = var50.ensure_config_dir_exists()
        assert var51 is None
        var52 = None
        var53 = 'tJq:/l?P['
        var54 = module0.BaseJSONConfigManager()
        assert var54 is not None
        var55 = var54.update(var52, var53)
    except BaseException:
        pass


def test_case_249():
    try:
        var0 = ''
        var1 = module0.BaseJSONConfigManager()
        assert var1 is not None
        var2 = var1.get(var0)
        assert var2 is not None
        var3 = module0.BaseJSONConfigManager()
        assert var3 is not None
        var4 = var3.ensure_config_dir_exists()
        assert var4 is None
        var5 = {}
        var6 = module0.BaseJSONConfigManager(**var5)
        assert var6 is not None
        var7 = var6.ensure_config_dir_exists()
        assert var7 is None
        var8 = var6.ensure_config_dir_exists()
        assert var8 is None
        var9 = 'K&H94v*%\r'
        var10 = {var9: var9, var9: var9, var9: var9}
        var11 = module0.BaseJSONConfigManager(**var10)
        assert var11 is not None
        var12 = var11.ensure_config_dir_exists()
        assert var12 is None
        var13 = {}
        var14 = []
        var15 = module0.remove_defaults(var13, var14)
        assert var15 is None
        var16 = module0.BaseJSONConfigManager()
        assert var16 is not None
        var17 = 'K&H94v*%\r'
        var18 = {var17: var17, var17: var17, var17: var17}
        var19 = module0.BaseJSONConfigManager(**var18)
        assert var19 is not None
        var20 = var19.ensure_config_dir_exists()
        assert var20 is None
        var21 = var19.ensure_config_dir_exists()
        assert var21 is None
        var22 = ''
        var23 = module0.BaseJSONConfigManager()
        assert var23 is not None
        var24 = var23.get(var22)
        assert var24 is not None
        var25 = module0.BaseJSONConfigManager()
        assert var25 is not None
        var26 = module0.BaseJSONConfigManager()
        assert var26 is not None
        var27 = module0.BaseJSONConfigManager()
        assert var27 is not None
        var28 = {}
        var29 = module0.BaseJSONConfigManager(**var28)
        assert var29 is not None
        var30 = var29.ensure_config_dir_exists()
        assert var30 is None
        var31 = "@^8 YSBOCxv2_Uy'\t"
        var32 = var29.file_name(var31)
        assert var32 == "./@^8 YSBOCxv2_Uy'\t.json"
        var33 = False
        var34 = var29.directory(var33)
    except BaseException:
        pass


def test_case_250():
    try:
        var0 = ''
        var1 = module0.BaseJSONConfigManager()
        assert var1 is not None
        var2 = var1.get(var0)
        assert var2 is not None
        var3 = var1.ensure_config_dir_exists()
        assert var3 is None
        var4 = var1.ensure_config_dir_exists()
        assert var4 is None
        var5 = var1.ensure_config_dir_exists()
        assert var5 is None
        var6 = ''
        var7 = module0.BaseJSONConfigManager()
        assert var7 is not None
        var8 = var7.get(var6)
        assert var8 is not None
        var9 = var7.ensure_config_dir_exists()
        assert var9 is None
        var10 = {}
        var11 = module0.BaseJSONConfigManager(**var10)
        assert var11 is not None
        var12 = var11.ensure_config_dir_exists()
        assert var12 is None
        var13 = ''
        var14 = module0.BaseJSONConfigManager()
        assert var14 is not None
        var15 = var14.get(var13)
        assert var15 is not None
        var16 = module0.BaseJSONConfigManager()
        assert var16 is not None
        var17 = 'Qe'
        var18 = {var17: var17}
        var19 = module0.BaseJSONConfigManager(**var18)
        assert var19 is not None
        var20 = {}
        var21 = module0.BaseJSONConfigManager(**var20)
        assert var21 is not None
        var22 = var21.ensure_config_dir_exists()
        assert var22 is None
        var23 = "@^8 YSBOCxv2_Uy'\t"
        var24 = var21.file_name(var23)
        assert var24 == "./@^8 YSBOCxv2_Uy'\t.json"
        var25 = module0.BaseJSONConfigManager()
        assert var25 is not None
        var26 = True
        var27 = var11.update(var25, var26)
    except BaseException:
        pass


def test_case_251():
    try:
        var0 = {}
        var1 = module0.BaseJSONConfigManager(**var0)
        assert var1 is not None
        var2 = var1.ensure_config_dir_exists()
        assert var2 is None
        var3 = var1.ensure_config_dir_exists()
        assert var3 is None
        var4 = ''
        var5 = module0.BaseJSONConfigManager()
        assert var5 is not None
        var6 = var5.get(var4)
        assert var6 is not None
        var7 = var5.ensure_config_dir_exists()
        assert var7 is None
        var8 = var5.ensure_config_dir_exists()
        assert var8 is None
        var9 = module0.BaseJSONConfigManager()
        assert var9 is not None
        var10 = ''
        var11 = module0.BaseJSONConfigManager()
        assert var11 is not None
        var12 = var11.get(var10)
        assert var12 is not None
        var13 = var11.ensure_config_dir_exists()
        assert var13 is None
        var14 = var11.ensure_config_dir_exists()
        assert var14 is None
        var15 = {}
        var16 = module0.BaseJSONConfigManager(**var15)
        assert var16 is not None
        var17 = var16.ensure_config_dir_exists()
        assert var17 is None
        var18 = ''
        var19 = module0.BaseJSONConfigManager()
        assert var19 is not None
        var20 = var19.get(var18)
        assert var20 is not None
        var21 = var19.ensure_config_dir_exists()
        assert var21 is None
        var22 = var19.ensure_config_dir_exists()
        assert var22 is None
        var23 = var19.ensure_config_dir_exists()
        assert var23 is None
        var24 = 'Qe'
        var25 = {var24: var24}
        var26 = module0.BaseJSONConfigManager(**var25)
        assert var26 is not None
        var27 = {}
        var28 = module0.BaseJSONConfigManager(**var27)
        assert var28 is not None
        var29 = var28.ensure_config_dir_exists()
        assert var29 is None
        var30 = var28.ensure_config_dir_exists()
        assert var30 is None
        var31 = var28.ensure_config_dir_exists()
        assert var31 is None
        var32 = {}
        var33 = module0.BaseJSONConfigManager(**var32)
        assert var33 is not None
        var34 = var33.ensure_config_dir_exists()
        assert var34 is None
        var35 = "@^8 YSBOCxv2_Uy'\t"
        var36 = var33.file_name(var35)
        assert var36 == "./@^8 YSBOCxv2_Uy'\t.json"
        var37 = module0.BaseJSONConfigManager()
        assert var37 is not None
        var38 = var37.ensure_config_dir_exists()
        assert var38 is None
        var39 = module0.BaseJSONConfigManager()
        assert var39 is not None
        var40 = 0.8
        var41 = -1358
        var42 = None
        var43 = {var19: var30, var42: var19, var23: var22}
        var44 = var40, var41, var24, var43
        var45 = None
        var46 = module0.remove_defaults(var44, var45)
    except BaseException:
        pass


def test_case_252():
    try:
        var0 = 'K&H94v*%\r'
        var1 = {var0: var0, var0: var0, var0: var0}
        var2 = module0.BaseJSONConfigManager(**var1)
        assert var2 is not None
        var3 = var2.ensure_config_dir_exists()
        assert var3 is None
        var4 = {}
        var5 = []
        var6 = module0.remove_defaults(var4, var5)
        assert var6 is None
        var7 = 'Qe'
        var8 = {var7: var7}
        var9 = module0.BaseJSONConfigManager(**var8)
        assert var9 is not None
        var10 = module0.BaseJSONConfigManager()
        assert var10 is not None
        var11 = ''
        var12 = module0.BaseJSONConfigManager()
        assert var12 is not None
        var13 = var12.get(var11)
        assert var13 is not None
        var14 = ''
        var15 = module0.BaseJSONConfigManager()
        assert var15 is not None
        var16 = var15.get(var14)
        assert var16 is not None
        var17 = module0.BaseJSONConfigManager()
        assert var17 is not None
        var18 = module0.BaseJSONConfigManager()
        assert var18 is not None
        var19 = module0.BaseJSONConfigManager()
        assert var19 is not None
        var20 = '\tYV'
        var21 = {var20: var20}
        var22 = module0.BaseJSONConfigManager(**var21)
        assert var22 is not None
        var23 = var22.ensure_config_dir_exists()
        assert var23 is None
        var24 = 1357
        var25 = False
        var26 = var22.get(var24, var25)
    except BaseException:
        pass


def test_case_253():
    try:
        var0 = '\tYV'
        var1 = {var0: var0}
        var2 = module0.BaseJSONConfigManager(**var1)
        assert var2 is not None
        var3 = var2.ensure_config_dir_exists()
        assert var3 is None
        var4 = '{]'
        var5 = module0.recursive_update(var4, var2)
    except BaseException:
        pass


def test_case_254():
    try:
        var0 = ''
        var1 = module0.BaseJSONConfigManager()
        assert var1 is not None
        var2 = var1.get(var0)
        assert var2 is not None
        var3 = '\tYV'
        var4 = {var3: var3}
        var5 = module0.BaseJSONConfigManager(**var4)
        assert var5 is not None
        var6 = var5.ensure_config_dir_exists()
        assert var6 is None
        var7 = ''
        var8 = module0.BaseJSONConfigManager()
        assert var8 is not None
        var9 = var8.get(var7)
        assert var9 is not None
        var10 = var8.ensure_config_dir_exists()
        assert var10 is None
        var11 = var8.ensure_config_dir_exists()
        assert var11 is None
        var12 = var8.ensure_config_dir_exists()
        assert var12 is None
        var13 = ''
        var14 = module0.BaseJSONConfigManager()
        assert var14 is not None
        var15 = var14.get(var13)
        assert var15 is not None
        var16 = var14.ensure_config_dir_exists()
        assert var16 is None
        var17 = var14.ensure_config_dir_exists()
        assert var17 is None
        var18 = module0.BaseJSONConfigManager()
        assert var18 is not None
        var19 = 'K&H94v*%\r'
        var20 = {var19: var19, var19: var19, var19: var19}
        var21 = module0.BaseJSONConfigManager(**var20)
        assert var21 is not None
        var22 = var21.ensure_config_dir_exists()
        assert var22 is None
        var23 = var21.ensure_config_dir_exists()
        assert var23 is None
        var24 = 17
        var25 = var5.set(var24, var13)
    except BaseException:
        pass


def test_case_255():
    try:
        var0 = 'Qe'
        var1 = {var0: var0}
        var2 = module0.BaseJSONConfigManager(**var1)
        assert var2 is not None
        var3 = 'K&H94v*%\r'
        var4 = {var3: var3, var3: var3, var3: var3}
        var5 = module0.BaseJSONConfigManager(**var4)
        assert var5 is not None
        var6 = var5.ensure_config_dir_exists()
        assert var6 is None
        var7 = {}
        var8 = module0.BaseJSONConfigManager(**var7)
        assert var8 is not None
        var9 = var8.ensure_config_dir_exists()
        assert var9 is None
        var10 = ''
        var11 = module0.BaseJSONConfigManager()
        assert var11 is not None
        var12 = var11.get(var10)
        assert var12 is not None
        var13 = module0.BaseJSONConfigManager()
        assert var13 is not None
        var14 = var13.ensure_config_dir_exists()
        assert var14 is None
        var15 = module0.BaseJSONConfigManager()
        assert var15 is not None
        var16 = {}
        var17 = module0.BaseJSONConfigManager(**var16)
        assert var17 is not None
        var18 = var17.ensure_config_dir_exists()
        assert var18 is None
        var19 = -1160.06
        var20 = var17.file_name(var19)
    except BaseException:
        pass


def test_case_256():
    try:
        var0 = ''
        var1 = module0.BaseJSONConfigManager()
        assert var1 is not None
        var2 = var1.get(var0)
        assert var2 is not None
        var3 = module0.BaseJSONConfigManager()
        assert var3 is not None
        var4 = ''
        var5 = module0.BaseJSONConfigManager()
        assert var5 is not None
        var6 = var5.get(var4)
        assert var6 is not None
        var7 = module0.BaseJSONConfigManager()
        assert var7 is not None
        var8 = var7.file_name(var4)
        assert var8 == './.json'
        var9 = ''
        var10 = module0.BaseJSONConfigManager()
        assert var10 is not None
        var11 = var10.get(var9)
        assert var11 is not None
        var12 = module0.BaseJSONConfigManager()
        assert var12 is not None
        var13 = var12.ensure_config_dir_exists()
        assert var13 is None
        var14 = ''
        var15 = module0.BaseJSONConfigManager()
        assert var15 is not None
        var16 = var15.get(var14)
        assert var16 is not None
        var17 = module0.BaseJSONConfigManager()
        assert var17 is not None
        var18 = var17.ensure_config_dir_exists()
        assert var18 is None
        var19 = ''
        var20 = module0.BaseJSONConfigManager()
        assert var20 is not None
        var21 = var20.get(var19)
        assert var21 is not None
        var22 = module0.BaseJSONConfigManager()
        assert var22 is not None
        var23 = '>RC'
        var24 = {var23, var10}
        var25 = {var6: var9, var15: var3, var21: var18, var21: var1}
    except BaseException:
        pass


def test_case_257():
    try:
        var0 = True
        var1 = '/H_oH-0!'
        var2 = module0.recursive_update(var0, var1)
    except BaseException:
        pass


def test_case_258():
    try:
        var0 = 'Qe'
        var1 = {var0: var0}
        var2 = module0.BaseJSONConfigManager(**var1)
        assert var2 is not None
        var3 = 'K&H94v*%\r'
        var4 = {var3: var3, var3: var3, var3: var3}
        var5 = module0.BaseJSONConfigManager(**var4)
        assert var5 is not None
        var6 = var5.ensure_config_dir_exists()
        assert var6 is None
        var7 = ''
        var8 = module0.BaseJSONConfigManager()
        assert var8 is not None
        var9 = var8.get(var7)
        assert var9 is not None
        var10 = ''
        var11 = module0.BaseJSONConfigManager()
        assert var11 is not None
        var12 = var11.get(var10)
        assert var12 is not None
        var13 = var11.ensure_config_dir_exists()
        assert var13 is None
        var14 = var11.ensure_config_dir_exists()
        assert var14 is None
        var15 = ''
        var16 = module0.BaseJSONConfigManager()
        assert var16 is not None
        var17 = var16.get(var15)
        assert var17 is not None
        var18 = var16.ensure_config_dir_exists()
        assert var18 is None
        var19 = {}
        var20 = module0.BaseJSONConfigManager(**var19)
        assert var20 is not None
        var21 = var20.ensure_config_dir_exists()
        assert var21 is None
        var22 = ''
        var23 = module0.BaseJSONConfigManager()
        assert var23 is not None
        var24 = var23.get(var22)
        assert var24 is not None
        var25 = module0.BaseJSONConfigManager()
        assert var25 is not None
        var26 = var25.ensure_config_dir_exists()
        assert var26 is None
        var27 = module0.BaseJSONConfigManager()
        assert var27 is not None
        var28 = True
        var29 = var8.get(var28)
    except BaseException:
        pass


def test_case_259():
    try:
        var0 = {}
        var1 = module0.BaseJSONConfigManager(**var0)
        assert var1 is not None
        var2 = var1.ensure_config_dir_exists()
        assert var2 is None
        var3 = var1.ensure_config_dir_exists()
        assert var3 is None
        var4 = var1.ensure_config_dir_exists()
        assert var4 is None
        var5 = ''
        var6 = module0.BaseJSONConfigManager()
        assert var6 is not None
        var7 = var6.get(var5)
        assert var7 is not None
        var8 = var6.ensure_config_dir_exists()
        assert var8 is None
        var9 = 'K&H94v*%\r'
        var10 = {var9: var9, var9: var9, var9: var9}
        var11 = module0.BaseJSONConfigManager(**var10)
        assert var11 is not None
        var12 = var11.ensure_config_dir_exists()
        assert var12 is None
        var13 = {}
        var14 = []
        var15 = module0.remove_defaults(var13, var14)
        assert var15 is None
        var16 = ''
        var17 = module0.BaseJSONConfigManager()
        assert var17 is not None
        var18 = var17.get(var16)
        assert var18 is not None
        var19 = {}
        var20 = module0.BaseJSONConfigManager(**var19)
        assert var20 is not None
        var21 = var20.ensure_config_dir_exists()
        assert var21 is None
        var22 = ''
        var23 = module0.BaseJSONConfigManager()
        assert var23 is not None
        var24 = var23.get(var22)
        assert var24 is not None
        var25 = module0.BaseJSONConfigManager()
        assert var25 is not None
        var26 = var25.ensure_config_dir_exists()
        assert var26 is None
        var27 = module0.BaseJSONConfigManager()
        assert var27 is not None
        var28 = {}
        var29 = module0.BaseJSONConfigManager(**var28)
        assert var29 is not None
        var30 = var29.ensure_config_dir_exists()
        assert var30 is None
        var31 = var29.ensure_config_dir_exists()
        assert var31 is None
        var32 = ''
        var33 = module0.BaseJSONConfigManager()
        assert var33 is not None
        var34 = var33.get(var32)
        assert var34 is not None
        var35 = module0.BaseJSONConfigManager()
        assert var35 is not None
        var36 = module0.BaseJSONConfigManager()
        assert var36 is not None
        var37 = var36.ensure_config_dir_exists()
        assert var37 is None
        var38 = module0.recursive_update(var32, var14)
    except BaseException:
        pass


def test_case_260():
    try:
        var0 = ''
        var1 = module0.BaseJSONConfigManager()
        assert var1 is not None
        var2 = var1.get(var0)
        assert var2 is not None
        var3 = {}
        var4 = module0.BaseJSONConfigManager(**var3)
        assert var4 is not None
        var5 = var4.ensure_config_dir_exists()
        assert var5 is None
        var6 = var4.ensure_config_dir_exists()
        assert var6 is None
        var7 = var4.ensure_config_dir_exists()
        assert var7 is None
        var8 = ''
        var9 = module0.BaseJSONConfigManager()
        assert var9 is not None
        var10 = var9.get(var8)
        assert var10 is not None
        var11 = var4.ensure_config_dir_exists()
        assert var11 is None
        var12 = {}
        var13 = module0.BaseJSONConfigManager(**var12)
        assert var13 is not None
        var14 = var13.ensure_config_dir_exists()
        assert var14 is None
        var15 = var13.ensure_config_dir_exists()
        assert var15 is None
        var16 = {}
        var17 = module0.BaseJSONConfigManager(**var16)
        assert var17 is not None
        var18 = var17.ensure_config_dir_exists()
        assert var18 is None
        var19 = ''
        var20 = module0.BaseJSONConfigManager()
        assert var20 is not None
        var21 = var20.get(var19)
        assert var21 is not None
        var22 = module0.BaseJSONConfigManager()
        assert var22 is not None
        var23 = {}
        var24 = module0.BaseJSONConfigManager(**var23)
        assert var24 is not None
        var25 = var24.ensure_config_dir_exists()
        assert var25 is None
        var26 = var24.ensure_config_dir_exists()
        assert var26 is None
        var27 = var24.ensure_config_dir_exists()
        assert var27 is None
        var28 = ''
        var29 = module0.BaseJSONConfigManager()
        assert var29 is not None
        var30 = var29.get(var28)
        assert var30 is not None
        var31 = var29.ensure_config_dir_exists()
        assert var31 is None
        var32 = var29.ensure_config_dir_exists()
        assert var32 is None
        var33 = module0.BaseJSONConfigManager()
        assert var33 is not None
        var34 = ''
        var35 = module0.BaseJSONConfigManager()
        assert var35 is not None
        var36 = var35.get(var34)
        assert var36 is not None
        var37 = module0.BaseJSONConfigManager()
        assert var37 is not None
        var38 = ''
        var39 = module0.BaseJSONConfigManager()
        assert var39 is not None
        var40 = var39.get(var38)
        assert var40 is not None
        var41 = module0.BaseJSONConfigManager()
        assert var41 is not None
        var42 = var41.file_name(var38)
        assert var42 == './.json'
        var43 = 'K&H94v*%\r'
        var44 = {var43: var43, var43: var43, var43: var43}
        var45 = module0.BaseJSONConfigManager(**var44)
        assert var45 is not None
        var46 = var45.ensure_config_dir_exists()
        assert var46 is None
        var47 = 'Xiyh2'
        var48 = 1000.0
        var49 = module0.recursive_update(var47, var48)
    except BaseException:
        pass


def test_case_261():
    try:
        var0 = 'K&H94v*%\r'
        var1 = {var0: var0, var0: var0, var0: var0}
        var2 = module0.BaseJSONConfigManager(**var1)
        assert var2 is not None
        var3 = var2.ensure_config_dir_exists()
        assert var3 is None
        var4 = ''
        var5 = module0.BaseJSONConfigManager()
        assert var5 is not None
        var6 = var5.get(var4)
        assert var6 is not None
        var7 = var5.ensure_config_dir_exists()
        assert var7 is None
        var8 = var5.ensure_config_dir_exists()
        assert var8 is None
        var9 = module0.BaseJSONConfigManager()
        assert var9 is not None
        var10 = ''
        var11 = module0.BaseJSONConfigManager()
        assert var11 is not None
        var12 = var11.get(var10)
        assert var12 is not None
        var13 = module0.BaseJSONConfigManager()
        assert var13 is not None
        var14 = var13.ensure_config_dir_exists()
        assert var14 is None
        var15 = ''
        var16 = module0.BaseJSONConfigManager()
        assert var16 is not None
        var17 = var16.get(var15)
        assert var17 is not None
        var18 = module0.BaseJSONConfigManager()
        assert var18 is not None
        var19 = ''
        var20 = module0.BaseJSONConfigManager()
        assert var20 is not None
        var21 = var20.get(var19)
        assert var21 is not None
        var22 = var20.ensure_config_dir_exists()
        assert var22 is None
        var23 = var20.ensure_config_dir_exists()
        assert var23 is None
        var24 = 'K&H94v*%\r'
        var25 = {var24: var24, var24: var24, var24: var24}
        var26 = module0.BaseJSONConfigManager(**var25)
        assert var26 is not None
        var27 = var26.ensure_config_dir_exists()
        assert var27 is None
        var28 = {}
        var29 = []
        var30 = module0.remove_defaults(var28, var29)
        assert var30 is None
        var31 = '\tYV'
        var32 = {var31: var31}
        var33 = module0.BaseJSONConfigManager(**var32)
        assert var33 is not None
        var34 = var33.ensure_config_dir_exists()
        assert var34 is None
        var35 = module0.BaseJSONConfigManager()
        assert var35 is not None
        var36 = 'K&H94v*%\r'
        var37 = {var36: var36, var36: var36, var36: var36}
        var38 = module0.BaseJSONConfigManager(**var37)
        assert var38 is not None
        var39 = var38.ensure_config_dir_exists()
        assert var39 is None
        var40 = var38.ensure_config_dir_exists()
        assert var40 is None
        var41 = ''
        var42 = module0.BaseJSONConfigManager()
        assert var42 is not None
        var43 = var42.get(var41)
        assert var43 is not None
        var44 = var42.ensure_config_dir_exists()
        assert var44 is None
        var45 = b'\x96\x9c6B\x86Qj{g\x83^\xec<\xb4'
        var46 = {var2}
        var47 = var16.set(var45, var46)
    except BaseException:
        pass


def test_case_262():
    try:
        var0 = ''
        var1 = module0.BaseJSONConfigManager()
        assert var1 is not None
        var2 = var1.get(var0)
        assert var2 is not None
        var3 = var1.ensure_config_dir_exists()
        assert var3 is None
        var4 = var1.ensure_config_dir_exists()
        assert var4 is None
        var5 = ''
        var6 = module0.BaseJSONConfigManager()
        assert var6 is not None
        var7 = var6.get(var5)
        assert var7 is not None
        var8 = module0.BaseJSONConfigManager()
        assert var8 is not None
        var9 = ''
        var10 = module0.BaseJSONConfigManager()
        assert var10 is not None
        var11 = var10.get(var9)
        assert var11 is not None
        var12 = module0.BaseJSONConfigManager()
        assert var12 is not None
        var13 = var12.file_name(var9)
        assert var13 == './.json'
        var14 = ''
        var15 = module0.BaseJSONConfigManager()
        assert var15 is not None
        var16 = var15.get(var14)
        assert var16 is not None
        var17 = ''
        var18 = module0.BaseJSONConfigManager()
        assert var18 is not None
        var19 = var18.get(var17)
        assert var19 is not None
        var20 = module0.BaseJSONConfigManager()
        assert var20 is not None
        var21 = -2472
        var22 = b'^;\x94('
        var23 = module0.recursive_update(var21, var22)
    except BaseException:
        pass


def test_case_263():
    try:
        var0 = {}
        var1 = module0.BaseJSONConfigManager(**var0)
        assert var1 is not None
        var2 = var1.ensure_config_dir_exists()
        assert var2 is None
        var3 = ''
        var4 = module0.BaseJSONConfigManager()
        assert var4 is not None
        var5 = var4.get(var3)
        assert var5 is not None
        var6 = module0.BaseJSONConfigManager()
        assert var6 is not None
        var7 = var6.ensure_config_dir_exists()
        assert var7 is None
        var8 = module0.BaseJSONConfigManager()
        assert var8 is not None
        var9 = ''
        var10 = module0.BaseJSONConfigManager()
        assert var10 is not None
        var11 = var10.get(var9)
        assert var11 is not None
        var12 = module0.BaseJSONConfigManager()
        assert var12 is not None
        var13 = var12.ensure_config_dir_exists()
        assert var13 is None
        var14 = ''
        var15 = module0.BaseJSONConfigManager()
        assert var15 is not None
        var16 = var15.get(var14)
        assert var16 is not None
        var17 = module0.BaseJSONConfigManager()
        assert var17 is not None
        var18 = ''
        var19 = module0.BaseJSONConfigManager()
        assert var19 is not None
        var20 = var19.get(var18)
        assert var20 is not None
        var21 = module0.BaseJSONConfigManager()
        assert var21 is not None
        var22 = var21.ensure_config_dir_exists()
        assert var22 is None
        var23 = ''
        var24 = module0.BaseJSONConfigManager()
        assert var24 is not None
        var25 = var24.get(var23)
        assert var25 is not None
        var26 = module0.BaseJSONConfigManager()
        assert var26 is not None
        var27 = var26.ensure_config_dir_exists()
        assert var27 is None
        var28 = 1000.0
        var29 = var19.file_name(var28)
    except BaseException:
        pass


def test_case_264():
    try:
        var0 = ''
        var1 = module0.BaseJSONConfigManager()
        assert var1 is not None
        var2 = var1.get(var0)
        assert var2 is not None
        var3 = var1.ensure_config_dir_exists()
        assert var3 is None
        var4 = var1.ensure_config_dir_exists()
        assert var4 is None
        var5 = {}
        var6 = module0.BaseJSONConfigManager(**var5)
        assert var6 is not None
        var7 = var6.ensure_config_dir_exists()
        assert var7 is None
        var8 = ''
        var9 = module0.BaseJSONConfigManager()
        assert var9 is not None
        var10 = var9.get(var8)
        assert var10 is not None
        var11 = module0.BaseJSONConfigManager()
        assert var11 is not None
        var12 = var11.ensure_config_dir_exists()
        assert var12 is None
        var13 = module0.BaseJSONConfigManager()
        assert var13 is not None
        var14 = ''
        var15 = module0.BaseJSONConfigManager()
        assert var15 is not None
        var16 = var15.get(var14)
        assert var16 is not None
        var17 = module0.BaseJSONConfigManager()
        assert var17 is not None
        var18 = module0.BaseJSONConfigManager()
        assert var18 is not None
        var19 = module0.BaseJSONConfigManager()
        assert var19 is not None
        var20 = module0.BaseJSONConfigManager()
        assert var20 is not None
        var21 = 'K&H94v*%\r'
        var22 = {var21: var21, var21: var21, var21: var21}
        var23 = module0.BaseJSONConfigManager(**var22)
        assert var23 is not None
        var24 = var23.ensure_config_dir_exists()
        assert var24 is None
        var25 = var23.ensure_config_dir_exists()
        assert var25 is None
        var26 = '\tYV'
        var27 = {var26: var26}
        var28 = module0.BaseJSONConfigManager(**var27)
        assert var28 is not None
        var29 = var28.ensure_config_dir_exists()
        assert var29 is None
        var30 = ''
        var31 = module0.BaseJSONConfigManager()
        assert var31 is not None
        var32 = var31.get(var30)
        assert var32 is not None
        var33 = module0.BaseJSONConfigManager()
        assert var33 is not None
        var34 = var33.ensure_config_dir_exists()
        assert var34 is None
        var35 = 'Qe'
        var36 = {var35: var35}
        var37 = module0.BaseJSONConfigManager(**var36)
        assert var37 is not None
        var38 = {}
        var39 = module0.BaseJSONConfigManager(**var38)
        assert var39 is not None
        var40 = var39.ensure_config_dir_exists()
        assert var40 is None
        var41 = var39.ensure_config_dir_exists()
        assert var41 is None
        var42 = module0.BaseJSONConfigManager()
        assert var42 is not None
        var43 = {var18: var13, var2: var6, var40: var6}
    except BaseException:
        pass


def test_case_265():
    try:
        var0 = ''
        var1 = module0.BaseJSONConfigManager()
        assert var1 is not None
        var2 = var1.get(var0)
        assert var2 is not None
        var3 = ''
        var4 = module0.BaseJSONConfigManager()
        assert var4 is not None
        var5 = var4.get(var3)
        assert var5 is not None
        var6 = module0.BaseJSONConfigManager()
        assert var6 is not None
        var7 = module0.BaseJSONConfigManager()
        assert var7 is not None
        var8 = module0.BaseJSONConfigManager()
        assert var8 is not None
        var9 = 'K&H94v*%\r'
        var10 = {var9: var9, var9: var9, var9: var9}
        var11 = module0.BaseJSONConfigManager(**var10)
        assert var11 is not None
        var12 = var11.ensure_config_dir_exists()
        assert var12 is None
        var13 = '\tYV'
        var14 = {var13: var13}
        var15 = module0.BaseJSONConfigManager(**var14)
        assert var15 is not None
        var16 = var15.ensure_config_dir_exists()
        assert var16 is None
        var17 = {}
        var18 = module0.BaseJSONConfigManager(**var17)
        assert var18 is not None
        var19 = var18.ensure_config_dir_exists()
        assert var19 is None
        var20 = var18.ensure_config_dir_exists()
        assert var20 is None
        var21 = module0.BaseJSONConfigManager()
        assert var21 is not None
        var22 = var21.ensure_config_dir_exists()
        assert var22 is None
        var23 = ''
        var24 = module0.BaseJSONConfigManager()
        assert var24 is not None
        var25 = var24.get(var23)
        assert var25 is not None
        var26 = module0.BaseJSONConfigManager()
        assert var26 is not None
        var27 = ''
        var28 = module0.BaseJSONConfigManager()
        assert var28 is not None
        var29 = var28.get(var27)
        assert var29 is not None
        var30 = module0.BaseJSONConfigManager()
        assert var30 is not None
        var31 = var30.file_name(var27)
        assert var31 == './.json'
        var32 = {}
        var33 = module0.BaseJSONConfigManager(**var32)
        assert var33 is not None
        var34 = var33.ensure_config_dir_exists()
        assert var34 is None
        var35 = var33.ensure_config_dir_exists()
        assert var35 is None
        var36 = var33.ensure_config_dir_exists()
        assert var36 is None
        var37 = False
        var38 = var4.directory(var37)
    except BaseException:
        pass


def test_case_266():
    try:
        var0 = 'K&H94v*%\r'
        var1 = {var0: var0, var0: var0, var0: var0}
        var2 = module0.BaseJSONConfigManager(**var1)
        assert var2 is not None
        var3 = var2.ensure_config_dir_exists()
        assert var3 is None
        var4 = {}
        var5 = []
        var6 = module0.remove_defaults(var4, var5)
        assert var6 is None
        var7 = module0.BaseJSONConfigManager()
        assert var7 is not None
        var8 = var7.ensure_config_dir_exists()
        assert var8 is None
        var9 = module0.BaseJSONConfigManager()
        assert var9 is not None
        var10 = ''
        var11 = module0.BaseJSONConfigManager()
        assert var11 is not None
        var12 = var11.get(var10)
        assert var12 is not None
        var13 = ''
        var14 = module0.BaseJSONConfigManager()
        assert var14 is not None
        var15 = var14.get(var13)
        assert var15 is not None
        var16 = var14.ensure_config_dir_exists()
        assert var16 is None
        var17 = True
        var18 = var9.update(var13, var17)
    except BaseException:
        pass


def test_case_267():
    try:
        var0 = ''
        var1 = module0.BaseJSONConfigManager()
        assert var1 is not None
        var2 = var1.get(var0)
        assert var2 is not None
        var3 = ''
        var4 = module0.BaseJSONConfigManager()
        assert var4 is not None
        var5 = var4.get(var3)
        assert var5 is not None
        var6 = var4.ensure_config_dir_exists()
        assert var6 is None
        var7 = var4.ensure_config_dir_exists()
        assert var7 is None
        var8 = module0.BaseJSONConfigManager()
        assert var8 is not None
        var9 = '\tYV'
        var10 = {var9: var9}
        var11 = module0.BaseJSONConfigManager(**var10)
        assert var11 is not None
        var12 = var11.ensure_config_dir_exists()
        assert var12 is None
        var13 = module0.BaseJSONConfigManager()
        assert var13 is not None
        var14 = {}
        var15 = module0.BaseJSONConfigManager(**var14)
        assert var15 is not None
        var16 = var15.ensure_config_dir_exists()
        assert var16 is None
        var17 = var15.ensure_config_dir_exists()
        assert var17 is None
        var18 = 'K&H94v*%\r'
        var19 = {var18: var18, var18: var18, var18: var18}
        var20 = module0.BaseJSONConfigManager(**var19)
        assert var20 is not None
        var21 = var20.ensure_config_dir_exists()
        assert var21 is None
        var22 = module0.BaseJSONConfigManager()
        assert var22 is not None
        var23 = 'K&H94v*%\r'
        var24 = {var23: var23, var23: var23, var23: var23}
        var25 = module0.BaseJSONConfigManager(**var24)
        assert var25 is not None
        var26 = var25.ensure_config_dir_exists()
        assert var26 is None
        var27 = var25.ensure_config_dir_exists()
        assert var27 is None
        var28 = True
        var29 = var15.directory(var28)
    except BaseException:
        pass


def test_case_268():
    try:
        var0 = 1340
        var1 = {var0: var0, var0: var0}
        var2 = b'\x1cI{\xd8^\xcc)\xb5S'
        var3 = 30.0
        var4 = var3,
        var5 = [var2]
        var6 = var1, var2, var4, var5
        var7 = module0.BaseJSONConfigManager()
        assert var7 is not None
        var8 = var7.set(var0, var6)
    except BaseException:
        pass


def test_case_269():
    try:
        var0 = {}
        var1 = module0.BaseJSONConfigManager(**var0)
        assert var1 is not None
        var2 = var1.ensure_config_dir_exists()
        assert var2 is None
        var3 = ''
        var4 = module0.BaseJSONConfigManager()
        assert var4 is not None
        var5 = var4.get(var3)
        assert var5 is not None
        var6 = module0.BaseJSONConfigManager()
        assert var6 is not None
        var7 = var6.ensure_config_dir_exists()
        assert var7 is None
        var8 = module0.BaseJSONConfigManager()
        assert var8 is not None
        var9 = ''
        var10 = module0.BaseJSONConfigManager()
        assert var10 is not None
        var11 = var10.get(var9)
        assert var11 is not None
        var12 = var10.ensure_config_dir_exists()
        assert var12 is None
        var13 = ''
        var14 = module0.BaseJSONConfigManager()
        assert var14 is not None
        var15 = var14.get(var13)
        assert var15 is not None
        var16 = var14.ensure_config_dir_exists()
        assert var16 is None
        var17 = var14.ensure_config_dir_exists()
        assert var17 is None
        var18 = {var2: var1}
        var19 = var1.get(var18)
    except BaseException:
        pass


def test_case_270():
    try:
        var0 = ''
        var1 = module0.BaseJSONConfigManager()
        assert var1 is not None
        var2 = var1.get(var0)
        assert var2 is not None
        var3 = var1.ensure_config_dir_exists()
        assert var3 is None
        var4 = var1.ensure_config_dir_exists()
        assert var4 is None
        var5 = var1.ensure_config_dir_exists()
        assert var5 is None
        var6 = module0.BaseJSONConfigManager()
        assert var6 is not None
        var7 = ''
        var8 = module0.BaseJSONConfigManager()
        assert var8 is not None
        var9 = var8.get(var7)
        assert var9 is not None
        var10 = var8.ensure_config_dir_exists()
        assert var10 is None
        var11 = ''
        var12 = module0.BaseJSONConfigManager()
        assert var12 is not None
        var13 = var12.get(var11)
        assert var13 is not None
        var14 = module0.BaseJSONConfigManager()
        assert var14 is not None
        var15 = var14.ensure_config_dir_exists()
        assert var15 is None
        var16 = {}
        var17 = module0.BaseJSONConfigManager(**var16)
        assert var17 is not None
        var18 = var17.ensure_config_dir_exists()
        assert var18 is None
        var19 = "@^8 YSBOCxv2_Uy'\t"
        var20 = var17.file_name(var19)
        assert var20 == "./@^8 YSBOCxv2_Uy'\t.json"
        var21 = {var9: var17, var5: var3, var19: var17, var8: var9}
    except BaseException:
        pass


def test_case_271():
    try:
        var0 = None
        var1 = {var0, var0}
        var2 = 564
        var3 = {var1, var1, var2}
    except BaseException:
        pass


def test_case_272():
    try:
        var0 = {}
        var1 = module0.BaseJSONConfigManager(**var0)
        assert var1 is not None
        var2 = var1.ensure_config_dir_exists()
        assert var2 is None
        var3 = ''
        var4 = module0.BaseJSONConfigManager()
        assert var4 is not None
        var5 = var4.get(var3)
        assert var5 is not None
        var6 = module0.BaseJSONConfigManager()
        assert var6 is not None
        var7 = var6.ensure_config_dir_exists()
        assert var7 is None
        var8 = ''
        var9 = module0.BaseJSONConfigManager()
        assert var9 is not None
        var10 = var9.get(var8)
        assert var10 is not None
        var11 = module0.BaseJSONConfigManager()
        assert var11 is not None
        var12 = ()
        var13 = var6.get(var12)
    except BaseException:
        pass


def test_case_273():
    try:
        var0 = module0.BaseJSONConfigManager()
        assert var0 is not None
        var1 = 'K&H94v*%\r'
        var2 = {var1: var1, var1: var1, var1: var1}
        var3 = module0.BaseJSONConfigManager(**var2)
        assert var3 is not None
        var4 = var3.ensure_config_dir_exists()
        assert var4 is None
        var5 = var3.ensure_config_dir_exists()
        assert var5 is None
        var6 = {}
        var7 = module0.BaseJSONConfigManager(**var6)
        assert var7 is not None
        var8 = var7.ensure_config_dir_exists()
        assert var8 is None
        var9 = '9'
        var10 = module0.BaseJSONConfigManager()
        assert var10 is not None
        var11 = var10.file_name(var9)
        assert var11 == './9.json'
        var12 = ''
        var13 = module0.BaseJSONConfigManager()
        assert var13 is not None
        var14 = var13.get(var12)
        assert var14 is not None
        var15 = var13.ensure_config_dir_exists()
        assert var15 is None
        var16 = var13.ensure_config_dir_exists()
        assert var16 is None
        var17 = module0.BaseJSONConfigManager()
        assert var17 is not None
        var18 = {}
        var19 = module0.BaseJSONConfigManager(**var18)
        assert var19 is not None
        var20 = var19.ensure_config_dir_exists()
        assert var20 is None
        var21 = var19.ensure_config_dir_exists()
        assert var21 is None
        var22 = var19.ensure_config_dir_exists()
        assert var22 is None
        var23 = ''
        var24 = module0.BaseJSONConfigManager()
        assert var24 is not None
        var25 = var24.get(var23)
        assert var25 is not None
        var26 = module0.BaseJSONConfigManager()
        assert var26 is not None
        var27 = var26.ensure_config_dir_exists()
        assert var27 is None
        var28 = 'K&H94v*%\r'
        var29 = {var28: var28, var28: var28, var28: var28}
        var30 = module0.BaseJSONConfigManager(**var29)
        assert var30 is not None
        var31 = var30.ensure_config_dir_exists()
        assert var31 is None
        var32 = {}
        var33 = []
        var34 = module0.remove_defaults(var32, var33)
        assert var34 is None
        var35 = 2480
        var36 = var0.get(var35)
    except BaseException:
        pass


def test_case_274():
    try:
        var0 = ''
        var1 = module0.BaseJSONConfigManager()
        assert var1 is not None
        var2 = var1.get(var0)
        assert var2 is not None
        var3 = var1.ensure_config_dir_exists()
        assert var3 is None
        var4 = ''
        var5 = module0.BaseJSONConfigManager()
        assert var5 is not None
        var6 = var5.get(var4)
        assert var6 is not None
        var7 = module0.BaseJSONConfigManager()
        assert var7 is not None
        var8 = var7.ensure_config_dir_exists()
        assert var8 is None
        var9 = ''
        var10 = module0.BaseJSONConfigManager()
        assert var10 is not None
        var11 = var10.get(var9)
        assert var11 is not None
        var12 = module0.BaseJSONConfigManager()
        assert var12 is not None
        var13 = '\tYV'
        var14 = {var13: var13}
        var15 = module0.BaseJSONConfigManager(**var14)
        assert var15 is not None
        var16 = var15.ensure_config_dir_exists()
        assert var16 is None
        var17 = '9'
        var18 = module0.BaseJSONConfigManager()
        assert var18 is not None
        var19 = var18.file_name(var17)
        assert var19 == './9.json'
        var20 = {}
        var21 = module0.BaseJSONConfigManager(**var20)
        assert var21 is not None
        var22 = var21.ensure_config_dir_exists()
        assert var22 is None
        var23 = "@^8 YSBOCxv2_Uy'\t"
        var24 = var21.file_name(var23)
        assert var24 == "./@^8 YSBOCxv2_Uy'\t.json"
        var25 = 'K&H94v*%\r'
        var26 = {var25: var25, var25: var25, var25: var25}
        var27 = module0.BaseJSONConfigManager(**var26)
        assert var27 is not None
        var28 = var27.ensure_config_dir_exists()
        assert var28 is None
        var29 = {}
        var30 = []
        var31 = module0.remove_defaults(var29, var30)
        assert var31 is None
        var32 = module0.BaseJSONConfigManager()
        assert var32 is not None
        var33 = 'K&H94v*%\r'
        var34 = {var33: var33, var33: var33, var33: var33}
        var35 = module0.BaseJSONConfigManager(**var34)
        assert var35 is not None
        var36 = var35.ensure_config_dir_exists()
        assert var36 is None
        var37 = var35.ensure_config_dir_exists()
        assert var37 is None
        var38 = ';ij;_EP8/[Hc,r!Od'
        var39 = module0.recursive_update(var29, var38)
    except BaseException:
        pass


def test_case_275():
    try:
        var0 = {}
        var1 = module0.BaseJSONConfigManager(**var0)
        assert var1 is not None
        var2 = var1.ensure_config_dir_exists()
        assert var2 is None
        var3 = var1.ensure_config_dir_exists()
        assert var3 is None
        var4 = module0.BaseJSONConfigManager()
        assert var4 is not None
        var5 = var4.ensure_config_dir_exists()
        assert var5 is None
        var6 = 'Qe'
        var7 = {var6: var6}
        var8 = module0.BaseJSONConfigManager(**var7)
        assert var8 is not None
        var9 = '\tYV'
        var10 = {var9: var9}
        var11 = module0.BaseJSONConfigManager(**var10)
        assert var11 is not None
        var12 = var11.ensure_config_dir_exists()
        assert var12 is None
        var13 = 'K&H94v*%\r'
        var14 = {var13: var13, var13: var13, var13: var13}
        var15 = module0.BaseJSONConfigManager(**var14)
        assert var15 is not None
        var16 = var15.ensure_config_dir_exists()
        assert var16 is None
        var17 = {}
        var18 = []
        var19 = module0.remove_defaults(var17, var18)
        assert var19 is None
        var20 = ''
        var21 = module0.BaseJSONConfigManager()
        assert var21 is not None
        var22 = var21.get(var20)
        assert var22 is not None
        var23 = var21.ensure_config_dir_exists()
        assert var23 is None
        var24 = var21.ensure_config_dir_exists()
        assert var24 is None
        var25 = module0.BaseJSONConfigManager()
        assert var25 is not None
        var26 = ''
        var27 = module0.BaseJSONConfigManager()
        assert var27 is not None
        var28 = var27.get(var26)
        assert var28 is not None
        var29 = var27.ensure_config_dir_exists()
        assert var29 is None
        var30 = var27.ensure_config_dir_exists()
        assert var30 is None
        var31 = var27.ensure_config_dir_exists()
        assert var31 is None
        var32 = '9qo{qw\x0c#U\tR*LHD'
        var33 = 'Z%EfuaxaEn 2'
        var34 = var32, var8, var33, var20
        var35 = module0.BaseJSONConfigManager()
        assert var35 is not None
        var36 = var35.get(var34)
    except BaseException:
        pass


def test_case_276():
    try:
        var0 = ''
        var1 = module0.BaseJSONConfigManager()
        assert var1 is not None
        var2 = var1.get(var0)
        assert var2 is not None
        var3 = var1.ensure_config_dir_exists()
        assert var3 is None
        var4 = var1.ensure_config_dir_exists()
        assert var4 is None
        var5 = var1.ensure_config_dir_exists()
        assert var5 is None
        var6 = {var0: var3, var0: var2}
        var7 = '~(>)?iia<zI-.\x0c&'
        var8 = {var7: var0}
        var9 = module0.BaseJSONConfigManager(**var8)
        assert var9 is not None
        var10 = var9.file_name(var6)
    except BaseException:
        pass


def test_case_277():
    try:
        var0 = '\tYV'
        var1 = {var0: var0}
        var2 = module0.BaseJSONConfigManager(**var1)
        assert var2 is not None
        var3 = var2.ensure_config_dir_exists()
        assert var3 is None
        var4 = module0.BaseJSONConfigManager()
        assert var4 is not None
        var5 = ''
        var6 = module0.BaseJSONConfigManager()
        assert var6 is not None
        var7 = var6.get(var5)
        assert var7 is not None
        var8 = module0.BaseJSONConfigManager()
        assert var8 is not None
        var9 = ''
        var10 = module0.BaseJSONConfigManager()
        assert var10 is not None
        var11 = var10.get(var9)
        assert var11 is not None
        var12 = module0.BaseJSONConfigManager()
        assert var12 is not None
        var13 = var12.file_name(var9)
        assert var13 == './.json'
        var14 = ''
        var15 = module0.BaseJSONConfigManager()
        assert var15 is not None
        var16 = var15.get(var14)
        assert var16 is not None
        var17 = module0.BaseJSONConfigManager()
        assert var17 is not None
        var18 = module0.BaseJSONConfigManager()
        assert var18 is not None
        var19 = module0.BaseJSONConfigManager()
        assert var19 is not None
        var20 = {}
        var21 = b'l:\xe61\x90\x15\xa3x\t\xab\xf8gYN\x9a'
        var22 = var21,
        var23 = var2.set(var20, var22)
    except BaseException:
        pass


def test_case_278():
    try:
        var0 = {}
        var1 = module0.BaseJSONConfigManager(**var0)
        assert var1 is not None
        var2 = var1.ensure_config_dir_exists()
        assert var2 is None
        var3 = "@^8 YSBOCxv2_Uy'\t"
        var4 = var1.file_name(var3)
        assert var4 == "./@^8 YSBOCxv2_Uy'\t.json"
        var5 = set()
        var6 = var1.get(var5)
    except BaseException:
        pass


def test_case_279():
    try:
        var0 = module0.BaseJSONConfigManager()
        assert var0 is not None
        var1 = 'K&H94v*%\r'
        var2 = {var1: var1, var1: var1, var1: var1}
        var3 = module0.BaseJSONConfigManager(**var2)
        assert var3 is not None
        var4 = var3.ensure_config_dir_exists()
        assert var4 is None
        var5 = var3.ensure_config_dir_exists()
        assert var5 is None
        var6 = {}
        var7 = module0.BaseJSONConfigManager(**var6)
        assert var7 is not None
        var8 = var7.ensure_config_dir_exists()
        assert var8 is None
        var9 = var7.ensure_config_dir_exists()
        assert var9 is None
        var10 = var7.ensure_config_dir_exists()
        assert var10 is None
        var11 = ''
        var12 = module0.BaseJSONConfigManager()
        assert var12 is not None
        var13 = var12.get(var11)
        assert var13 is not None
        var14 = module0.BaseJSONConfigManager()
        assert var14 is not None
        var15 = var14.ensure_config_dir_exists()
        assert var15 is None
        var16 = ''
        var17 = module0.BaseJSONConfigManager()
        assert var17 is not None
        var18 = var17.get(var16)
        assert var18 is not None
        var19 = module0.BaseJSONConfigManager()
        assert var19 is not None
        var20 = b"\x9eZ4'\xbc\x99wP}\xf6f\xe0\xffZ"
        var21 = var3.directory(var20)
    except BaseException:
        pass


def test_case_280():
    try:
        var0 = module0.BaseJSONConfigManager()
        assert var0 is not None
        var1 = None
        var2 = module0.BaseJSONConfigManager()
        assert var2 is not None
        var3 = var2.update(var0, var1)
    except BaseException:
        pass


def test_case_281():
    try:
        var0 = 'ico^qjus+Bo\tsXNM'
        var1 = 'login.html'
        var2 = {var0: var0, var1: var0}
        var3 = module0.recursive_update(var0, var2)
    except BaseException:
        pass


def test_case_282():
    try:
        var0 = 'K&H94v*%\r'
        var1 = {var0: var0, var0: var0, var0: var0}
        var2 = module0.BaseJSONConfigManager(**var1)
        assert var2 is not None
        var3 = var2.ensure_config_dir_exists()
        assert var3 is None
        var4 = var2.directory(var0)
        assert var4 == './K&H94v*%\r.d'
        var5 = {}
        var6 = module0.BaseJSONConfigManager(**var5)
        assert var6 is not None
        var7 = var6.ensure_config_dir_exists()
        assert var7 is None
        var8 = var6.ensure_config_dir_exists()
        assert var8 is None
        var9 = ''
        var10 = module0.BaseJSONConfigManager()
        assert var10 is not None
        var11 = var10.get(var9)
        assert var11 is not None
        var12 = module0.BaseJSONConfigManager()
        assert var12 is not None
        var13 = var12.ensure_config_dir_exists()
        assert var13 is None
        var14 = ''
        var15 = module0.BaseJSONConfigManager()
        assert var15 is not None
        var16 = var15.get(var14)
        assert var16 is not None
        var17 = module0.BaseJSONConfigManager()
        assert var17 is not None
        var18 = {}
        var19 = module0.BaseJSONConfigManager(**var18)
        assert var19 is not None
        var20 = var19.ensure_config_dir_exists()
        assert var20 is None
        var21 = ''
        var22 = module0.BaseJSONConfigManager()
        assert var22 is not None
        var23 = var22.get(var21)
        assert var23 is not None
        var24 = var22.ensure_config_dir_exists()
        assert var24 is None
        var25 = var22.ensure_config_dir_exists()
        assert var25 is None
        var26 = module0.BaseJSONConfigManager()
        assert var26 is not None
        var27 = module0.BaseJSONConfigManager()
        assert var27 is not None
        var28 = var27.ensure_config_dir_exists()
        assert var28 is None
        var29 = 'K&H94v*%\r'
        var30 = {var29: var29, var29: var29, var29: var29}
        var31 = module0.BaseJSONConfigManager(**var30)
        assert var31 is not None
        var32 = var31.ensure_config_dir_exists()
        assert var32 is None
        var33 = ''
        var34 = module0.BaseJSONConfigManager()
        assert var34 is not None
        var35 = var34.get(var33)
        assert var35 is not None
        var36 = None
        var37 = [var3, var3, var0]
        var38 = var10.set(var36, var37)
    except BaseException:
        pass


def test_case_283():
    try:
        var0 = ''
        var1 = module0.BaseJSONConfigManager()
        assert var1 is not None
        var2 = var1.get(var0)
        assert var2 is not None
        var3 = module0.BaseJSONConfigManager()
        assert var3 is not None
        var4 = ''
        var5 = module0.BaseJSONConfigManager()
        assert var5 is not None
        var6 = var5.get(var4)
        assert var6 is not None
        var7 = module0.BaseJSONConfigManager()
        assert var7 is not None
        var8 = var7.file_name(var4)
        assert var8 == './.json'
        var9 = {}
        var10 = module0.BaseJSONConfigManager(**var9)
        assert var10 is not None
        var11 = var10.ensure_config_dir_exists()
        assert var11 is None
        var12 = var10.ensure_config_dir_exists()
        assert var12 is None
        var13 = var10.ensure_config_dir_exists()
        assert var13 is None
        var14 = 'Qe'
        var15 = {var14: var14}
        var16 = module0.BaseJSONConfigManager(**var15)
        assert var16 is not None
        var17 = ''
        var18 = module0.BaseJSONConfigManager()
        assert var18 is not None
        var19 = var18.get(var17)
        assert var19 is not None
        var20 = 'K&H94v*%\r'
        var21 = {var20: var20, var20: var20, var20: var20}
        var22 = module0.BaseJSONConfigManager(**var21)
        assert var22 is not None
        var23 = var22.ensure_config_dir_exists()
        assert var23 is None
        var24 = ''
        var25 = module0.BaseJSONConfigManager()
        assert var25 is not None
        var26 = var25.get(var24)
        assert var26 is not None
        var27 = module0.BaseJSONConfigManager()
        assert var27 is not None
        var28 = '9'
        var29 = module0.BaseJSONConfigManager()
        assert var29 is not None
        var30 = var29.file_name(var28)
        assert var30 == './9.json'
        var31 = 'K&H94v*%\r'
        var32 = {var31: var31, var31: var31, var31: var31}
        var33 = module0.BaseJSONConfigManager(**var32)
        assert var33 is not None
        var34 = var33.ensure_config_dir_exists()
        assert var34 is None
        var35 = {}
        var36 = []
        var37 = module0.remove_defaults(var35, var36)
        assert var37 is None
        var38 = ''
        var39 = module0.BaseJSONConfigManager()
        assert var39 is not None
        var40 = var39.get(var38)
        assert var40 is not None
        var41 = var39.ensure_config_dir_exists()
        assert var41 is None
        var42 = var39.ensure_config_dir_exists()
        assert var42 is None
        var43 = var39.ensure_config_dir_exists()
        assert var43 is None
        var44 = 3939.833557
        var45 = """The interval for websocket keep-alive pings.
        
        Set ws_ping_interval = 0 to disable pings.
        """
        var46 = var39.set(var44, var45)
    except BaseException:
        pass


def test_case_284():
    try:
        var0 = module0.BaseJSONConfigManager()
        assert var0 is not None
        var1 = var0.ensure_config_dir_exists()
        assert var1 is None
        var2 = '9'
        var3 = module0.BaseJSONConfigManager()
        assert var3 is not None
        var4 = var3.file_name(var2)
        assert var4 == './9.json'
        var5 = ''
        var6 = module0.BaseJSONConfigManager()
        assert var6 is not None
        var7 = var6.get(var5)
        assert var7 is not None
        var8 = 'K&H94v*%\r'
        var9 = {var8: var8, var8: var8, var8: var8}
        var10 = module0.BaseJSONConfigManager(**var9)
        assert var10 is not None
        var11 = var10.ensure_config_dir_exists()
        assert var11 is None
        var12 = {}
        var13 = []
        var14 = module0.remove_defaults(var12, var13)
        assert var14 is None
        var15 = b'\xda\x00'
        var16 = "?Lp'"
        var17 = module0.remove_defaults(var15, var16)
    except BaseException:
        pass


def test_case_285():
    try:
        var0 = '\tYV'
        var1 = {var0: var0}
        var2 = module0.BaseJSONConfigManager(**var1)
        assert var2 is not None
        var3 = var2.ensure_config_dir_exists()
        assert var3 is None
        var4 = var2.ensure_config_dir_exists()
        assert var4 is None
        var5 = ''
        var6 = module0.BaseJSONConfigManager()
        assert var6 is not None
        var7 = var6.get(var5)
        assert var7 is not None
        var8 = module0.BaseJSONConfigManager()
        assert var8 is not None
        var9 = module0.BaseJSONConfigManager()
        assert var9 is not None
        var10 = module0.BaseJSONConfigManager()
        assert var10 is not None
        var11 = 'K&H94v*%\r'
        var12 = {var11: var11, var11: var11, var11: var11}
        var13 = module0.BaseJSONConfigManager(**var12)
        assert var13 is not None
        var14 = var13.ensure_config_dir_exists()
        assert var14 is None
        var15 = 17
        var16 = var8.set(var15, var0)
    except BaseException:
        pass


def test_case_286():
    try:
        var0 = ''
        var1 = module0.BaseJSONConfigManager()
        assert var1 is not None
        var2 = var1.get(var0)
        assert var2 is not None
        var3 = var1.ensure_config_dir_exists()
        assert var3 is None
        var4 = ''
        var5 = module0.BaseJSONConfigManager()
        assert var5 is not None
        var6 = var5.get(var4)
        assert var6 is not None
        var7 = var5.ensure_config_dir_exists()
        assert var7 is None
        var8 = var5.ensure_config_dir_exists()
        assert var8 is None
        var9 = var5.ensure_config_dir_exists()
        assert var9 is None
        var10 = {}
        var11 = module0.BaseJSONConfigManager(**var10)
        assert var11 is not None
        var12 = var11.ensure_config_dir_exists()
        assert var12 is None
        var13 = var11.ensure_config_dir_exists()
        assert var13 is None
        var14 = var11.ensure_config_dir_exists()
        assert var14 is None
        var15 = ''
        var16 = module0.BaseJSONConfigManager()
        assert var16 is not None
        var17 = var16.get(var15)
        assert var17 is not None
        var18 = var11.ensure_config_dir_exists()
        assert var18 is None
        var19 = ''
        var20 = module0.BaseJSONConfigManager()
        assert var20 is not None
        var21 = var20.get(var19)
        assert var21 is not None
        var22 = module0.BaseJSONConfigManager()
        assert var22 is not None
        var23 = ''
        var24 = module0.BaseJSONConfigManager()
        assert var24 is not None
        var25 = var24.get(var23)
        assert var25 is not None
        var26 = module0.BaseJSONConfigManager()
        assert var26 is not None
        var27 = var26.file_name(var23)
        assert var27 == './.json'
        var28 = module0.BaseJSONConfigManager()
        assert var28 is not None
        var29 = 'K&H94v*%\r'
        var30 = {var29: var29, var29: var29, var29: var29}
        var31 = module0.BaseJSONConfigManager(**var30)
        assert var31 is not None
        var32 = var31.ensure_config_dir_exists()
        assert var32 is None
        var33 = {}
        var34 = []
        var35 = module0.remove_defaults(var33, var34)
        assert var35 is None
        var36 = ''
        var37 = module0.BaseJSONConfigManager()
        assert var37 is not None
        var38 = var37.get(var36)
        assert var38 is not None
        var39 = module0.BaseJSONConfigManager()
        assert var39 is not None
        var40 = var39.ensure_config_dir_exists()
        assert var40 is None
        var41 = {}
        var42 = module0.BaseJSONConfigManager(**var41)
        assert var42 is not None
        var43 = var42.ensure_config_dir_exists()
        assert var43 is None
        var44 = {}
        var45 = module0.BaseJSONConfigManager(**var44)
        assert var45 is not None
        var46 = var45.ensure_config_dir_exists()
        assert var46 is None
        var47 = var45.ensure_config_dir_exists()
        assert var47 is None
        var48 = True
        var49 = ()
        var50 = module0.remove_defaults(var48, var49)
    except BaseException:
        pass


def test_case_287():
    try:
        var0 = {}
        var1 = module0.BaseJSONConfigManager(**var0)
        assert var1 is not None
        var2 = var1.ensure_config_dir_exists()
        assert var2 is None
        var3 = {}
        var4 = module0.BaseJSONConfigManager(**var3)
        assert var4 is not None
        var5 = var4.ensure_config_dir_exists()
        assert var5 is None
        var6 = var4.ensure_config_dir_exists()
        assert var6 is None
        var7 = var4.ensure_config_dir_exists()
        assert var7 is None
        var8 = ''
        var9 = module0.BaseJSONConfigManager()
        assert var9 is not None
        var10 = var9.get(var8)
        assert var10 is not None
        var11 = var4.ensure_config_dir_exists()
        assert var11 is None
        var12 = ''
        var13 = module0.BaseJSONConfigManager()
        assert var13 is not None
        var14 = var13.get(var12)
        assert var14 is not None
        var15 = var13.ensure_config_dir_exists()
        assert var15 is None
        var16 = 3191
        var17 = 938.55
        var18 = var13.set(var16, var17)
    except BaseException:
        pass


def test_case_288():
    try:
        var0 = 'K&H94v*%\r'
        var1 = {var0: var0, var0: var0, var0: var0}
        var2 = module0.BaseJSONConfigManager(**var1)
        assert var2 is not None
        var3 = var2.ensure_config_dir_exists()
        assert var3 is None
        var4 = 'K&H94v*%\r'
        var5 = {var4: var4, var4: var4, var4: var4}
        var6 = module0.BaseJSONConfigManager(**var5)
        assert var6 is not None
        var7 = var6.ensure_config_dir_exists()
        assert var7 is None
        var8 = {}
        var9 = []
        var10 = module0.remove_defaults(var8, var9)
        assert var10 is None
        var11 = ''
        var12 = module0.BaseJSONConfigManager()
        assert var12 is not None
        var13 = var12.get(var11)
        assert var13 is not None
        var14 = module0.BaseJSONConfigManager()
        assert var14 is not None
        var15 = ''
        var16 = module0.BaseJSONConfigManager()
        assert var16 is not None
        var17 = var16.get(var15)
        assert var17 is not None
        var18 = module0.BaseJSONConfigManager()
        assert var18 is not None
        var19 = var18.file_name(var15)
        assert var19 == './.json'
        var20 = ''
        var21 = module0.BaseJSONConfigManager()
        assert var21 is not None
        var22 = var21.get(var20)
        assert var22 is not None
        var23 = var21.ensure_config_dir_exists()
        assert var23 is None
        var24 = var21.ensure_config_dir_exists()
        assert var24 is None
        var25 = module0.BaseJSONConfigManager()
        assert var25 is not None
        var26 = 'K&H94v*%\r'
        var27 = {var26: var26, var26: var26, var26: var26}
        var28 = module0.BaseJSONConfigManager(**var27)
        assert var28 is not None
        var29 = var28.ensure_config_dir_exists()
        assert var29 is None
        var30 = var28.ensure_config_dir_exists()
        assert var30 is None
        var31 = ''
        var32 = module0.BaseJSONConfigManager()
        assert var32 is not None
        var33 = var32.get(var31)
        assert var33 is not None
        var34 = var32.ensure_config_dir_exists()
        assert var34 is None
        var35 = {}
        var36 = module0.BaseJSONConfigManager(**var35)
        assert var36 is not None
        var37 = var36.ensure_config_dir_exists()
        assert var37 is None
        var38 = "@^8 YSBOCxv2_Uy'\t"
        var39 = var36.file_name(var38)
        assert var39 == "./@^8 YSBOCxv2_Uy'\t.json"
        var40 = 34
        var41 = var16.file_name(var40)
    except BaseException:
        pass


def test_case_289():
    try:
        var0 = {}
        var1 = module0.BaseJSONConfigManager(**var0)
        assert var1 is not None
        var2 = var1.ensure_config_dir_exists()
        assert var2 is None
        var3 = var1.ensure_config_dir_exists()
        assert var3 is None
        var4 = {}
        var5 = module0.BaseJSONConfigManager(**var4)
        assert var5 is not None
        var6 = var5.ensure_config_dir_exists()
        assert var6 is None
        var7 = var5.ensure_config_dir_exists()
        assert var7 is None
        var8 = var5.ensure_config_dir_exists()
        assert var8 is None
        var9 = ''
        var10 = module0.BaseJSONConfigManager()
        assert var10 is not None
        var11 = var10.get(var9)
        assert var11 is not None
        var12 = module0.BaseJSONConfigManager()
        assert var12 is not None
        var13 = var12.ensure_config_dir_exists()
        assert var13 is None
        var14 = ''
        var15 = module0.BaseJSONConfigManager()
        assert var15 is not None
        var16 = var15.get(var14)
        assert var16 is not None
        var17 = module0.BaseJSONConfigManager()
        assert var17 is not None
        var18 = {}
        var19 = module0.BaseJSONConfigManager(**var18)
        assert var19 is not None
        var20 = var19.ensure_config_dir_exists()
        assert var20 is None
        var21 = "@^8 YSBOCxv2_Uy'\t"
        var22 = var19.file_name(var21)
        assert var22 == "./@^8 YSBOCxv2_Uy'\t.json"
        var23 = module0.BaseJSONConfigManager()
        assert var23 is not None
        var24 = 'K&H94v*%\r'
        var25 = {var24: var24, var24: var24, var24: var24}
        var26 = module0.BaseJSONConfigManager(**var25)
        assert var26 is not None
        var27 = var26.ensure_config_dir_exists()
        assert var27 is None
        var28 = var26.ensure_config_dir_exists()
        assert var28 is None
        var29 = 'K&H94v*%\r'
        var30 = {var29: var29, var29: var29, var29: var29}
        var31 = module0.BaseJSONConfigManager(**var30)
        assert var31 is not None
        var32 = var31.ensure_config_dir_exists()
        assert var32 is None
        var33 = var31.directory(var29)
        assert var33 == './K&H94v*%\r.d'
        var34 = ''
        var35 = module0.BaseJSONConfigManager()
        assert var35 is not None
        var36 = var35.get(var34)
        assert var36 is not None
        var37 = var35.ensure_config_dir_exists()
        assert var37 is None
        var38 = 'K&H94v*%\r'
        var39 = {var38: var38, var38: var38, var38: var38}
        var40 = module0.BaseJSONConfigManager(**var39)
        assert var40 is not None
        var41 = var40.ensure_config_dir_exists()
        assert var41 is None
        var42 = ''
        var43 = module0.BaseJSONConfigManager()
        assert var43 is not None
        var44 = var43.get(var42)
        assert var44 is not None
        var45 = module0.BaseJSONConfigManager()
        assert var45 is not None
        var46 = ''
        var47 = module0.BaseJSONConfigManager()
        assert var47 is not None
        var48 = var47.get(var46)
        assert var48 is not None
        var49 = module0.BaseJSONConfigManager()
        assert var49 is not None
        var50 = var49.file_name(var46)
        assert var50 == './.json'
        var51 = -155.14
        var52 = {var51, var34, var1}
        var53 = module0.recursive_update(var42, var52)
    except BaseException:
        pass


def test_case_290():
    try:
        var0 = ''
        var1 = module0.BaseJSONConfigManager()
        assert var1 is not None
        var2 = var1.get(var0)
        assert var2 is not None
        var3 = module0.BaseJSONConfigManager()
        assert var3 is not None
        var4 = var3.ensure_config_dir_exists()
        assert var4 is None
        var5 = ''
        var6 = module0.BaseJSONConfigManager()
        assert var6 is not None
        var7 = var6.get(var5)
        assert var7 is not None
        var8 = var6.ensure_config_dir_exists()
        assert var8 is None
        var9 = var6.ensure_config_dir_exists()
        assert var9 is None
        var10 = ''
        var11 = module0.BaseJSONConfigManager()
        assert var11 is not None
        var12 = var11.get(var10)
        assert var12 is not None
        var13 = module0.BaseJSONConfigManager()
        assert var13 is not None
        var14 = module0.BaseJSONConfigManager()
        assert var14 is not None
        var15 = {var12: var12, var2: var14, var0: var0}
    except BaseException:
        pass


def test_case_291():
    try:
        var0 = {}
        var1 = module0.BaseJSONConfigManager(**var0)
        assert var1 is not None
        var2 = var1.ensure_config_dir_exists()
        assert var2 is None
        var3 = var1.ensure_config_dir_exists()
        assert var3 is None
        var4 = var1.ensure_config_dir_exists()
        assert var4 is None
        var5 = ''
        var6 = module0.BaseJSONConfigManager()
        assert var6 is not None
        var7 = var6.get(var5)
        assert var7 is not None
        var8 = var6.ensure_config_dir_exists()
        assert var8 is None
        var9 = '\tYV'
        var10 = {var9: var9}
        var11 = module0.BaseJSONConfigManager(**var10)
        assert var11 is not None
        var12 = var11.ensure_config_dir_exists()
        assert var12 is None
        var13 = False
        var14 = [var1, var1, var0, var5]
        var15 = module0.BaseJSONConfigManager()
        assert var15 is not None
        var16 = var15.update(var13, var14)
    except BaseException:
        pass


def test_case_292():
    try:
        var0 = module0.BaseJSONConfigManager()
        assert var0 is not None
        var1 = module0.BaseJSONConfigManager()
        assert var1 is not None
        var2 = var1.ensure_config_dir_exists()
        assert var2 is None
        var3 = ''
        var4 = module0.BaseJSONConfigManager()
        assert var4 is not None
        var5 = var4.get(var3)
        assert var5 is not None
        var6 = var4.ensure_config_dir_exists()
        assert var6 is None
        var7 = var4.ensure_config_dir_exists()
        assert var7 is None
        var8 = module0.BaseJSONConfigManager()
        assert var8 is not None
        var9 = 'K&H94v*%\r'
        var10 = {var9: var9, var9: var9, var9: var9}
        var11 = module0.BaseJSONConfigManager(**var10)
        assert var11 is not None
        var12 = var11.ensure_config_dir_exists()
        assert var12 is None
        var13 = var11.ensure_config_dir_exists()
        assert var13 is None
        var14 = b'\xcfO\xa8AZ\xb4\xca'
        var15 = var11.set(var9, var14)
    except BaseException:
        pass


def test_case_293():
    try:
        var0 = ''
        var1 = module0.BaseJSONConfigManager()
        assert var1 is not None
        var2 = var1.get(var0)
        assert var2 is not None
        var3 = var1.ensure_config_dir_exists()
        assert var3 is None
        var4 = var1.ensure_config_dir_exists()
        assert var4 is None
        var5 = module0.BaseJSONConfigManager()
        assert var5 is not None
        var6 = 1787
        var7 = {}
        var8 = var5.update(var6, var7)
    except BaseException:
        pass


def test_case_294():
    try:
        var0 = {}
        var1 = module0.BaseJSONConfigManager(**var0)
        assert var1 is not None
        var2 = var1.ensure_config_dir_exists()
        assert var2 is None
        var3 = var1.ensure_config_dir_exists()
        assert var3 is None
        var4 = var1.ensure_config_dir_exists()
        assert var4 is None
        var5 = 'Qe'
        var6 = {var5: var5}
        var7 = module0.BaseJSONConfigManager(**var6)
        assert var7 is not None
        var8 = ''
        var9 = module0.BaseJSONConfigManager()
        assert var9 is not None
        var10 = var9.get(var8)
        assert var10 is not None
        var11 = module0.BaseJSONConfigManager()
        assert var11 is not None
        var12 = var11.ensure_config_dir_exists()
        assert var12 is None
        var13 = 'K&H94v*%\r'
        var14 = {var13: var13, var13: var13, var13: var13}
        var15 = module0.BaseJSONConfigManager(**var14)
        assert var15 is not None
        var16 = var15.ensure_config_dir_exists()
        assert var16 is None
        var17 = {}
        var18 = []
        var19 = module0.remove_defaults(var17, var18)
        assert var19 is None
        var20 = ''
        var21 = module0.BaseJSONConfigManager()
        assert var21 is not None
        var22 = var21.get(var20)
        assert var22 is not None
        var23 = var21.ensure_config_dir_exists()
        assert var23 is None
        var24 = '\tYV'
        var25 = {var24: var24}
        var26 = module0.BaseJSONConfigManager(**var25)
        assert var26 is not None
        var27 = var26.ensure_config_dir_exists()
        assert var27 is None
        var28 = {}
        var29 = module0.BaseJSONConfigManager(**var28)
        assert var29 is not None
        var30 = var29.ensure_config_dir_exists()
        assert var30 is None
        var31 = "@^8 YSBOCxv2_Uy'\t"
        var32 = var29.file_name(var31)
        assert var32 == "./@^8 YSBOCxv2_Uy'\t.json"
        var33 = ''
        var34 = module0.BaseJSONConfigManager()
        assert var34 is not None
        var35 = var34.get(var33)
        assert var35 is not None
        var36 = var34.ensure_config_dir_exists()
        assert var36 is None
        var37 = var34.ensure_config_dir_exists()
        assert var37 is None
        var38 = 'K&H94v*%\r'
        var39 = {var38: var38, var38: var38, var38: var38}
        var40 = module0.BaseJSONConfigManager(**var39)
        assert var40 is not None
        var41 = var40.ensure_config_dir_exists()
        assert var41 is None
        var42 = {}
        var43 = module0.BaseJSONConfigManager(**var42)
        assert var43 is not None
        var44 = var43.ensure_config_dir_exists()
        assert var44 is None
        var45 = ''
        var46 = module0.BaseJSONConfigManager()
        assert var46 is not None
        var47 = var46.get(var45)
        assert var47 is not None
        var48 = module0.BaseJSONConfigManager()
        assert var48 is not None
        var49 = var48.ensure_config_dir_exists()
        assert var49 is None
        var50 = module0.BaseJSONConfigManager()
        assert var50 is not None
        var51 = False
        var52 = module0.BaseJSONConfigManager()
        assert var52 is not None
        var53 = var52.set(var17, var51)
    except BaseException:
        pass


def test_case_295():
    try:
        var0 = -1721.5
        var1 = 'T+k7^+;u}'
        var2 = module0.BaseJSONConfigManager()
        assert var2 is not None
        var3 = var2.update(var0, var1)
    except BaseException:
        pass


def test_case_296():
    try:
        var0 = None
        var1 = module0.BaseJSONConfigManager()
        assert var1 is not None
        var2 = var1.file_name(var0)
    except BaseException:
        pass


def test_case_297():
    try:
        var0 = 'K&H94v*%\r'
        var1 = {var0: var0, var0: var0, var0: var0}
        var2 = module0.BaseJSONConfigManager(**var1)
        assert var2 is not None
        var3 = var2.ensure_config_dir_exists()
        assert var3 is None
        var4 = ''
        var5 = module0.BaseJSONConfigManager()
        assert var5 is not None
        var6 = var5.get(var4)
        assert var6 is not None
        var7 = var5.ensure_config_dir_exists()
        assert var7 is None
        var8 = var5.ensure_config_dir_exists()
        assert var8 is None
        var9 = module0.BaseJSONConfigManager()
        assert var9 is not None
        var10 = ''
        var11 = module0.BaseJSONConfigManager()
        assert var11 is not None
        var12 = var11.get(var10)
        assert var12 is not None
        var13 = var11.ensure_config_dir_exists()
        assert var13 is None
        var14 = var11.ensure_config_dir_exists()
        assert var14 is None
        var15 = var11.ensure_config_dir_exists()
        assert var15 is None
        var16 = '\tYV'
        var17 = {var16: var16}
        var18 = module0.BaseJSONConfigManager(**var17)
        assert var18 is not None
        var19 = var18.ensure_config_dir_exists()
        assert var19 is None
        var20 = module0.BaseJSONConfigManager()
        assert var20 is not None
        var21 = 'K&H94v*%\r'
        var22 = {var21: var21, var21: var21, var21: var21}
        var23 = module0.BaseJSONConfigManager(**var22)
        assert var23 is not None
        var24 = var23.ensure_config_dir_exists()
        assert var24 is None
        var25 = var23.ensure_config_dir_exists()
        assert var25 is None
        var26 = {}
        var27 = module0.BaseJSONConfigManager(**var26)
        assert var27 is not None
        var28 = var27.ensure_config_dir_exists()
        assert var28 is None
        var29 = ''
        var30 = module0.BaseJSONConfigManager()
        assert var30 is not None
        var31 = var30.get(var29)
        assert var31 is not None
        var32 = module0.BaseJSONConfigManager()
        assert var32 is not None
        var33 = var32.ensure_config_dir_exists()
        assert var33 is None
        var34 = module0.BaseJSONConfigManager()
        assert var34 is not None
        var35 = '\tYV'
        var36 = {var35: var35}
        var37 = module0.BaseJSONConfigManager(**var36)
        assert var37 is not None
        var38 = var37.ensure_config_dir_exists()
        assert var38 is None
        var39 = var37.ensure_config_dir_exists()
        assert var39 is None
        var40 = module0.BaseJSONConfigManager()
        assert var40 is not None
        var41 = 'Qe'
        var42 = {var41: var41}
        var43 = module0.BaseJSONConfigManager(**var42)
        assert var43 is not None
        var44 = 1989.9921
        var45 = 17
        var46 = var20.get(var44, var45)
    except BaseException:
        pass


def test_case_298():
    try:
        var0 = ''
        var1 = module0.BaseJSONConfigManager()
        assert var1 is not None
        var2 = var1.get(var0)
        assert var2 is not None
        var3 = var1.ensure_config_dir_exists()
        assert var3 is None
        var4 = var1.ensure_config_dir_exists()
        assert var4 is None
        var5 = module0.BaseJSONConfigManager()
        assert var5 is not None
        var6 = module0.BaseJSONConfigManager()
        assert var6 is not None
        var7 = var6.ensure_config_dir_exists()
        assert var7 is None
        var8 = ''
        var9 = module0.BaseJSONConfigManager()
        assert var9 is not None
        var10 = var9.get(var8)
        assert var10 is not None
        var11 = var9.ensure_config_dir_exists()
        assert var11 is None
        var12 = var9.ensure_config_dir_exists()
        assert var12 is None
        var13 = {}
        var14 = module0.BaseJSONConfigManager(**var13)
        assert var14 is not None
        var15 = var14.ensure_config_dir_exists()
        assert var15 is None
        var16 = var14.ensure_config_dir_exists()
        assert var16 is None
        var17 = var14.ensure_config_dir_exists()
        assert var17 is None
        var18 = ''
        var19 = module0.BaseJSONConfigManager()
        assert var19 is not None
        var20 = var19.get(var18)
        assert var20 is not None
        var21 = var14.ensure_config_dir_exists()
        assert var21 is None
        var22 = 'Yhq4,Ry\r3qjH'
        var23 = ()
        var24 = module0.remove_defaults(var22, var23)
    except BaseException:
        pass


def test_case_299():
    try:
        var0 = ''
        var1 = module0.BaseJSONConfigManager()
        assert var1 is not None
        var2 = var1.get(var0)
        assert var2 is not None
        var3 = module0.BaseJSONConfigManager()
        assert var3 is not None
        var4 = module0.BaseJSONConfigManager()
        assert var4 is not None
        var5 = module0.BaseJSONConfigManager()
        assert var5 is not None
        var6 = {}
        var7 = module0.BaseJSONConfigManager(**var6)
        assert var7 is not None
        var8 = var7.ensure_config_dir_exists()
        assert var8 is None
        var9 = "@^8 YSBOCxv2_Uy'\t"
        var10 = var7.file_name(var9)
        assert var10 == "./@^8 YSBOCxv2_Uy'\t.json"
        var11 = '\tYV'
        var12 = {var11: var11}
        var13 = module0.BaseJSONConfigManager(**var12)
        assert var13 is not None
        var14 = var13.ensure_config_dir_exists()
        assert var14 is None
        var15 = var13.ensure_config_dir_exists()
        assert var15 is None
        var16 = ''
        var17 = module0.BaseJSONConfigManager()
        assert var17 is not None
        var18 = var17.get(var16)
        assert var18 is not None
        var19 = module0.BaseJSONConfigManager()
        assert var19 is not None
        var20 = ''
        var21 = module0.BaseJSONConfigManager()
        assert var21 is not None
        var22 = var21.get(var20)
        assert var22 is not None
        var23 = var21.ensure_config_dir_exists()
        assert var23 is None
        var24 = '9'
        var25 = module0.BaseJSONConfigManager()
        assert var25 is not None
        var26 = var25.file_name(var24)
        assert var26 == './9.json'
        var27 = 'K&H94v*%\r'
        var28 = {var27: var27, var27: var27, var27: var27}
        var29 = module0.BaseJSONConfigManager(**var28)
        assert var29 is not None
        var30 = var29.ensure_config_dir_exists()
        assert var30 is None
        var31 = module0.BaseJSONConfigManager()
        assert var31 is not None
        var32 = var31.ensure_config_dir_exists()
        assert var32 is None
        var33 = 30.0
        var34 = var25.file_name(var33)
    except BaseException:
        pass


def test_case_300():
    try:
        var0 = ''
        var1 = module0.BaseJSONConfigManager()
        assert var1 is not None
        var2 = var1.get(var0)
        assert var2 is not None
        var3 = var1.ensure_config_dir_exists()
        assert var3 is None
        var4 = var1.ensure_config_dir_exists()
        assert var4 is None
        var5 = var1.ensure_config_dir_exists()
        assert var5 is None
        var6 = ''
        var7 = module0.BaseJSONConfigManager()
        assert var7 is not None
        var8 = var7.get(var6)
        assert var8 is not None
        var9 = var7.ensure_config_dir_exists()
        assert var9 is None
        var10 = 'Qe'
        var11 = {var10: var10}
        var12 = module0.BaseJSONConfigManager(**var11)
        assert var12 is not None
        var13 = ''
        var14 = module0.BaseJSONConfigManager()
        assert var14 is not None
        var15 = var14.get(var13)
        assert var15 is not None
        var16 = module0.BaseJSONConfigManager()
        assert var16 is not None
        var17 = module0.BaseJSONConfigManager()
        assert var17 is not None
        var18 = module0.BaseJSONConfigManager()
        assert var18 is not None
        var19 = 1347
        var20 = 0.5
        var21 = module0.remove_defaults(var19, var20)
    except BaseException:
        pass


def test_case_301():
    try:
        var0 = ''
        var1 = module0.BaseJSONConfigManager()
        assert var1 is not None
        var2 = var1.get(var0)
        assert var2 is not None
        var3 = var1.ensure_config_dir_exists()
        assert var3 is None
        var4 = var1.ensure_config_dir_exists()
        assert var4 is None
        var5 = module0.BaseJSONConfigManager()
        assert var5 is not None
        var6 = var5.ensure_config_dir_exists()
        assert var6 is None
        var7 = {}
        var8 = module0.BaseJSONConfigManager(**var7)
        assert var8 is not None
        var9 = var8.ensure_config_dir_exists()
        assert var9 is None
        var10 = var8.ensure_config_dir_exists()
        assert var10 is None
        var11 = ''
        var12 = module0.BaseJSONConfigManager()
        assert var12 is not None
        var13 = var12.get(var11)
        assert var13 is not None
        var14 = module0.BaseJSONConfigManager()
        assert var14 is not None
        var15 = ''
        var16 = module0.BaseJSONConfigManager()
        assert var16 is not None
        var17 = var16.get(var15)
        assert var17 is not None
        var18 = module0.BaseJSONConfigManager()
        assert var18 is not None
        var19 = var18.ensure_config_dir_exists()
        assert var19 is None
        var20 = ''
        var21 = module0.BaseJSONConfigManager()
        assert var21 is not None
        var22 = var21.get(var20)
        assert var22 is not None
        var23 = 'K&H94v*%\r'
        var24 = {var23: var23, var23: var23, var23: var23}
        var25 = module0.BaseJSONConfigManager(**var24)
        assert var25 is not None
        var26 = var25.ensure_config_dir_exists()
        assert var26 is None
        var27 = var25.directory(var23)
        assert var27 == './K&H94v*%\r.d'
        var28 = -2908.524877
        var29 = '\x0cnG:"z'
        var30 = module0.remove_defaults(var28, var29)
    except BaseException:
        pass


def test_case_302():
    try:
        var0 = True
        var1 = 'ico^qjus+Bo\tsXNM'
        var2 = []
        var3 = {var1: var2}
        var4 = module0.BaseJSONConfigManager(**var3)
        assert var4 is not None
        var5 = 1435
        var6 = '$ ?=#[D\x0cbw'
        var7 = var6, var4
        var8 = var5, var4, var7, var2
        var9 = '64+b>fHk\x0b=C'
        var10 = None
        var11 = var4, var8, var9, var10
        var12 = {}
        var13 = module0.BaseJSONConfigManager(**var12)
        assert var13 is not None
        var14 = var13.set(var0, var11)
    except BaseException:
        pass


def test_case_303():
    try:
        var0 = 'K&H94v*%\r'
        var1 = {var0: var0, var0: var0, var0: var0}
        var2 = module0.BaseJSONConfigManager(**var1)
        assert var2 is not None
        var3 = var2.ensure_config_dir_exists()
        assert var3 is None
        var4 = {}
        var5 = []
        var6 = module0.remove_defaults(var4, var5)
        assert var6 is None
        var7 = ''
        var8 = module0.BaseJSONConfigManager()
        assert var8 is not None
        var9 = var8.get(var7)
        assert var9 is not None
        var10 = var8.ensure_config_dir_exists()
        assert var10 is None
        var11 = var8.ensure_config_dir_exists()
        assert var11 is None
        var12 = module0.BaseJSONConfigManager()
        assert var12 is not None
        var13 = module0.BaseJSONConfigManager()
        assert var13 is not None
        var14 = 'K&H94v*%\r'
        var15 = {var14: var14, var14: var14, var14: var14}
        var16 = module0.BaseJSONConfigManager(**var15)
        assert var16 is not None
        var17 = var16.ensure_config_dir_exists()
        assert var17 is None
        var18 = var16.ensure_config_dir_exists()
        assert var18 is None
        var19 = ''
        var20 = module0.BaseJSONConfigManager()
        assert var20 is not None
        var21 = var20.get(var19)
        assert var21 is not None
        var22 = module0.BaseJSONConfigManager()
        assert var22 is not None
        var23 = {}
        var24 = module0.BaseJSONConfigManager(**var23)
        assert var24 is not None
        var25 = var24.ensure_config_dir_exists()
        assert var25 is None
        var26 = "@^8 YSBOCxv2_Uy'\t"
        var27 = var24.file_name(var26)
        assert var27 == "./@^8 YSBOCxv2_Uy'\t.json"
        var28 = '\tYV'
        var29 = {var28: var28}
        var30 = module0.BaseJSONConfigManager(**var29)
        assert var30 is not None
        var31 = var30.ensure_config_dir_exists()
        assert var31 is None
        var32 = var30.ensure_config_dir_exists()
        assert var32 is None
        var33 = 'K&H94v*%\r'
        var34 = {var33: var33, var33: var33, var33: var33}
        var35 = module0.BaseJSONConfigManager(**var34)
        assert var35 is not None
        var36 = var35.ensure_config_dir_exists()
        assert var36 is None
        var37 = var35.directory(var33)
        assert var37 == './K&H94v*%\r.d'
        var38 = ''
        var39 = module0.BaseJSONConfigManager()
        assert var39 is not None
        var40 = var39.get(var38)
        assert var40 is not None
        var41 = var39.ensure_config_dir_exists()
        assert var41 is None
        var42 = var39.ensure_config_dir_exists()
        assert var42 is None
        var43 = b'cavC'
        var44 = -1596.6663
        var45 = var8.set(var43, var44)
    except BaseException:
        pass


def test_case_304():
    try:
        var0 = {}
        var1 = module0.BaseJSONConfigManager(**var0)
        assert var1 is not None
        var2 = var1.ensure_config_dir_exists()
        assert var2 is None
        var3 = var1.ensure_config_dir_exists()
        assert var3 is None
        var4 = var1.ensure_config_dir_exists()
        assert var4 is None
        var5 = ''
        var6 = module0.BaseJSONConfigManager()
        assert var6 is not None
        var7 = var6.get(var5)
        assert var7 is not None
        var8 = var1.ensure_config_dir_exists()
        assert var8 is None
        var9 = True
        var10 = [var4, var9]
        var11 = {var10: var0}
    except BaseException:
        pass


def test_case_305():
    try:
        var0 = module0.BaseJSONConfigManager()
        assert var0 is not None
        var1 = var0.ensure_config_dir_exists()
        assert var1 is None
        var2 = {var0, var0}
        var3 = '&>!U0B'
        var4 = var0.update(var2, var3)
    except BaseException:
        pass


def test_case_306():
    try:
        var0 = '\tYV'
        var1 = {var0: var0}
        var2 = module0.BaseJSONConfigManager(**var1)
        assert var2 is not None
        var3 = var2.ensure_config_dir_exists()
        assert var3 is None
        var4 = var2.ensure_config_dir_exists()
        assert var4 is None
        var5 = 'K&H94v*%\r'
        var6 = {var5: var5, var5: var5, var5: var5}
        var7 = module0.BaseJSONConfigManager(**var6)
        assert var7 is not None
        var8 = var7.ensure_config_dir_exists()
        assert var8 is None
        var9 = {}
        var10 = module0.BaseJSONConfigManager(**var9)
        assert var10 is not None
        var11 = var10.ensure_config_dir_exists()
        assert var11 is None
        var12 = 'K&H94v*%\r'
        var13 = {var12: var12, var12: var12, var12: var12}
        var14 = module0.BaseJSONConfigManager(**var13)
        assert var14 is not None
        var15 = var14.ensure_config_dir_exists()
        assert var15 is None
        var16 = {}
        var17 = []
        var18 = module0.remove_defaults(var16, var17)
        assert var18 is None
        var19 = 'Qe'
        var20 = {var19: var19}
        var21 = module0.BaseJSONConfigManager(**var20)
        assert var21 is not None
        var22 = {}
        var23 = module0.BaseJSONConfigManager(**var22)
        assert var23 is not None
        var24 = var23.ensure_config_dir_exists()
        assert var24 is None
        var25 = ''
        var26 = module0.BaseJSONConfigManager()
        assert var26 is not None
        var27 = var26.get(var25)
        assert var27 is not None
        var28 = module0.BaseJSONConfigManager()
        assert var28 is not None
        var29 = var28.ensure_config_dir_exists()
        assert var29 is None
        var30 = module0.BaseJSONConfigManager()
        assert var30 is not None
        var31 = '\tYV'
        var32 = {var31: var31}
        var33 = module0.BaseJSONConfigManager(**var32)
        assert var33 is not None
        var34 = var33.ensure_config_dir_exists()
        assert var34 is None
        var35 = ''
        var36 = module0.BaseJSONConfigManager()
        assert var36 is not None
        var37 = var36.get(var35)
        assert var37 is not None
        var38 = module0.BaseJSONConfigManager()
        assert var38 is not None
        var39 = module0.BaseJSONConfigManager()
        assert var39 is not None
        var40 = module0.BaseJSONConfigManager()
        assert var40 is not None
        var41 = ''
        var42 = module0.BaseJSONConfigManager()
        assert var42 is not None
        var43 = var42.get(var41)
        assert var43 is not None
        var44 = module0.BaseJSONConfigManager()
        assert var44 is not None
        var45 = var44.ensure_config_dir_exists()
        assert var45 is None
        var46 = '9'
        var47 = module0.BaseJSONConfigManager()
        assert var47 is not None
        var48 = var47.file_name(var46)
        assert var48 == './9.json'
        var49 = var26.get(var42)
    except BaseException:
        pass


def test_case_307():
    try:
        var0 = ''
        var1 = module0.BaseJSONConfigManager()
        assert var1 is not None
        var2 = var1.get(var0)
        assert var2 is not None
        var3 = var1.ensure_config_dir_exists()
        assert var3 is None
        var4 = var1.ensure_config_dir_exists()
        assert var4 is None
        var5 = var1.ensure_config_dir_exists()
        assert var5 is None
        var6 = ''
        var7 = module0.BaseJSONConfigManager()
        assert var7 is not None
        var8 = var7.get(var6)
        assert var8 is not None
        var9 = module0.BaseJSONConfigManager()
        assert var9 is not None
        var10 = module0.BaseJSONConfigManager()
        assert var10 is not None
        var11 = module0.BaseJSONConfigManager()
        assert var11 is not None
        var12 = ''
        var13 = module0.BaseJSONConfigManager()
        assert var13 is not None
        var14 = var13.get(var12)
        assert var14 is not None
        var15 = var13.ensure_config_dir_exists()
        assert var15 is None
        var16 = var13.ensure_config_dir_exists()
        assert var16 is None
        var17 = ''
        var18 = module0.BaseJSONConfigManager()
        assert var18 is not None
        var19 = var18.get(var17)
        assert var19 is not None
        var20 = module0.BaseJSONConfigManager()
        assert var20 is not None
        var21 = ''
        var22 = module0.BaseJSONConfigManager()
        assert var22 is not None
        var23 = var22.get(var21)
        assert var23 is not None
        var24 = module0.BaseJSONConfigManager()
        assert var24 is not None
        var25 = var24.file_name(var21)
        assert var25 == './.json'
        var26 = ''
        var27 = module0.BaseJSONConfigManager()
        assert var27 is not None
        var28 = var27.get(var26)
        assert var28 is not None
        var29 = module0.BaseJSONConfigManager()
        assert var29 is not None
        var30 = 2623
        var31 = 'Ul7eEA\x0b'
        var32 = module0.remove_defaults(var30, var31)
    except BaseException:
        pass


def test_case_308():
    try:
        var0 = 'K&H94v*%\r'
        var1 = {var0: var0, var0: var0, var0: var0}
        var2 = module0.BaseJSONConfigManager(**var1)
        assert var2 is not None
        var3 = var2.ensure_config_dir_exists()
        assert var3 is None
        var4 = module0.BaseJSONConfigManager()
        assert var4 is not None
        var5 = module0.BaseJSONConfigManager()
        assert var5 is not None
        var6 = 'K&H94v*%\r'
        var7 = {var6: var6, var6: var6, var6: var6}
        var8 = module0.BaseJSONConfigManager(**var7)
        assert var8 is not None
        var9 = var8.ensure_config_dir_exists()
        assert var9 is None
        var10 = var8.ensure_config_dir_exists()
        assert var10 is None
        var11 = {}
        var12 = module0.BaseJSONConfigManager(**var11)
        assert var12 is not None
        var13 = var12.ensure_config_dir_exists()
        assert var13 is None
        var14 = var12.ensure_config_dir_exists()
        assert var14 is None
        var15 = var12.ensure_config_dir_exists()
        assert var15 is None
        var16 = ''
        var17 = module0.BaseJSONConfigManager()
        assert var17 is not None
        var18 = var17.get(var16)
        assert var18 is not None
        var19 = var12.ensure_config_dir_exists()
        assert var19 is None
        var20 = 'K&H94v*%\r'
        var21 = {var20: var20, var20: var20, var20: var20}
        var22 = module0.BaseJSONConfigManager(**var21)
        assert var22 is not None
        var23 = var22.ensure_config_dir_exists()
        assert var23 is None
        var24 = {}
        var25 = []
        var26 = module0.remove_defaults(var24, var25)
        assert var26 is None
        var27 = ''
        var28 = module0.BaseJSONConfigManager()
        assert var28 is not None
        var29 = var28.get(var27)
        assert var29 is not None
        var30 = var28.ensure_config_dir_exists()
        assert var30 is None
        var31 = var28.ensure_config_dir_exists()
        assert var31 is None
        var32 = ''
        var33 = module0.BaseJSONConfigManager()
        assert var33 is not None
        var34 = var33.get(var32)
        assert var34 is not None
        var35 = module0.BaseJSONConfigManager()
        assert var35 is not None
        var36 = var35.ensure_config_dir_exists()
        assert var36 is None
        var37 = ''
        var38 = module0.BaseJSONConfigManager()
        assert var38 is not None
        var39 = var38.get(var37)
        assert var39 is not None
        var40 = module0.BaseJSONConfigManager()
        assert var40 is not None
        var41 = module0.BaseJSONConfigManager()
        assert var41 is not None
        var42 = var41.file_name(var5)
    except BaseException:
        pass


def test_case_309():
    try:
        var0 = {}
        var1 = module0.BaseJSONConfigManager(**var0)
        assert var1 is not None
        var2 = var1.ensure_config_dir_exists()
        assert var2 is None
        var3 = var1.ensure_config_dir_exists()
        assert var3 is None
        var4 = '\tYV'
        var5 = {var4: var4}
        var6 = module0.BaseJSONConfigManager(**var5)
        assert var6 is not None
        var7 = var6.ensure_config_dir_exists()
        assert var7 is None
        var8 = var6.ensure_config_dir_exists()
        assert var8 is None
        var9 = ''
        var10 = module0.BaseJSONConfigManager()
        assert var10 is not None
        var11 = var10.get(var9)
        assert var11 is not None
        var12 = module0.BaseJSONConfigManager()
        assert var12 is not None
        var13 = {}
        var14 = module0.BaseJSONConfigManager(**var13)
        assert var14 is not None
        var15 = var14.ensure_config_dir_exists()
        assert var15 is None
        var16 = module0.BaseJSONConfigManager()
        assert var16 is not None
        var17 = ''
        var18 = module0.BaseJSONConfigManager()
        assert var18 is not None
        var19 = var18.get(var17)
        assert var19 is not None
        var20 = module0.BaseJSONConfigManager()
        assert var20 is not None
        var21 = ''
        var22 = module0.BaseJSONConfigManager()
        assert var22 is not None
        var23 = var22.get(var21)
        assert var23 is not None
        var24 = module0.BaseJSONConfigManager()
        assert var24 is not None
        var25 = var24.file_name(var21)
        assert var25 == './.json'
        var26 = ''
        var27 = module0.BaseJSONConfigManager()
        assert var27 is not None
        var28 = var27.get(var26)
        assert var28 is not None
        var29 = module0.BaseJSONConfigManager()
        assert var29 is not None
        var30 = var29.ensure_config_dir_exists()
        assert var30 is None
        var31 = 'K&H94v*%\r'
        var32 = {var31: var31, var31: var31, var31: var31}
        var33 = module0.BaseJSONConfigManager(**var32)
        assert var33 is not None
        var34 = var33.ensure_config_dir_exists()
        assert var34 is None
        var35 = {}
        var36 = []
        var37 = module0.remove_defaults(var35, var36)
        assert var37 is None
        var38 = {}
        var39 = module0.BaseJSONConfigManager(**var38)
        assert var39 is not None
        var40 = var39.ensure_config_dir_exists()
        assert var40 is None
        var41 = var39.ensure_config_dir_exists()
        assert var41 is None
        var42 = var39.ensure_config_dir_exists()
        assert var42 is None
        var43 = True
        var44 = 'login.html'
        var45 = module0.remove_defaults(var43, var44)
    except BaseException:
        pass


def test_case_310():
    try:
        var0 = 'Qe'
        var1 = {var0: var0}
        var2 = module0.BaseJSONConfigManager(**var1)
        assert var2 is not None
        var3 = {}
        var4 = module0.BaseJSONConfigManager(**var3)
        assert var4 is not None
        var5 = var4.ensure_config_dir_exists()
        assert var5 is None
        var6 = ''
        var7 = module0.BaseJSONConfigManager()
        assert var7 is not None
        var8 = var7.get(var6)
        assert var8 is not None
        var9 = module0.BaseJSONConfigManager()
        assert var9 is not None
        var10 = var9.ensure_config_dir_exists()
        assert var10 is None
        var11 = module0.BaseJSONConfigManager()
        assert var11 is not None
        var12 = {}
        var13 = module0.BaseJSONConfigManager(**var12)
        assert var13 is not None
        var14 = var13.ensure_config_dir_exists()
        assert var14 is None
        var15 = var13.ensure_config_dir_exists()
        assert var15 is None
        var16 = 'K&H94v*%\r'
        var17 = {var16: var16, var16: var16, var16: var16}
        var18 = module0.BaseJSONConfigManager(**var17)
        assert var18 is not None
        var19 = var18.ensure_config_dir_exists()
        assert var19 is None
        var20 = ''
        var21 = module0.BaseJSONConfigManager()
        assert var21 is not None
        var22 = var21.get(var20)
        assert var22 is not None
        var23 = ''
        var24 = module0.BaseJSONConfigManager()
        assert var24 is not None
        var25 = var24.get(var23)
        assert var25 is not None
        var26 = module0.BaseJSONConfigManager()
        assert var26 is not None
        var27 = module0.BaseJSONConfigManager()
        assert var27 is not None
        var28 = var27.ensure_config_dir_exists()
        assert var28 is None
        var29 = '9'
        var30 = module0.BaseJSONConfigManager()
        assert var30 is not None
        var31 = var30.file_name(var29)
        assert var31 == './9.json'
        var32 = -3107.875
        var33 = -1549
        var34 = module0.recursive_update(var32, var33)
    except BaseException:
        pass


def test_case_311():
    try:
        var0 = ''
        var1 = module0.BaseJSONConfigManager()
        assert var1 is not None
        var2 = var1.get(var0)
        assert var2 is not None
        var3 = var1.ensure_config_dir_exists()
        assert var3 is None
        var4 = var1.ensure_config_dir_exists()
        assert var4 is None
        var5 = '\tYV'
        var6 = {var5: var5}
        var7 = module0.BaseJSONConfigManager(**var6)
        assert var7 is not None
        var8 = var7.ensure_config_dir_exists()
        assert var8 is None
        var9 = var7.ensure_config_dir_exists()
        assert var9 is None
        var10 = ''
        var11 = module0.BaseJSONConfigManager()
        assert var11 is not None
        var12 = var11.get(var10)
        assert var12 is not None
        var13 = var11.ensure_config_dir_exists()
        assert var13 is None
        var14 = {}
        var15 = module0.BaseJSONConfigManager(**var14)
        assert var15 is not None
        var16 = var15.ensure_config_dir_exists()
        assert var16 is None
        var17 = var15.ensure_config_dir_exists()
        assert var17 is None
        var18 = ''
        var19 = module0.BaseJSONConfigManager()
        assert var19 is not None
        var20 = var19.get(var18)
        assert var20 is not None
        var21 = module0.BaseJSONConfigManager()
        assert var21 is not None
        var22 = var21.ensure_config_dir_exists()
        assert var22 is None
        var23 = None
        var24 = var1.file_name(var23)
    except BaseException:
        pass


def test_case_312():
    try:
        var0 = module0.BaseJSONConfigManager()
        assert var0 is not None
        var1 = 'K&H94v*%\r'
        var2 = {var1: var1, var1: var1, var1: var1}
        var3 = module0.BaseJSONConfigManager(**var2)
        assert var3 is not None
        var4 = var3.ensure_config_dir_exists()
        assert var4 is None
        var5 = var3.ensure_config_dir_exists()
        assert var5 is None
        var6 = {}
        var7 = module0.BaseJSONConfigManager(**var6)
        assert var7 is not None
        var8 = var7.ensure_config_dir_exists()
        assert var8 is None
        var9 = var7.ensure_config_dir_exists()
        assert var9 is None
        var10 = var7.ensure_config_dir_exists()
        assert var10 is None
        var11 = ''
        var12 = module0.BaseJSONConfigManager()
        assert var12 is not None
        var13 = var12.get(var11)
        assert var13 is not None
        var14 = var7.ensure_config_dir_exists()
        assert var14 is None
        var15 = module0.BaseJSONConfigManager()
        assert var15 is not None
        var16 = '\'dY6@2S8t&|c~4g"'
        var17 = b'lTuc\x9b\x13uX\x14\x82\xdeN\xe3?\x1c3Rh'
        var18 = var16, var17
        var19 = b'\x1dW\xd8?\x01^X{m\xca\xc7w\xd2FD'
        var20 = var15.set(var18, var19)
    except BaseException:
        pass


def test_case_313():
    try:
        var0 = {}
        var1 = module0.BaseJSONConfigManager(**var0)
        assert var1 is not None
        var2 = var1.ensure_config_dir_exists()
        assert var2 is None
        var3 = var1.ensure_config_dir_exists()
        assert var3 is None
        var4 = var1.ensure_config_dir_exists()
        assert var4 is None
        var5 = '9'
        var6 = module0.BaseJSONConfigManager()
        assert var6 is not None
        var7 = var6.file_name(var5)
        assert var7 == './9.json'
        var8 = 'K&H94v*%\r'
        var9 = {var8: var8, var8: var8, var8: var8}
        var10 = module0.BaseJSONConfigManager(**var9)
        assert var10 is not None
        var11 = var10.ensure_config_dir_exists()
        assert var11 is None
        var12 = ''
        var13 = module0.BaseJSONConfigManager()
        assert var13 is not None
        var14 = var13.get(var12)
        assert var14 is not None
        var15 = module0.BaseJSONConfigManager()
        assert var15 is not None
        var16 = ''
        var17 = module0.BaseJSONConfigManager()
        assert var17 is not None
        var18 = var17.get(var16)
        assert var18 is not None
        var19 = module0.BaseJSONConfigManager()
        assert var19 is not None
        var20 = ''
        var21 = module0.BaseJSONConfigManager()
        assert var21 is not None
        var22 = var21.get(var20)
        assert var22 is not None
        var23 = module0.BaseJSONConfigManager()
        assert var23 is not None
        var24 = var23.file_name(var20)
        assert var24 == './.json'
        var25 = '\tYV'
        var26 = {var25: var25}
        var27 = module0.BaseJSONConfigManager(**var26)
        assert var27 is not None
        var28 = var27.ensure_config_dir_exists()
        assert var28 is None
        var29 = var27.ensure_config_dir_exists()
        assert var29 is None
        var30 = {}
        var31 = module0.BaseJSONConfigManager(**var30)
        assert var31 is not None
        var32 = var31.ensure_config_dir_exists()
        assert var32 is None
        var33 = var31.ensure_config_dir_exists()
        assert var33 is None
        var34 = var31.ensure_config_dir_exists()
        assert var34 is None
        var35 = ''
        var36 = module0.BaseJSONConfigManager()
        assert var36 is not None
        var37 = var36.get(var35)
        assert var37 is not None
        var38 = var31.ensure_config_dir_exists()
        assert var38 is None
        var39 = [var25]
        var40 = 3520.2285
        var41 = module0.recursive_update(var39, var40)
    except BaseException:
        pass


def test_case_314():
    try:
        var0 = ''
        var1 = module0.BaseJSONConfigManager()
        assert var1 is not None
        var2 = var1.get(var0)
        assert var2 is not None
        var3 = module0.BaseJSONConfigManager()
        assert var3 is not None
        var4 = var3.ensure_config_dir_exists()
        assert var4 is None
        var5 = b'\xd5\x83\x0f\x1b\xb5\xc9@'
        var6 = [var4]
        var7 = module0.BaseJSONConfigManager()
        assert var7 is not None
        var8 = var7.update(var5, var6)
    except BaseException:
        pass


def test_case_315():
    try:
        var0 = ''
        var1 = module0.BaseJSONConfigManager()
        assert var1 is not None
        var2 = var1.get(var0)
        assert var2 is not None
        var3 = var1.ensure_config_dir_exists()
        assert var3 is None
        var4 = var1.ensure_config_dir_exists()
        assert var4 is None
        var5 = 'K&H94v*%\r'
        var6 = {var5: var5, var5: var5, var5: var5}
        var7 = module0.BaseJSONConfigManager(**var6)
        assert var7 is not None
        var8 = var7.ensure_config_dir_exists()
        assert var8 is None
        var9 = var7.directory(var5)
        assert var9 == './K&H94v*%\r.d'
        var10 = ''
        var11 = module0.BaseJSONConfigManager()
        assert var11 is not None
        var12 = var11.get(var10)
        assert var12 is not None
        var13 = var11.ensure_config_dir_exists()
        assert var13 is None
        var14 = var11.ensure_config_dir_exists()
        assert var14 is None
        var15 = var11.ensure_config_dir_exists()
        assert var15 is None
        var16 = ''
        var17 = module0.BaseJSONConfigManager()
        assert var17 is not None
        var18 = var17.get(var16)
        assert var18 is not None
        var19 = var17.ensure_config_dir_exists()
        assert var19 is None
        var20 = '\tYV'
        var21 = {var20: var20}
        var22 = module0.BaseJSONConfigManager(**var21)
        assert var22 is not None
        var23 = var22.ensure_config_dir_exists()
        assert var23 is None
        var24 = var22.ensure_config_dir_exists()
        assert var24 is None
        var25 = None
        var26 = None
        var27 = var22.get(var25, var26)
    except BaseException:
        pass


def test_case_316():
    try:
        var0 = {}
        var1 = module0.BaseJSONConfigManager(**var0)
        assert var1 is not None
        var2 = var1.ensure_config_dir_exists()
        assert var2 is None
        var3 = var1.ensure_config_dir_exists()
        assert var3 is None
        var4 = ''
        var5 = module0.BaseJSONConfigManager()
        assert var5 is not None
        var6 = var5.get(var4)
        assert var6 is not None
        var7 = var5.ensure_config_dir_exists()
        assert var7 is None
        var8 = var5.ensure_config_dir_exists()
        assert var8 is None
        var9 = module0.BaseJSONConfigManager()
        assert var9 is not None
        var10 = {}
        var11 = module0.BaseJSONConfigManager(**var10)
        assert var11 is not None
        var12 = var11.ensure_config_dir_exists()
        assert var12 is None
        var13 = ''
        var14 = module0.BaseJSONConfigManager()
        assert var14 is not None
        var15 = var14.get(var13)
        assert var15 is not None
        var16 = module0.BaseJSONConfigManager()
        assert var16 is not None
        var17 = var16.ensure_config_dir_exists()
        assert var17 is None
        var18 = module0.BaseJSONConfigManager()
        assert var18 is not None
        var19 = {}
        var20 = module0.BaseJSONConfigManager(**var19)
        assert var20 is not None
        var21 = var20.ensure_config_dir_exists()
        assert var21 is None
        var22 = var20.ensure_config_dir_exists()
        assert var22 is None
        var23 = var20.ensure_config_dir_exists()
        assert var23 is None
        var24 = ''
        var25 = module0.BaseJSONConfigManager()
        assert var25 is not None
        var26 = var25.get(var24)
        assert var26 is not None
        var27 = var25.ensure_config_dir_exists()
        assert var27 is None
        var28 = var25.ensure_config_dir_exists()
        assert var28 is None
        var29 = var25.ensure_config_dir_exists()
        assert var29 is None
        var30 = var1.directory(var18)
    except BaseException:
        pass


def test_case_317():
    try:
        var0 = '\tYV'
        var1 = {var0: var0}
        var2 = module0.BaseJSONConfigManager(**var1)
        assert var2 is not None
        var3 = var2.ensure_config_dir_exists()
        assert var3 is None
        var4 = var2.ensure_config_dir_exists()
        assert var4 is None
        var5 = {}
        var6 = module0.BaseJSONConfigManager(**var5)
        assert var6 is not None
        var7 = var6.ensure_config_dir_exists()
        assert var7 is None
        var8 = 'K&H94v*%\r'
        var9 = {var8: var8, var8: var8, var8: var8}
        var10 = module0.BaseJSONConfigManager(**var9)
        assert var10 is not None
        var11 = var10.ensure_config_dir_exists()
        assert var11 is None
        var12 = var10.directory(var8)
        assert var12 == './K&H94v*%\r.d'
        var13 = {}
        var14 = module0.BaseJSONConfigManager(**var13)
        assert var14 is not None
        var15 = var14.ensure_config_dir_exists()
        assert var15 is None
        var16 = var14.ensure_config_dir_exists()
        assert var16 is None
        var17 = var14.ensure_config_dir_exists()
        assert var17 is None
        var18 = ''
        var19 = module0.BaseJSONConfigManager()
        assert var19 is not None
        var20 = var19.get(var18)
        assert var20 is not None
        var21 = var14.ensure_config_dir_exists()
        assert var21 is None
        var22 = ''
        var23 = module0.BaseJSONConfigManager()
        assert var23 is not None
        var24 = var23.get(var22)
        assert var24 is not None
        var25 = module0.BaseJSONConfigManager()
        assert var25 is not None
        var26 = var25.ensure_config_dir_exists()
        assert var26 is None
        var27 = ''
        var28 = module0.BaseJSONConfigManager()
        assert var28 is not None
        var29 = var28.get(var27)
        assert var29 is not None
        var30 = var28.ensure_config_dir_exists()
        assert var30 is None
        var31 = var28.ensure_config_dir_exists()
        assert var31 is None
        var32 = module0.BaseJSONConfigManager()
        assert var32 is not None
        var33 = '9'
        var34 = module0.BaseJSONConfigManager()
        assert var34 is not None
        var35 = var34.file_name(var33)
        assert var35 == './9.json'
        var36 = {}
        var37 = module0.BaseJSONConfigManager(**var36)
        assert var37 is not None
        var38 = var37.ensure_config_dir_exists()
        assert var38 is None
        var39 = var37.ensure_config_dir_exists()
        assert var39 is None
        var40 = module0.BaseJSONConfigManager()
        assert var40 is not None
        var41 = False
        var42 = -636
        var43 = module0.remove_defaults(var41, var42)
    except BaseException:
        pass


def test_case_318():
    try:
        var0 = ''
        var1 = module0.BaseJSONConfigManager()
        assert var1 is not None
        var2 = var1.get(var0)
        assert var2 is not None
        var3 = ''
        var4 = module0.BaseJSONConfigManager()
        assert var4 is not None
        var5 = var4.get(var3)
        assert var5 is not None
        var6 = module0.BaseJSONConfigManager()
        assert var6 is not None
        var7 = module0.BaseJSONConfigManager()
        assert var7 is not None
        var8 = module0.BaseJSONConfigManager()
        assert var8 is not None
        var9 = {}
        var10 = module0.BaseJSONConfigManager(**var9)
        assert var10 is not None
        var11 = var10.ensure_config_dir_exists()
        assert var11 is None
        var12 = "@^8 YSBOCxv2_Uy'\t"
        var13 = var10.file_name(var12)
        assert var13 == "./@^8 YSBOCxv2_Uy'\t.json"
        var14 = 'K&H94v*%\r'
        var15 = {var14: var14, var14: var14, var14: var14}
        var16 = module0.BaseJSONConfigManager(**var15)
        assert var16 is not None
        var17 = var16.ensure_config_dir_exists()
        assert var17 is None
        var18 = {}
        var19 = []
        var20 = module0.remove_defaults(var18, var19)
        assert var20 is None
        var21 = ''
        var22 = module0.BaseJSONConfigManager()
        assert var22 is not None
        var23 = var22.get(var21)
        assert var23 is not None
        var24 = module0.BaseJSONConfigManager()
        assert var24 is not None
        var25 = var24.ensure_config_dir_exists()
        assert var25 is None
        var26 = ''
        var27 = module0.BaseJSONConfigManager()
        assert var27 is not None
        var28 = var27.get(var26)
        assert var28 is not None
        var29 = module0.BaseJSONConfigManager()
        assert var29 is not None
        var30 = '\tYV'
        var31 = {var30: var30}
        var32 = module0.BaseJSONConfigManager(**var31)
        assert var32 is not None
        var33 = var32.ensure_config_dir_exists()
        assert var33 is None
        var34 = '9'
        var35 = module0.BaseJSONConfigManager()
        assert var35 is not None
        var36 = var35.file_name(var34)
        assert var36 == './9.json'
        var37 = ''
        var38 = module0.BaseJSONConfigManager()
        assert var38 is not None
        var39 = var38.get(var37)
        assert var39 is not None
        var40 = var38.ensure_config_dir_exists()
        assert var40 is None
        var41 = var38.ensure_config_dir_exists()
        assert var41 is None
        var42 = module0.BaseJSONConfigManager()
        assert var42 is not None
        var43 = False
        var44 = 2487.5631
        var45 = module0.recursive_update(var43, var44)
    except BaseException:
        pass


def test_case_319():
    try:
        var0 = ''
        var1 = module0.BaseJSONConfigManager()
        assert var1 is not None
        var2 = var1.get(var0)
        assert var2 is not None
        var3 = var1.ensure_config_dir_exists()
        assert var3 is None
        var4 = var1.ensure_config_dir_exists()
        assert var4 is None
        var5 = module0.BaseJSONConfigManager()
        assert var5 is not None
        var6 = module0.BaseJSONConfigManager()
        assert var6 is not None
        var7 = False
        var8 = ()
        var9 = module0.remove_defaults(var7, var8)
    except BaseException:
        pass


def test_case_320():
    try:
        var0 = ''
        var1 = module0.BaseJSONConfigManager()
        assert var1 is not None
        var2 = var1.get(var0)
        assert var2 is not None
        var3 = module0.BaseJSONConfigManager()
        assert var3 is not None
        var4 = var3.ensure_config_dir_exists()
        assert var4 is None
        var5 = ''
        var6 = module0.BaseJSONConfigManager()
        assert var6 is not None
        var7 = var6.get(var5)
        assert var7 is not None
        var8 = module0.BaseJSONConfigManager()
        assert var8 is not None
        var9 = ''
        var10 = module0.BaseJSONConfigManager()
        assert var10 is not None
        var11 = var10.get(var9)
        assert var11 is not None
        var12 = module0.BaseJSONConfigManager()
        assert var12 is not None
        var13 = module0.BaseJSONConfigManager()
        assert var13 is not None
        var14 = module0.BaseJSONConfigManager()
        assert var14 is not None
        var15 = ''
        var16 = module0.BaseJSONConfigManager()
        assert var16 is not None
        var17 = var16.get(var15)
        assert var17 is not None
        var18 = var16.ensure_config_dir_exists()
        assert var18 is None
        var19 = var16.ensure_config_dir_exists()
        assert var19 is None
        var20 = var16.ensure_config_dir_exists()
        assert var20 is None
        var21 = 'K&H94v*%\r'
        var22 = {var21: var21, var21: var21, var21: var21}
        var23 = module0.BaseJSONConfigManager(**var22)
        assert var23 is not None
        var24 = var23.ensure_config_dir_exists()
        assert var24 is None
        var25 = ''
        var26 = module0.BaseJSONConfigManager()
        assert var26 is not None
        var27 = var26.get(var25)
        assert var27 is not None
        var28 = var26.ensure_config_dir_exists()
        assert var28 is None
        var29 = var26.ensure_config_dir_exists()
        assert var29 is None
        var30 = module0.BaseJSONConfigManager()
        assert var30 is not None
        var31 = {}
        var32 = module0.BaseJSONConfigManager(**var31)
        assert var32 is not None
        var33 = var32.ensure_config_dir_exists()
        assert var33 is None
        var34 = var32.ensure_config_dir_exists()
        assert var34 is None
        var35 = var32.ensure_config_dir_exists()
        assert var35 is None
        var36 = 'K&H94v*%\r'
        var37 = {var36: var36, var36: var36, var36: var36}
        var38 = module0.BaseJSONConfigManager(**var37)
        assert var38 is not None
        var39 = var38.ensure_config_dir_exists()
        assert var39 is None
        var40 = var38.directory(var36)
        assert var40 == './K&H94v*%\r.d'
        var41 = '\tYV'
        var42 = {var41: var41}
        var43 = module0.BaseJSONConfigManager(**var42)
        assert var43 is not None
        var44 = var43.ensure_config_dir_exists()
        assert var44 is None
        var45 = module0.BaseJSONConfigManager()
        assert var45 is not None
        var46 = var45.ensure_config_dir_exists()
        assert var46 is None
        var47 = '\tYV'
        var48 = {var47: var47}
        var49 = module0.BaseJSONConfigManager(**var48)
        assert var49 is not None
        var50 = var49.ensure_config_dir_exists()
        assert var50 is None
        var51 = var49.ensure_config_dir_exists()
        assert var51 is None
        var52 = -1659
        var53 = '$B$&j@RFz#Q>/I9a1k0'
        var54 = var26.get(var52, var53)
    except BaseException:
        pass


def test_case_321():
    try:
        var0 = module0.BaseJSONConfigManager()
        assert var0 is not None
        var1 = var0.ensure_config_dir_exists()
        assert var1 is None
        var2 = ''
        var3 = module0.BaseJSONConfigManager()
        assert var3 is not None
        var4 = var3.get(var2)
        assert var4 is not None
        var5 = module0.BaseJSONConfigManager()
        assert var5 is not None
        var6 = var5.ensure_config_dir_exists()
        assert var6 is None
        var7 = module0.BaseJSONConfigManager()
        assert var7 is not None
        var8 = 'K&H94v*%\r'
        var9 = {var8: var8, var8: var8, var8: var8}
        var10 = module0.BaseJSONConfigManager(**var9)
        assert var10 is not None
        var11 = var10.ensure_config_dir_exists()
        assert var11 is None
        var12 = var10.ensure_config_dir_exists()
        assert var12 is None
        var13 = module0.BaseJSONConfigManager()
        assert var13 is not None
        var14 = '4tZUzJ~Z\\"~sLbn?\tyL\r'
        var15 = None
        var16 = -358
        var17 = 1675.67
        var18 = var15, var16, var17
        var19 = var14, var18, var18
        var20 = var3.directory(var19)
    except BaseException:
        pass


def test_case_322():
    try:
        var0 = {}
        var1 = module0.BaseJSONConfigManager(**var0)
        assert var1 is not None
        var2 = var1.ensure_config_dir_exists()
        assert var2 is None
        var3 = ''
        var4 = module0.BaseJSONConfigManager()
        assert var4 is not None
        var5 = var4.get(var3)
        assert var5 is not None
        var6 = var4.ensure_config_dir_exists()
        assert var6 is None
        var7 = var4.ensure_config_dir_exists()
        assert var7 is None
        var8 = module0.BaseJSONConfigManager()
        assert var8 is not None
        var9 = module0.BaseJSONConfigManager()
        assert var9 is not None
        var10 = 'K&H94v*%\r'
        var11 = {var10: var10, var10: var10, var10: var10}
        var12 = module0.BaseJSONConfigManager(**var11)
        assert var12 is not None
        var13 = var12.ensure_config_dir_exists()
        assert var13 is None
        var14 = var12.ensure_config_dir_exists()
        assert var14 is None
        var15 = ''
        var16 = module0.BaseJSONConfigManager()
        assert var16 is not None
        var17 = var16.get(var15)
        assert var17 is not None
        var18 = module0.BaseJSONConfigManager()
        assert var18 is not None
        var19 = '\tYV'
        var20 = {var19: var19}
        var21 = module0.BaseJSONConfigManager(**var20)
        assert var21 is not None
        var22 = var21.ensure_config_dir_exists()
        assert var22 is None
        var23 = var21.ensure_config_dir_exists()
        assert var23 is None
        var24 = []
        var25 = var9.file_name(var24)
    except BaseException:
        pass


def test_case_323():
    try:
        var0 = {}
        var1 = module0.BaseJSONConfigManager(**var0)
        assert var1 is not None
        var2 = var1.ensure_config_dir_exists()
        assert var2 is None
        var3 = "@^8 YSBOCxv2_Uy'\t"
        var4 = var1.file_name(var3)
        assert var4 == "./@^8 YSBOCxv2_Uy'\t.json"
        var5 = '9'
        var6 = module0.BaseJSONConfigManager()
        assert var6 is not None
        var7 = var6.file_name(var5)
        assert var7 == './9.json'
        var8 = ''
        var9 = module0.BaseJSONConfigManager()
        assert var9 is not None
        var10 = var9.get(var8)
        assert var10 is not None
        var11 = module0.BaseJSONConfigManager()
        assert var11 is not None
        var12 = var11.ensure_config_dir_exists()
        assert var12 is None
        var13 = {var9: var4, var4: var4, var8: var11}
        var14 = var9.get(var13)
    except BaseException:
        pass


def test_case_324():
    try:
        var0 = ''
        var1 = module0.BaseJSONConfigManager()
        assert var1 is not None
        var2 = var1.get(var0)
        assert var2 is not None
        var3 = module0.BaseJSONConfigManager()
        assert var3 is not None
        var4 = var3.ensure_config_dir_exists()
        assert var4 is None
        var5 = ''
        var6 = module0.BaseJSONConfigManager()
        assert var6 is not None
        var7 = var6.get(var5)
        assert var7 is not None
        var8 = module0.BaseJSONConfigManager()
        assert var8 is not None
        var9 = ''
        var10 = module0.BaseJSONConfigManager()
        assert var10 is not None
        var11 = var10.get(var9)
        assert var11 is not None
        var12 = module0.BaseJSONConfigManager()
        assert var12 is not None
        var13 = None
        var14 = {var9}
        var15 = var12.update(var13, var14)
    except BaseException:
        pass


def test_case_325():
    try:
        var0 = ''
        var1 = module0.BaseJSONConfigManager()
        assert var1 is not None
        var2 = var1.get(var0)
        assert var2 is not None
        var3 = ''
        var4 = module0.BaseJSONConfigManager()
        assert var4 is not None
        var5 = var4.get(var3)
        assert var5 is not None
        var6 = var4.ensure_config_dir_exists()
        assert var6 is None
        var7 = module0.BaseJSONConfigManager()
        assert var7 is not None
        var8 = var7.ensure_config_dir_exists()
        assert var8 is None
        var9 = module0.BaseJSONConfigManager()
        assert var9 is not None
        var10 = 'K&H94v*%\r'
        var11 = {var10: var10, var10: var10, var10: var10}
        var12 = module0.BaseJSONConfigManager(**var11)
        assert var12 is not None
        var13 = var12.ensure_config_dir_exists()
        assert var13 is None
        var14 = var12.ensure_config_dir_exists()
        assert var14 is None
        var15 = ''
        var16 = module0.BaseJSONConfigManager()
        assert var16 is not None
        var17 = var16.get(var15)
        assert var17 is not None
        var18 = module0.BaseJSONConfigManager()
        assert var18 is not None
        var19 = var18.ensure_config_dir_exists()
        assert var19 is None
        var20 = {}
        var21 = module0.BaseJSONConfigManager(**var20)
        assert var21 is not None
        var22 = var21.ensure_config_dir_exists()
        assert var22 is None
        var23 = var21.ensure_config_dir_exists()
        assert var23 is None
        var24 = var21.ensure_config_dir_exists()
        assert var24 is None
        var25 = 2448
        var26 = var16.file_name(var25)
    except BaseException:
        pass


def test_case_326():
    try:
        var0 = ''
        var1 = module0.BaseJSONConfigManager()
        assert var1 is not None
        var2 = var1.get(var0)
        assert var2 is not None
        var3 = module0.BaseJSONConfigManager()
        assert var3 is not None
        var4 = ''
        var5 = module0.BaseJSONConfigManager()
        assert var5 is not None
        var6 = var5.get(var4)
        assert var6 is not None
        var7 = module0.BaseJSONConfigManager()
        assert var7 is not None
        var8 = var7.ensure_config_dir_exists()
        assert var8 is None
        var9 = ''
        var10 = module0.BaseJSONConfigManager()
        assert var10 is not None
        var11 = var10.get(var9)
        assert var11 is not None
        var12 = module0.BaseJSONConfigManager()
        assert var12 is not None
        var13 = ''
        var14 = module0.BaseJSONConfigManager()
        assert var14 is not None
        var15 = var14.get(var13)
        assert var15 is not None
        var16 = module0.BaseJSONConfigManager()
        assert var16 is not None
        var17 = ''
        var18 = module0.BaseJSONConfigManager()
        assert var18 is not None
        var19 = var18.get(var17)
        assert var19 is not None
        var20 = module0.BaseJSONConfigManager()
        assert var20 is not None
        var21 = var20.file_name(var17)
        assert var21 == './.json'
        var22 = module0.BaseJSONConfigManager()
        assert var22 is not None
        var23 = 'K&H94v*%\r'
        var24 = {var23: var23, var23: var23, var23: var23}
        var25 = module0.BaseJSONConfigManager(**var24)
        assert var25 is not None
        var26 = var25.ensure_config_dir_exists()
        assert var26 is None
        var27 = var25.ensure_config_dir_exists()
        assert var27 is None
        var28 = ''
        var29 = module0.BaseJSONConfigManager()
        assert var29 is not None
        var30 = var29.get(var28)
        assert var30 is not None
        var31 = var29.ensure_config_dir_exists()
        assert var31 is None
        var32 = var29.ensure_config_dir_exists()
        assert var32 is None
        var33 = var29.ensure_config_dir_exists()
        assert var33 is None
        var34 = ''
        var35 = [var28, var23, var6, var34]
        var36 = None
        var37 = module0.recursive_update(var35, var36)
    except BaseException:
        pass


def test_case_327():
    try:
        var0 = ''
        var1 = module0.BaseJSONConfigManager()
        assert var1 is not None
        var2 = var1.get(var0)
        assert var2 is not None
        var3 = var1.ensure_config_dir_exists()
        assert var3 is None
        var4 = var1.ensure_config_dir_exists()
        assert var4 is None
        var5 = {}
        var6 = module0.BaseJSONConfigManager(**var5)
        assert var6 is not None
        var7 = var6.ensure_config_dir_exists()
        assert var7 is None
        var8 = var6.ensure_config_dir_exists()
        assert var8 is None
        var9 = var6.ensure_config_dir_exists()
        assert var9 is None
        var10 = 'K&H94v*%\r'
        var11 = {var10: var10, var10: var10, var10: var10}
        var12 = module0.BaseJSONConfigManager(**var11)
        assert var12 is not None
        var13 = var12.ensure_config_dir_exists()
        assert var13 is None
        var14 = {}
        var15 = []
        var16 = module0.remove_defaults(var14, var15)
        assert var16 is None
        var17 = '\tYV'
        var18 = {var17: var17}
        var19 = module0.BaseJSONConfigManager(**var18)
        assert var19 is not None
        var20 = var19.ensure_config_dir_exists()
        assert var20 is None
        var21 = {}
        var22 = module0.BaseJSONConfigManager(**var21)
        assert var22 is not None
        var23 = var22.ensure_config_dir_exists()
        assert var23 is None
        var24 = ''
        var25 = module0.BaseJSONConfigManager()
        assert var25 is not None
        var26 = var25.get(var24)
        assert var26 is not None
        var27 = var25.ensure_config_dir_exists()
        assert var27 is None
        var28 = var25.ensure_config_dir_exists()
        assert var28 is None
        var29 = var25.ensure_config_dir_exists()
        assert var29 is None
        var30 = True
        var31 = -2835
        var32 = var19.update(var30, var31)
    except BaseException:
        pass


def test_case_328():
    try:
        var0 = 'Qe'
        var1 = {var0: var0}
        var2 = module0.BaseJSONConfigManager(**var1)
        assert var2 is not None
        var3 = '\tYV'
        var4 = {var3: var3}
        var5 = module0.BaseJSONConfigManager(**var4)
        assert var5 is not None
        var6 = var5.ensure_config_dir_exists()
        assert var6 is None
        var7 = {}
        var8 = module0.BaseJSONConfigManager(**var7)
        assert var8 is not None
        var9 = var8.ensure_config_dir_exists()
        assert var9 is None
        var10 = "@^8 YSBOCxv2_Uy'\t"
        var11 = var8.file_name(var10)
        assert var11 == "./@^8 YSBOCxv2_Uy'\t.json"
        var12 = {}
        var13 = module0.BaseJSONConfigManager(**var12)
        assert var13 is not None
        var14 = var13.ensure_config_dir_exists()
        assert var14 is None
        var15 = var13.ensure_config_dir_exists()
        assert var15 is None
        var16 = var13.ensure_config_dir_exists()
        assert var16 is None
        var17 = ''
        var18 = module0.BaseJSONConfigManager()
        assert var18 is not None
        var19 = var18.get(var17)
        assert var19 is not None
        var20 = var13.ensure_config_dir_exists()
        assert var20 is None
        var21 = {}
        var22 = module0.BaseJSONConfigManager(**var21)
        assert var22 is not None
        var23 = var22.ensure_config_dir_exists()
        assert var23 is None
        var24 = None
        var25 = [var24]
        var26 = b'p\xf8j\xcc\xc9;AU\xda\xefA\x93\xa8s\xb8\xc0\x81\xaa<'
        var27 = var24, var25, var26
        var28 = module0.recursive_update(var10, var27)
    except BaseException:
        pass


def test_case_329():
    try:
        var0 = {}
        var1 = module0.BaseJSONConfigManager(**var0)
        assert var1 is not None
        var2 = var1.ensure_config_dir_exists()
        assert var2 is None
        var3 = var1.ensure_config_dir_exists()
        assert var3 is None
        var4 = var1.ensure_config_dir_exists()
        assert var4 is None
        var5 = ''
        var6 = module0.BaseJSONConfigManager()
        assert var6 is not None
        var7 = var6.get(var5)
        assert var7 is not None
        var8 = var6.ensure_config_dir_exists()
        assert var8 is None
        var9 = var6.ensure_config_dir_exists()
        assert var9 is None
        var10 = '9'
        var11 = module0.BaseJSONConfigManager()
        assert var11 is not None
        var12 = var11.file_name(var10)
        assert var12 == './9.json'
        var13 = {}
        var14 = module0.BaseJSONConfigManager(**var13)
        assert var14 is not None
        var15 = var14.ensure_config_dir_exists()
        assert var15 is None
        var16 = ''
        var17 = module0.BaseJSONConfigManager()
        assert var17 is not None
        var18 = var17.get(var16)
        assert var18 is not None
        var19 = 17
        var20 = b'\x1c\xd8\xfap\x9e\x9c9\x8d\xbf'
        var21 = True
        var22 = var20, var17, var19, var21
        var23 = [var1, var2, var8, var22]
        var24 = var11.set(var19, var23)
    except BaseException:
        pass


def test_case_330():
    try:
        var0 = {}
        var1 = module0.BaseJSONConfigManager(**var0)
        assert var1 is not None
        var2 = var1.ensure_config_dir_exists()
        assert var2 is None
        var3 = var1.ensure_config_dir_exists()
        assert var3 is None
        var4 = var1.ensure_config_dir_exists()
        assert var4 is None
        var5 = ''
        var6 = module0.BaseJSONConfigManager()
        assert var6 is not None
        var7 = var6.get(var5)
        assert var7 is not None
        var8 = '9'
        var9 = module0.BaseJSONConfigManager()
        assert var9 is not None
        var10 = var9.file_name(var8)
        assert var10 == './9.json'
        var11 = ''
        var12 = module0.BaseJSONConfigManager()
        assert var12 is not None
        var13 = var12.get(var11)
        assert var13 is not None
        var14 = module0.BaseJSONConfigManager()
        assert var14 is not None
        var15 = var14.ensure_config_dir_exists()
        assert var15 is None
        var16 = ''
        var17 = module0.BaseJSONConfigManager()
        assert var17 is not None
        var18 = var17.get(var16)
        assert var18 is not None
        var19 = module0.BaseJSONConfigManager()
        assert var19 is not None
        var20 = module0.BaseJSONConfigManager()
        assert var20 is not None
        var21 = var20.ensure_config_dir_exists()
        assert var21 is None
        var22 = ''
        var23 = module0.BaseJSONConfigManager()
        assert var23 is not None
        var24 = var23.get(var22)
        assert var24 is not None
        var25 = module0.BaseJSONConfigManager()
        assert var25 is not None
        var26 = ''
        var27 = module0.BaseJSONConfigManager()
        assert var27 is not None
        var28 = var27.get(var26)
        assert var28 is not None
        var29 = module0.BaseJSONConfigManager()
        assert var29 is not None
        var30 = var29.file_name(var26)
        assert var30 == './.json'
        var31 = ''
        var32 = module0.BaseJSONConfigManager()
        assert var32 is not None
        var33 = var32.get(var31)
        assert var33 is not None
        var34 = module0.BaseJSONConfigManager()
        assert var34 is not None
        var35 = module0.BaseJSONConfigManager()
        assert var35 is not None
        var36 = module0.BaseJSONConfigManager()
        assert var36 is not None
        var37 = 'login.html'
        var38 = '/api/config/%s'
        var39 = module0.BaseJSONConfigManager(**var0)
        assert var39 is not None
        var40 = var39.update(var37, var38)
    except BaseException:
        pass


def test_case_331():
    try:
        var0 = {}
        var1 = module0.BaseJSONConfigManager(**var0)
        assert var1 is not None
        var2 = var1.ensure_config_dir_exists()
        assert var2 is None
        var3 = var1.ensure_config_dir_exists()
        assert var3 is None
        var4 = var1.ensure_config_dir_exists()
        assert var4 is None
        var5 = ''
        var6 = module0.BaseJSONConfigManager()
        assert var6 is not None
        var7 = var6.get(var5)
        assert var7 is not None
        var8 = module0.BaseJSONConfigManager()
        assert var8 is not None
        var9 = 'K&H94v*%\r'
        var10 = {var9: var9, var9: var9, var9: var9}
        var11 = module0.BaseJSONConfigManager(**var10)
        assert var11 is not None
        var12 = var11.ensure_config_dir_exists()
        assert var12 is None
        var13 = var11.ensure_config_dir_exists()
        assert var13 is None
        var14 = {}
        var15 = module0.BaseJSONConfigManager(**var14)
        assert var15 is not None
        var16 = var15.ensure_config_dir_exists()
        assert var16 is None
        var17 = var15.ensure_config_dir_exists()
        assert var17 is None
        var18 = var15.ensure_config_dir_exists()
        assert var18 is None
        var19 = ''
        var20 = module0.BaseJSONConfigManager()
        assert var20 is not None
        var21 = var20.get(var19)
        assert var21 is not None
        var22 = var15.ensure_config_dir_exists()
        assert var22 is None
        var23 = {}
        var24 = module0.BaseJSONConfigManager(**var23)
        assert var24 is not None
        var25 = var24.ensure_config_dir_exists()
        assert var25 is None
        var26 = ''
        var27 = module0.BaseJSONConfigManager()
        assert var27 is not None
        var28 = var27.get(var26)
        assert var28 is not None
        var29 = module0.BaseJSONConfigManager()
        assert var29 is not None
        var30 = var29.ensure_config_dir_exists()
        assert var30 is None
        var31 = module0.BaseJSONConfigManager()
        assert var31 is not None
        var32 = ''
        var33 = module0.BaseJSONConfigManager()
        assert var33 is not None
        var34 = var33.get(var32)
        assert var34 is not None
        var35 = module0.BaseJSONConfigManager()
        assert var35 is not None
        var36 = var35.ensure_config_dir_exists()
        assert var36 is None
        var37 = ''
        var38 = module0.BaseJSONConfigManager()
        assert var38 is not None
        var39 = var38.get(var37)
        assert var39 is not None
        var40 = module0.BaseJSONConfigManager()
        assert var40 is not None
        var41 = '\tYV'
        var42 = {var41: var41}
        var43 = module0.BaseJSONConfigManager(**var42)
        assert var43 is not None
        var44 = var43.ensure_config_dir_exists()
        assert var44 is None
        var45 = var43.ensure_config_dir_exists()
        assert var45 is None
        var46 = b'\x9e\xba\x84|\xba4T\xd4\x80\xb0\xab\xef3O\x03\x03n\xefi\x93'
        var47 = var11.file_name(var46)
    except BaseException:
        pass


def test_case_332():
    try:
        var0 = ''
        var1 = module0.BaseJSONConfigManager()
        assert var1 is not None
        var2 = var1.get(var0)
        assert var2 is not None
        var3 = module0.BaseJSONConfigManager()
        assert var3 is not None
        var4 = ''
        var5 = module0.BaseJSONConfigManager()
        assert var5 is not None
        var6 = var5.get(var4)
        assert var6 is not None
        var7 = module0.BaseJSONConfigManager()
        assert var7 is not None
        var8 = var7.ensure_config_dir_exists()
        assert var8 is None
        var9 = ''
        var10 = module0.BaseJSONConfigManager()
        assert var10 is not None
        var11 = var10.get(var9)
        assert var11 is not None
        var12 = module0.BaseJSONConfigManager()
        assert var12 is not None
        var13 = module0.BaseJSONConfigManager()
        assert var13 is not None
        var14 = 'K&H94v*%\r'
        var15 = {var14: var14, var14: var14, var14: var14}
        var16 = module0.BaseJSONConfigManager(**var15)
        assert var16 is not None
        var17 = var16.ensure_config_dir_exists()
        assert var17 is None
        var18 = var16.ensure_config_dir_exists()
        assert var18 is None
        var19 = ''
        var20 = module0.BaseJSONConfigManager()
        assert var20 is not None
        var21 = var20.get(var19)
        assert var21 is not None
        var22 = var20.ensure_config_dir_exists()
        assert var22 is None
        var23 = ''
        var24 = module0.BaseJSONConfigManager()
        assert var24 is not None
        var25 = var24.get(var23)
        assert var25 is not None
        var26 = module0.BaseJSONConfigManager()
        assert var26 is not None
        var27 = var26.ensure_config_dir_exists()
        assert var27 is None
        var28 = {}
        var29 = module0.BaseJSONConfigManager(**var28)
        assert var29 is not None
        var30 = var29.ensure_config_dir_exists()
        assert var30 is None
        var31 = var29.ensure_config_dir_exists()
        assert var31 is None
        var32 = '\tYV'
        var33 = {var32: var32}
        var34 = module0.BaseJSONConfigManager(**var33)
        assert var34 is not None
        var35 = var34.ensure_config_dir_exists()
        assert var35 is None
        var36 = 'K&H94v*%\r'
        var37 = {var36: var36, var36: var36, var36: var36}
        var38 = module0.BaseJSONConfigManager(**var37)
        assert var38 is not None
        var39 = var38.ensure_config_dir_exists()
        assert var39 is None
        var40 = module0.BaseJSONConfigManager()
        assert var40 is not None
        var41 = var40.ensure_config_dir_exists()
        assert var41 is None
        var42 = None
        var43 = [var17, var3, var18]
        var44 = ()
        var45 = var43, var34, var44
        var46 = module0.recursive_update(var42, var45)
    except BaseException:
        pass


def test_case_333():
    try:
        var0 = {}
        var1 = module0.BaseJSONConfigManager(**var0)
        assert var1 is not None
        var2 = var1.ensure_config_dir_exists()
        assert var2 is None
        var3 = ''
        var4 = module0.BaseJSONConfigManager()
        assert var4 is not None
        var5 = var4.get(var3)
        assert var5 is not None
        var6 = module0.BaseJSONConfigManager()
        assert var6 is not None
        var7 = var6.ensure_config_dir_exists()
        assert var7 is None
        var8 = module0.BaseJSONConfigManager()
        assert var8 is not None
        var9 = ''
        var10 = module0.BaseJSONConfigManager()
        assert var10 is not None
        var11 = var10.get(var9)
        assert var11 is not None
        var12 = {}
        var13 = module0.BaseJSONConfigManager(**var12)
        assert var13 is not None
        var14 = var13.ensure_config_dir_exists()
        assert var14 is None
        var15 = "@^8 YSBOCxv2_Uy'\t"
        var16 = var13.file_name(var15)
        assert var16 == "./@^8 YSBOCxv2_Uy'\t.json"
        var17 = module0.BaseJSONConfigManager()
        assert var17 is not None
        var18 = 'K&H94v*%\r'
        var19 = {var18: var18, var18: var18, var18: var18}
        var20 = module0.BaseJSONConfigManager(**var19)
        assert var20 is not None
        var21 = var20.ensure_config_dir_exists()
        assert var21 is None
        var22 = var20.ensure_config_dir_exists()
        assert var22 is None
        var23 = ''
        var24 = module0.BaseJSONConfigManager()
        assert var24 is not None
        var25 = var24.get(var23)
        assert var25 is not None
        var26 = module0.BaseJSONConfigManager()
        assert var26 is not None
        var27 = module0.BaseJSONConfigManager()
        assert var27 is not None
        var28 = module0.BaseJSONConfigManager()
        assert var28 is not None
        var29 = ''
        var30 = module0.BaseJSONConfigManager()
        assert var30 is not None
        var31 = var30.get(var29)
        assert var31 is not None
        var32 = var30.ensure_config_dir_exists()
        assert var32 is None
        var33 = var30.ensure_config_dir_exists()
        assert var33 is None
        var34 = module0.BaseJSONConfigManager()
        assert var34 is not None
        var35 = '\tYV'
        var36 = {var35: var35}
        var37 = module0.BaseJSONConfigManager(**var36)
        assert var37 is not None
        var38 = var37.ensure_config_dir_exists()
        assert var38 is None
        var39 = var37.ensure_config_dir_exists()
        assert var39 is None
        var40 = '9'
        var41 = module0.BaseJSONConfigManager()
        assert var41 is not None
        var42 = var41.file_name(var40)
        assert var42 == './9.json'
        var43 = ''
        var44 = module0.BaseJSONConfigManager()
        assert var44 is not None
        var45 = var44.get(var43)
        assert var45 is not None
        var46 = var44.ensure_config_dir_exists()
        assert var46 is None
        var47 = var44.ensure_config_dir_exists()
        assert var47 is None
        var48 = -636
        var49 = b'\xf6'
        var50 = module0.remove_defaults(var48, var49)
    except BaseException:
        pass


def test_case_334():
    try:
        var0 = '\tYV'
        var1 = {var0: var0}
        var2 = module0.BaseJSONConfigManager(**var1)
        assert var2 is not None
        var3 = var2.ensure_config_dir_exists()
        assert var3 is None
        var4 = var2.ensure_config_dir_exists()
        assert var4 is None
        var5 = 'Qe'
        var6 = {var5: var5}
        var7 = module0.BaseJSONConfigManager(**var6)
        assert var7 is not None
        var8 = '9'
        var9 = module0.BaseJSONConfigManager()
        assert var9 is not None
        var10 = var9.file_name(var8)
        assert var10 == './9.json'
        var11 = module0.BaseJSONConfigManager()
        assert var11 is not None
        var12 = 'K&H94v*%\r'
        var13 = {var12: var12, var12: var12, var12: var12}
        var14 = module0.BaseJSONConfigManager(**var13)
        assert var14 is not None
        var15 = var14.ensure_config_dir_exists()
        assert var15 is None
        var16 = var14.ensure_config_dir_exists()
        assert var16 is None
        var17 = {}
        var18 = module0.BaseJSONConfigManager(**var17)
        assert var18 is not None
        var19 = var18.ensure_config_dir_exists()
        assert var19 is None
        var20 = ''
        var21 = module0.BaseJSONConfigManager()
        assert var21 is not None
        var22 = var21.get(var20)
        assert var22 is not None
        var23 = module0.BaseJSONConfigManager()
        assert var23 is not None
        var24 = var23.ensure_config_dir_exists()
        assert var24 is None
        var25 = module0.BaseJSONConfigManager()
        assert var25 is not None
        var26 = '\tYV'
        var27 = {var26: var26}
        var28 = module0.BaseJSONConfigManager(**var27)
        assert var28 is not None
        var29 = var28.ensure_config_dir_exists()
        assert var29 is None
        var30 = None
        var31 = None
        var32 = module0.remove_defaults(var30, var31)
    except BaseException:
        pass


def test_case_335():
    try:
        var0 = {}
        var1 = module0.BaseJSONConfigManager(**var0)
        assert var1 is not None
        var2 = var1.ensure_config_dir_exists()
        assert var2 is None
        var3 = var1.ensure_config_dir_exists()
        assert var3 is None
        var4 = var1.ensure_config_dir_exists()
        assert var4 is None
        var5 = ''
        var6 = module0.BaseJSONConfigManager()
        assert var6 is not None
        var7 = var6.get(var5)
        assert var7 is not None
        var8 = var1.ensure_config_dir_exists()
        assert var8 is None
        var9 = {}
        var10 = module0.BaseJSONConfigManager(**var9)
        assert var10 is not None
        var11 = var10.ensure_config_dir_exists()
        assert var11 is None
        var12 = "@^8 YSBOCxv2_Uy'\t"
        var13 = var10.file_name(var12)
        assert var13 == "./@^8 YSBOCxv2_Uy'\t.json"
        var14 = {}
        var15 = module0.BaseJSONConfigManager(**var14)
        assert var15 is not None
        var16 = var15.ensure_config_dir_exists()
        assert var16 is None
        var17 = ''
        var18 = module0.BaseJSONConfigManager()
        assert var18 is not None
        var19 = var18.get(var17)
        assert var19 is not None
        var20 = module0.BaseJSONConfigManager()
        assert var20 is not None
        var21 = var20.ensure_config_dir_exists()
        assert var21 is None
        var22 = module0.BaseJSONConfigManager()
        assert var22 is not None
        var23 = ''
        var24 = module0.BaseJSONConfigManager()
        assert var24 is not None
        var25 = var24.get(var23)
        assert var25 is not None
        var26 = module0.BaseJSONConfigManager()
        assert var26 is not None
        var27 = ''
        var28 = module0.BaseJSONConfigManager()
        assert var28 is not None
        var29 = var28.get(var27)
        assert var29 is not None
        var30 = module0.BaseJSONConfigManager()
        assert var30 is not None
        var31 = var30.file_name(var27)
        assert var31 == './.json'
        var32 = b'\xec\xe7\xe6\xe7\x1d\x15\xee:\xc4}\x88^\x9a\xc86'
        var33 = var22.get(var32)
    except BaseException:
        pass


def test_case_336():
    try:
        var0 = 'Qe'
        var1 = {var0: var0}
        var2 = module0.BaseJSONConfigManager(**var1)
        assert var2 is not None
        var3 = ()
        var4 = var2.directory(var3)
    except BaseException:
        pass


def test_case_337():
    try:
        var0 = ''
        var1 = module0.BaseJSONConfigManager()
        assert var1 is not None
        var2 = var1.get(var0)
        assert var2 is not None
        var3 = module0.BaseJSONConfigManager()
        assert var3 is not None
        var4 = ''
        var5 = module0.BaseJSONConfigManager()
        assert var5 is not None
        var6 = var5.get(var4)
        assert var6 is not None
        var7 = module0.BaseJSONConfigManager()
        assert var7 is not None
        var8 = var7.file_name(var4)
        assert var8 == './.json'
        var9 = '\tYV'
        var10 = {var9: var9}
        var11 = module0.BaseJSONConfigManager(**var10)
        assert var11 is not None
        var12 = var11.ensure_config_dir_exists()
        assert var12 is None
        var13 = var11.ensure_config_dir_exists()
        assert var13 is None
        var14 = None
        var15 = var3.directory(var14)
    except BaseException:
        pass


def test_case_338():
    try:
        var0 = {}
        var1 = module0.BaseJSONConfigManager(**var0)
        assert var1 is not None
        var2 = var1.ensure_config_dir_exists()
        assert var2 is None
        var3 = var1.ensure_config_dir_exists()
        assert var3 is None
        var4 = var1.ensure_config_dir_exists()
        assert var4 is None
        var5 = ''
        var6 = module0.BaseJSONConfigManager()
        assert var6 is not None
        var7 = var6.get(var5)
        assert var7 is not None
        var8 = var1.ensure_config_dir_exists()
        assert var8 is None
        var9 = module0.BaseJSONConfigManager()
        assert var9 is not None
        var10 = 'K&H94v*%\r'
        var11 = {var10: var10, var10: var10, var10: var10}
        var12 = module0.BaseJSONConfigManager(**var11)
        assert var12 is not None
        var13 = var12.ensure_config_dir_exists()
        assert var13 is None
        var14 = var12.ensure_config_dir_exists()
        assert var14 is None
        var15 = ''
        var16 = module0.BaseJSONConfigManager()
        assert var16 is not None
        var17 = var16.get(var15)
        assert var17 is not None
        var18 = {}
        var19 = module0.BaseJSONConfigManager(**var18)
        assert var19 is not None
        var20 = var19.ensure_config_dir_exists()
        assert var20 is None
        var21 = "@^8 YSBOCxv2_Uy'\t"
        var22 = var19.file_name(var21)
        assert var22 == "./@^8 YSBOCxv2_Uy'\t.json"
        var23 = module0.BaseJSONConfigManager()
        assert var23 is not None
        var24 = {}
        var25 = module0.BaseJSONConfigManager(**var24)
        assert var25 is not None
        var26 = var25.ensure_config_dir_exists()
        assert var26 is None
        var27 = ''
        var28 = module0.BaseJSONConfigManager()
        assert var28 is not None
        var29 = var28.get(var27)
        assert var29 is not None
        var30 = module0.BaseJSONConfigManager()
        assert var30 is not None
        var31 = '\tYV'
        var32 = {var31: var31}
        var33 = module0.BaseJSONConfigManager(**var32)
        assert var33 is not None
        var34 = var33.ensure_config_dir_exists()
        assert var34 is None
        var35 = var33.ensure_config_dir_exists()
        assert var35 is None
        var36 = False
        var37 = 2642
        var38 = module0.recursive_update(var36, var37)
    except BaseException:
        pass


def test_case_339():
    try:
        var0 = 'Qe'
        var1 = {var0: var0}
        var2 = module0.BaseJSONConfigManager(**var1)
        assert var2 is not None
        var3 = '\tYV'
        var4 = {var3: var3}
        var5 = module0.BaseJSONConfigManager(**var4)
        assert var5 is not None
        var6 = var5.ensure_config_dir_exists()
        assert var6 is None
        var7 = var5.ensure_config_dir_exists()
        assert var7 is None
        var8 = {}
        var9 = module0.BaseJSONConfigManager(**var8)
        assert var9 is not None
        var10 = var9.ensure_config_dir_exists()
        assert var10 is None
        var11 = var9.ensure_config_dir_exists()
        assert var11 is None
        var12 = var9.ensure_config_dir_exists()
        assert var12 is None
        var13 = ''
        var14 = module0.BaseJSONConfigManager()
        assert var14 is not None
        var15 = var14.get(var13)
        assert var15 is not None
        var16 = var14.ensure_config_dir_exists()
        assert var16 is None
        var17 = var14.ensure_config_dir_exists()
        assert var17 is None
        var18 = var14.ensure_config_dir_exists()
        assert var18 is None
        var19 = ''
        var20 = module0.BaseJSONConfigManager()
        assert var20 is not None
        var21 = var20.get(var19)
        assert var21 is not None
        var22 = var20.ensure_config_dir_exists()
        assert var22 is None
        var23 = '\tYV'
        var24 = {var23: var23}
        var25 = module0.BaseJSONConfigManager(**var24)
        assert var25 is not None
        var26 = var25.ensure_config_dir_exists()
        assert var26 is None
        var27 = {}
        var28 = module0.BaseJSONConfigManager(**var27)
        assert var28 is not None
        var29 = var28.ensure_config_dir_exists()
        assert var29 is None
        var30 = var28.ensure_config_dir_exists()
        assert var30 is None
        var31 = 'K&H94v*%\r'
        var32 = {var31: var31, var31: var31, var31: var31}
        var33 = module0.BaseJSONConfigManager(**var32)
        assert var33 is not None
        var34 = var33.ensure_config_dir_exists()
        assert var34 is None
        var35 = var33.directory(var31)
        assert var35 == './K&H94v*%\r.d'
        var36 = 'K&H94v*%\r'
        var37 = {var36: var36, var36: var36, var36: var36}
        var38 = module0.BaseJSONConfigManager(**var37)
        assert var38 is not None
        var39 = var38.ensure_config_dir_exists()
        assert var39 is None
        var40 = {var6, var11, var20}
        var41 = var40,
        var42 = var33.file_name(var41)
    except BaseException:
        pass


def test_case_340():
    try:
        var0 = 'K&H94v*%\r'
        var1 = {var0: var0, var0: var0, var0: var0}
        var2 = module0.BaseJSONConfigManager(**var1)
        assert var2 is not None
        var3 = var2.ensure_config_dir_exists()
        assert var3 is None
        var4 = {}
        var5 = module0.BaseJSONConfigManager(**var4)
        assert var5 is not None
        var6 = var5.ensure_config_dir_exists()
        assert var6 is None
        var7 = var5.ensure_config_dir_exists()
        assert var7 is None
        var8 = False
        var9 = module0.remove_defaults(var8, var5)
    except BaseException:
        pass


def test_case_341():
    try:
        var0 = 'K&H94v*%\r'
        var1 = {var0: var0, var0: var0, var0: var0}
        var2 = module0.BaseJSONConfigManager(**var1)
        assert var2 is not None
        var3 = var2.ensure_config_dir_exists()
        assert var3 is None
        var4 = {}
        var5 = []
        var6 = module0.remove_defaults(var4, var5)
        assert var6 is None
        var7 = ''
        var8 = module0.BaseJSONConfigManager()
        assert var8 is not None
        var9 = var8.get(var7)
        assert var9 is not None
        var10 = var8.ensure_config_dir_exists()
        assert var10 is None
        var11 = ''
        var12 = module0.BaseJSONConfigManager()
        assert var12 is not None
        var13 = var12.get(var11)
        assert var13 is not None
        var14 = module0.BaseJSONConfigManager()
        assert var14 is not None
        var15 = ''
        var16 = module0.BaseJSONConfigManager()
        assert var16 is not None
        var17 = var16.get(var15)
        assert var17 is not None
        var18 = module0.BaseJSONConfigManager()
        assert var18 is not None
        var19 = var18.file_name(var15)
        assert var19 == './.json'
        var20 = {}
        var21 = module0.BaseJSONConfigManager(**var20)
        assert var21 is not None
        var22 = var21.ensure_config_dir_exists()
        assert var22 is None
        var23 = ''
        var24 = module0.BaseJSONConfigManager()
        assert var24 is not None
        var25 = var24.get(var23)
        assert var25 is not None
        var26 = module0.BaseJSONConfigManager()
        assert var26 is not None
        var27 = var26.ensure_config_dir_exists()
        assert var27 is None
        var28 = ''
        var29 = module0.BaseJSONConfigManager()
        assert var29 is not None
        var30 = var29.get(var28)
        assert var30 is not None
        var31 = module0.BaseJSONConfigManager()
        assert var31 is not None
        var32 = ''
        var33 = module0.BaseJSONConfigManager()
        assert var33 is not None
        var34 = var33.get(var32)
        assert var34 is not None
        var35 = var33.ensure_config_dir_exists()
        assert var35 is None
        var36 = var33.ensure_config_dir_exists()
        assert var36 is None
        var37 = var33.ensure_config_dir_exists()
        assert var37 is None
        var38 = ''
        var39 = module0.BaseJSONConfigManager()
        assert var39 is not None
        var40 = var39.get(var38)
        assert var40 is not None
        var41 = var39.ensure_config_dir_exists()
        assert var41 is None
        var42 = var39.ensure_config_dir_exists()
        assert var42 is None
        var43 = 'Qe'
        var44 = {var43: var43}
        var45 = module0.BaseJSONConfigManager(**var44)
        assert var45 is not None
        var46 = 'K&H94v*%\r'
        var47 = {var46: var46, var46: var46, var46: var46}
        var48 = module0.BaseJSONConfigManager(**var47)
        assert var48 is not None
        var49 = var48.ensure_config_dir_exists()
        assert var49 is None
        var50 = var8.directory(var14)
    except BaseException:
        pass


def test_case_342():
    try:
        var0 = ''
        var1 = module0.BaseJSONConfigManager()
        assert var1 is not None
        var2 = var1.get(var0)
        assert var2 is not None
        var3 = module0.BaseJSONConfigManager()
        assert var3 is not None
        var4 = var3.ensure_config_dir_exists()
        assert var4 is None
        var5 = ''
        var6 = module0.BaseJSONConfigManager()
        assert var6 is not None
        var7 = var6.get(var5)
        assert var7 is not None
        var8 = module0.BaseJSONConfigManager()
        assert var8 is not None
        var9 = module0.BaseJSONConfigManager()
        assert var9 is not None
        var10 = var9.ensure_config_dir_exists()
        assert var10 is None
        var11 = '9'
        var12 = module0.BaseJSONConfigManager()
        assert var12 is not None
        var13 = var12.file_name(var11)
        assert var13 == './9.json'
        var14 = '\tYV'
        var15 = {var14: var14}
        var16 = module0.BaseJSONConfigManager(**var15)
        assert var16 is not None
        var17 = var16.ensure_config_dir_exists()
        assert var17 is None
        var18 = var16.ensure_config_dir_exists()
        assert var18 is None
        var19 = [var17, var4, var17]
        var20 = module0.remove_defaults(var19, var5)
    except BaseException:
        pass


def test_case_343():
    try:
        var0 = ''
        var1 = module0.BaseJSONConfigManager()
        assert var1 is not None
        var2 = var1.get(var0)
        assert var2 is not None
        var3 = var1.ensure_config_dir_exists()
        assert var3 is None
        var4 = {}
        var5 = module0.BaseJSONConfigManager(**var4)
        assert var5 is not None
        var6 = var5.ensure_config_dir_exists()
        assert var6 is None
        var7 = var5.ensure_config_dir_exists()
        assert var7 is None
        var8 = var5.ensure_config_dir_exists()
        assert var8 is None
        var9 = ''
        var10 = module0.BaseJSONConfigManager()
        assert var10 is not None
        var11 = var10.get(var9)
        assert var11 is not None
        var12 = var5.ensure_config_dir_exists()
        assert var12 is None
        var13 = 'K&H94v*%\r'
        var14 = {var13: var13, var13: var13, var13: var13}
        var15 = module0.BaseJSONConfigManager(**var14)
        assert var15 is not None
        var16 = var15.ensure_config_dir_exists()
        assert var16 is None
        var17 = var15.directory(var13)
        assert var17 == './K&H94v*%\r.d'
        var18 = module0.BaseJSONConfigManager()
        assert var18 is not None
        var19 = ''
        var20 = module0.BaseJSONConfigManager()
        assert var20 is not None
        var21 = var20.get(var19)
        assert var21 is not None
        var22 = module0.BaseJSONConfigManager()
        assert var22 is not None
        var23 = ''
        var24 = module0.BaseJSONConfigManager()
        assert var24 is not None
        var25 = var24.get(var23)
        assert var25 is not None
        var26 = var24.ensure_config_dir_exists()
        assert var26 is None
        var27 = var24.ensure_config_dir_exists()
        assert var27 is None
        var28 = var24.ensure_config_dir_exists()
        assert var28 is None
        var29 = 'K&H94v*%\r'
        var30 = {var29: var29, var29: var29, var29: var29}
        var31 = module0.BaseJSONConfigManager(**var30)
        assert var31 is not None
        var32 = var31.ensure_config_dir_exists()
        assert var32 is None
        var33 = ''
        var34 = module0.BaseJSONConfigManager()
        assert var34 is not None
        var35 = var34.get(var33)
        assert var35 is not None
        var36 = module0.BaseJSONConfigManager()
        assert var36 is not None
        var37 = {var34: var36, var33: var35, var34: var33}
        var38 = var34.get(var33, var37)
        assert var38 is not None
        var39 = ''
        var40 = module0.BaseJSONConfigManager()
        assert var40 is not None
        var41 = var40.get(var39)
        assert var41 is not None
        var42 = module0.BaseJSONConfigManager()
        assert var42 is not None
        var43 = module0.BaseJSONConfigManager()
        assert var43 is not None
        var44 = module0.BaseJSONConfigManager()
        assert var44 is not None
        var45 = ''
        var46 = module0.BaseJSONConfigManager()
        assert var46 is not None
        var47 = var46.get(var45)
        assert var47 is not None
        var48 = module0.BaseJSONConfigManager()
        assert var48 is not None
        var49 = var48.ensure_config_dir_exists()
        assert var49 is None
        var50 = ''
        var51 = module0.BaseJSONConfigManager()
        assert var51 is not None
        var52 = var51.get(var50)
        assert var52 is not None
        var53 = module0.BaseJSONConfigManager()
        assert var53 is not None
        var54 = None
        var55 = 17
        var56 = var54, var37, var55
        var57 = {var32, var56}
    except BaseException:
        pass


def test_case_344():
    try:
        var0 = {}
        var1 = module0.BaseJSONConfigManager(**var0)
        assert var1 is not None
        var2 = var1.ensure_config_dir_exists()
        assert var2 is None
        var3 = {}
        var4 = module0.BaseJSONConfigManager(**var3)
        assert var4 is not None
        var5 = var4.ensure_config_dir_exists()
        assert var5 is None
        var6 = var4.ensure_config_dir_exists()
        assert var6 is None
        var7 = var4.ensure_config_dir_exists()
        assert var7 is None
        var8 = ''
        var9 = module0.BaseJSONConfigManager()
        assert var9 is not None
        var10 = var9.get(var8)
        assert var10 is not None
        var11 = var4.ensure_config_dir_exists()
        assert var11 is None
        var12 = module0.BaseJSONConfigManager()
        assert var12 is not None
        var13 = 'K&H94v*%\r'
        var14 = {var13: var13, var13: var13, var13: var13}
        var15 = module0.BaseJSONConfigManager(**var14)
        assert var15 is not None
        var16 = var15.ensure_config_dir_exists()
        assert var16 is None
        var17 = var15.ensure_config_dir_exists()
        assert var17 is None
        var18 = {}
        var19 = module0.BaseJSONConfigManager(**var18)
        assert var19 is not None
        var20 = ''
        var21 = module0.BaseJSONConfigManager()
        assert var21 is not None
        var22 = var21.get(var20)
        assert var22 is not None
        var23 = module0.BaseJSONConfigManager()
        assert var23 is not None
        var24 = var23.ensure_config_dir_exists()
        assert var24 is None
        var25 = '9'
        var26 = module0.BaseJSONConfigManager()
        assert var26 is not None
        var27 = var26.file_name(var25)
        assert var27 == './9.json'
        var28 = ''
        var29 = module0.BaseJSONConfigManager()
        assert var29 is not None
        var30 = var29.get(var28)
        assert var30 is not None
        var31 = module0.BaseJSONConfigManager()
        assert var31 is not None
        var32 = module0.BaseJSONConfigManager()
        assert var32 is not None
        var33 = module0.BaseJSONConfigManager()
        assert var33 is not None
        var34 = ''
        var35 = module0.BaseJSONConfigManager()
        assert var35 is not None
        var36 = var35.get(var34)
        assert var36 is not None
        var37 = 'K&H94v*%\r'
        var38 = {var37: var37, var37: var37, var37: var37}
        var39 = module0.BaseJSONConfigManager(**var38)
        assert var39 is not None
        var40 = var39.ensure_config_dir_exists()
        assert var40 is None
        var41 = {}
        var42 = []
        var43 = module0.remove_defaults(var41, var42)
        assert var43 is None
        var44 = {}
        var45 = module0.BaseJSONConfigManager(**var44)
        assert var45 is not None
        var46 = var45.ensure_config_dir_exists()
        assert var46 is None
        var47 = var45.ensure_config_dir_exists()
        assert var47 is None
        var48 = var45.ensure_config_dir_exists()
        assert var48 is None
        var49 = {var10, var25, var10}
    except BaseException:
        pass


def test_case_345():
    try:
        var0 = module0.BaseJSONConfigManager()
        assert var0 is not None
        var1 = {}
        var2 = module0.BaseJSONConfigManager(**var1)
        assert var2 is not None
        var3 = var2.ensure_config_dir_exists()
        assert var3 is None
        var4 = var2.ensure_config_dir_exists()
        assert var4 is None
        var5 = var2.ensure_config_dir_exists()
        assert var5 is None
        var6 = ''
        var7 = module0.BaseJSONConfigManager()
        assert var7 is not None
        var8 = var7.get(var6)
        assert var8 is not None
        var9 = var2.ensure_config_dir_exists()
        assert var9 is None
        var10 = 'K&H94v*%\r'
        var11 = {var10: var10, var10: var10, var10: var10}
        var12 = module0.BaseJSONConfigManager(**var11)
        assert var12 is not None
        var13 = var12.ensure_config_dir_exists()
        assert var13 is None
        var14 = 'K&H94v*%\r'
        var15 = {var14: var14, var14: var14, var14: var14}
        var16 = module0.BaseJSONConfigManager(**var15)
        assert var16 is not None
        var17 = var16.ensure_config_dir_exists()
        assert var17 is None
        var18 = var16.directory(var14)
        assert var18 == './K&H94v*%\r.d'
        var19 = 'K&H94v*%\r'
        var20 = {var19: var19, var19: var19, var19: var19}
        var21 = module0.BaseJSONConfigManager(**var20)
        assert var21 is not None
        var22 = var21.ensure_config_dir_exists()
        assert var22 is None
        var23 = {}
        var24 = []
        var25 = module0.remove_defaults(var23, var24)
        assert var25 is None
        var26 = -1231.848
        var27 = var2.directory(var26)
    except BaseException:
        pass


def test_case_346():
    try:
        var0 = 'K&H94v*%\r'
        var1 = {var0: var0, var0: var0, var0: var0}
        var2 = module0.BaseJSONConfigManager(**var1)
        assert var2 is not None
        var3 = var2.ensure_config_dir_exists()
        assert var3 is None
        var4 = var2.directory(var0)
        assert var4 == './K&H94v*%\r.d'
        var5 = module0.BaseJSONConfigManager()
        assert var5 is not None
        var6 = var5.ensure_config_dir_exists()
        assert var6 is None
        var7 = ''
        var8 = module0.BaseJSONConfigManager()
        assert var8 is not None
        var9 = var8.get(var7)
        assert var9 is not None
        var10 = var8.ensure_config_dir_exists()
        assert var10 is None
        var11 = var8.ensure_config_dir_exists()
        assert var11 is None
        var12 = var8.ensure_config_dir_exists()
        assert var12 is None
        var13 = ''
        var14 = module0.BaseJSONConfigManager()
        assert var14 is not None
        var15 = var14.get(var13)
        assert var15 is not None
        var16 = module0.BaseJSONConfigManager()
        assert var16 is not None
        var17 = '\tYV'
        var18 = {var17: var17}
        var19 = module0.BaseJSONConfigManager(**var18)
        assert var19 is not None
        var20 = var19.ensure_config_dir_exists()
        assert var20 is None
        var21 = var19.ensure_config_dir_exists()
        assert var21 is None
        var22 = '9'
        var23 = module0.BaseJSONConfigManager()
        assert var23 is not None
        var24 = var23.file_name(var22)
        assert var24 == './9.json'
        var25 = module0.BaseJSONConfigManager()
        assert var25 is not None
        var26 = {}
        var27 = module0.BaseJSONConfigManager(**var26)
        assert var27 is not None
        var28 = {}
        var29 = module0.BaseJSONConfigManager(**var28)
        assert var29 is not None
        var30 = var29.ensure_config_dir_exists()
        assert var30 is None
        var31 = var29.ensure_config_dir_exists()
        assert var31 is None
        var32 = var29.ensure_config_dir_exists()
        assert var32 is None
        var33 = b''
        var34 = var33,
        var35 = -1600
        var36 = {var35, var9}
    except BaseException:
        pass


def test_case_347():
    try:
        var0 = ''
        var1 = module0.BaseJSONConfigManager()
        assert var1 is not None
        var2 = var1.get(var0)
        assert var2 is not None
        var3 = var1.ensure_config_dir_exists()
        assert var3 is None
        var4 = -144
        var5 = module0.remove_defaults(var4, var0)
    except BaseException:
        pass


def test_case_348():
    try:
        var0 = 'K&H94v*%\r'
        var1 = {var0: var0, var0: var0, var0: var0}
        var2 = module0.BaseJSONConfigManager(**var1)
        assert var2 is not None
        var3 = var2.ensure_config_dir_exists()
        assert var3 is None
        var4 = module0.BaseJSONConfigManager()
        assert var4 is not None
        var5 = 'K&H94v*%\r'
        var6 = {var5: var5, var5: var5, var5: var5}
        var7 = module0.BaseJSONConfigManager(**var6)
        assert var7 is not None
        var8 = var7.ensure_config_dir_exists()
        assert var8 is None
        var9 = var7.ensure_config_dir_exists()
        assert var9 is None
        var10 = ''
        var11 = module0.BaseJSONConfigManager()
        assert var11 is not None
        var12 = var11.get(var10)
        assert var12 is not None
        var13 = var11.ensure_config_dir_exists()
        assert var13 is None
        var14 = var11.ensure_config_dir_exists()
        assert var14 is None
        var15 = module0.BaseJSONConfigManager()
        assert var15 is not None
        var16 = 1359.061392
        var17 = var7.file_name(var16)
    except BaseException:
        pass


def test_case_349():
    try:
        var0 = {}
        var1 = module0.BaseJSONConfigManager(**var0)
        assert var1 is not None
        var2 = b'h\x15\x9f\xf7\xd3dR\x8c\x1bs21\x14H\xcf;\xf2/\x1c\xf6'
        var3 = None
        var4 = var1.get(var2, var3)
    except BaseException:
        pass


def test_case_350():
    try:
        var0 = ''
        var1 = module0.BaseJSONConfigManager()
        assert var1 is not None
        var2 = var1.get(var0)
        assert var2 is not None
        var3 = var1.ensure_config_dir_exists()
        assert var3 is None
        var4 = ''
        var5 = module0.BaseJSONConfigManager()
        assert var5 is not None
        var6 = var5.get(var4)
        assert var6 is not None
        var7 = module0.BaseJSONConfigManager()
        assert var7 is not None
        var8 = var7.ensure_config_dir_exists()
        assert var8 is None
        var9 = var5.directory(var5)
    except BaseException:
        pass


def test_case_351():
    try:
        var0 = {}
        var1 = module0.BaseJSONConfigManager(**var0)
        assert var1 is not None
        var2 = var1.ensure_config_dir_exists()
        assert var2 is None
        var3 = ''
        var4 = module0.BaseJSONConfigManager()
        assert var4 is not None
        var5 = var4.get(var3)
        assert var5 is not None
        var6 = module0.BaseJSONConfigManager()
        assert var6 is not None
        var7 = var6.ensure_config_dir_exists()
        assert var7 is None
        var8 = module0.BaseJSONConfigManager()
        assert var8 is not None
        var9 = {}
        var10 = module0.BaseJSONConfigManager(**var9)
        assert var10 is not None
        var11 = var10.ensure_config_dir_exists()
        assert var11 is None
        var12 = var10.ensure_config_dir_exists()
        assert var12 is None
        var13 = ''
        var14 = module0.BaseJSONConfigManager()
        assert var14 is not None
        var15 = var14.get(var13)
        assert var15 is not None
        var16 = module0.BaseJSONConfigManager()
        assert var16 is not None
        var17 = {var14: var16, var13: var15, var14: var13}
        var18 = var14.get(var13, var17)
        assert var18 is not None
        var19 = ''
        var20 = module0.BaseJSONConfigManager()
        assert var20 is not None
        var21 = var20.get(var19)
        assert var21 is not None
        var22 = var20.ensure_config_dir_exists()
        assert var22 is None
        var23 = var20.ensure_config_dir_exists()
        assert var23 is None
        var24 = {}
        var25 = module0.BaseJSONConfigManager(**var24)
        assert var25 is not None
        var26 = var25.ensure_config_dir_exists()
        assert var26 is None
        var27 = ''
        var28 = module0.BaseJSONConfigManager()
        assert var28 is not None
        var29 = var28.get(var27)
        assert var29 is not None
        var30 = var28.ensure_config_dir_exists()
        assert var30 is None
        var31 = var28.ensure_config_dir_exists()
        assert var31 is None
        var32 = module0.BaseJSONConfigManager()
        assert var32 is not None
        var33 = ''
        var34 = module0.BaseJSONConfigManager()
        assert var34 is not None
        var35 = var34.get(var33)
        assert var35 is not None
        var36 = module0.BaseJSONConfigManager()
        assert var36 is not None
        var37 = module0.BaseJSONConfigManager()
        assert var37 is not None
        var38 = module0.BaseJSONConfigManager()
        assert var38 is not None
        var39 = module0.BaseJSONConfigManager()
        assert var39 is not None
        var40 = ''
        var41 = module0.BaseJSONConfigManager()
        assert var41 is not None
        var42 = var41.get(var40)
        assert var42 is not None
        var43 = module0.BaseJSONConfigManager()
        assert var43 is not None
        var44 = ''
        var45 = module0.BaseJSONConfigManager()
        assert var45 is not None
        var46 = var45.get(var44)
        assert var46 is not None
        var47 = module0.BaseJSONConfigManager()
        assert var47 is not None
        var48 = var47.file_name(var44)
        assert var48 == './.json'
        var49 = {}
        var50 = module0.BaseJSONConfigManager(**var49)
        assert var50 is not None
        var51 = var50.ensure_config_dir_exists()
        assert var51 is None
        var52 = var50.ensure_config_dir_exists()
        assert var52 is None
        var53 = var50.ensure_config_dir_exists()
        assert var53 is None
        var54 = b'\xa8\x94\xae\rsn\xae\xcb\xe4'
        var55 = 272.424055
        var56 = var16.update(var54, var55)
    except BaseException:
        pass


def test_case_352():
    try:
        var0 = 'Qe'
        var1 = {var0: var0}
        var2 = module0.BaseJSONConfigManager(**var1)
        assert var2 is not None
        var3 = ''
        var4 = module0.BaseJSONConfigManager()
        assert var4 is not None
        var5 = var4.get(var3)
        assert var5 is not None
        var6 = module0.BaseJSONConfigManager()
        assert var6 is not None
        var7 = var6.ensure_config_dir_exists()
        assert var7 is None
        var8 = ''
        var9 = module0.BaseJSONConfigManager()
        assert var9 is not None
        var10 = var9.get(var8)
        assert var10 is not None
        var11 = module0.BaseJSONConfigManager()
        assert var11 is not None
        var12 = var11.ensure_config_dir_exists()
        assert var12 is None
        var13 = {}
        var14 = module0.BaseJSONConfigManager(**var13)
        assert var14 is not None
        var15 = module0.BaseJSONConfigManager()
        assert var15 is not None
        var16 = ''
        var17 = module0.BaseJSONConfigManager()
        assert var17 is not None
        var18 = var17.get(var16)
        assert var18 is not None
        var19 = module0.BaseJSONConfigManager()
        assert var19 is not None
        var20 = 'K&H94v*%\r'
        var21 = {var20: var20, var20: var20, var20: var20}
        var22 = module0.BaseJSONConfigManager(**var21)
        assert var22 is not None
        var23 = var22.ensure_config_dir_exists()
        assert var23 is None
        var24 = var22.directory(var20)
        assert var24 == './K&H94v*%\r.d'
        var25 = 'Exception restarting kernel'
        var26 = []
        var27 = module0.recursive_update(var25, var26)
    except BaseException:
        pass


def test_case_353():
    try:
        var0 = {}
        var1 = module0.BaseJSONConfigManager(**var0)
        assert var1 is not None
        var2 = var1.ensure_config_dir_exists()
        assert var2 is None
        var3 = ''
        var4 = module0.BaseJSONConfigManager()
        assert var4 is not None
        var5 = var4.get(var3)
        assert var5 is not None
        var6 = module0.BaseJSONConfigManager()
        assert var6 is not None
        var7 = var6.ensure_config_dir_exists()
        assert var7 is None
        var8 = module0.BaseJSONConfigManager()
        assert var8 is not None
        var9 = 'K&H94v*%\r'
        var10 = {var9: var9, var9: var9, var9: var9}
        var11 = module0.BaseJSONConfigManager(**var10)
        assert var11 is not None
        var12 = var11.ensure_config_dir_exists()
        assert var12 is None
        var13 = var11.directory(var9)
        assert var13 == './K&H94v*%\r.d'
        var14 = ''
        var15 = module0.BaseJSONConfigManager()
        assert var15 is not None
        var16 = var15.get(var14)
        assert var16 is not None
        var17 = module0.BaseJSONConfigManager()
        assert var17 is not None
        var18 = {var15: var17, var14: var16, var15: var14}
        var19 = var15.get(var14, var18)
        assert var19 is not None
        var20 = '9'
        var21 = module0.BaseJSONConfigManager()
        assert var21 is not None
        var22 = var21.file_name(var20)
        assert var22 == './9.json'
        var23 = ''
        var24 = module0.BaseJSONConfigManager()
        assert var24 is not None
        var25 = var24.get(var23)
        assert var25 is not None
        var26 = var24.ensure_config_dir_exists()
        assert var26 is None
        var27 = var24.ensure_config_dir_exists()
        assert var27 is None
        var28 = module0.BaseJSONConfigManager()
        assert var28 is not None
        var29 = ''
        var30 = module0.BaseJSONConfigManager()
        assert var30 is not None
        var31 = var30.get(var29)
        assert var31 is not None
        var32 = var30.ensure_config_dir_exists()
        assert var32 is None
        var33 = var30.ensure_config_dir_exists()
        assert var33 is None
        var34 = {}
        var35 = module0.BaseJSONConfigManager(**var34)
        assert var35 is not None
        var36 = {}
        var37 = module0.BaseJSONConfigManager(**var36)
        assert var37 is not None
        var38 = var37.ensure_config_dir_exists()
        assert var38 is None
        var39 = var37.ensure_config_dir_exists()
        assert var39 is None
        var40 = ()
        var41 = var30.update(var40, var28)
    except BaseException:
        pass


def test_case_354():
    try:
        var0 = {}
        var1 = module0.BaseJSONConfigManager(**var0)
        assert var1 is not None
        var2 = ''
        var3 = module0.BaseJSONConfigManager()
        assert var3 is not None
        var4 = var3.get(var2)
        assert var4 is not None
        var5 = module0.BaseJSONConfigManager()
        assert var5 is not None
        var6 = {}
        var7 = module0.BaseJSONConfigManager(**var6)
        assert var7 is not None
        var8 = var7.ensure_config_dir_exists()
        assert var8 is None
        var9 = var7.ensure_config_dir_exists()
        assert var9 is None
        var10 = var7.ensure_config_dir_exists()
        assert var10 is None
        var11 = ''
        var12 = module0.BaseJSONConfigManager()
        assert var12 is not None
        var13 = var12.get(var11)
        assert var13 is not None
        var14 = module0.BaseJSONConfigManager()
        assert var14 is not None
        var15 = var14.ensure_config_dir_exists()
        assert var15 is None
        var16 = ''
        var17 = module0.BaseJSONConfigManager()
        assert var17 is not None
        var18 = var17.get(var16)
        assert var18 is not None
        var19 = module0.BaseJSONConfigManager()
        assert var19 is not None
        var20 = ''
        var21 = module0.BaseJSONConfigManager()
        assert var21 is not None
        var22 = var21.get(var20)
        assert var22 is not None
        var23 = module0.BaseJSONConfigManager()
        assert var23 is not None
        var24 = {var21: var23, var20: var22, var21: var20}
        var25 = var21.get(var20, var24)
        assert var25 is not None
        var26 = 'K&H94v*%\r'
        var27 = {var26: var26, var26: var26, var26: var26}
        var28 = module0.BaseJSONConfigManager(**var27)
        assert var28 is not None
        var29 = var28.ensure_config_dir_exists()
        assert var29 is None
        var30 = var28.directory(var26)
        assert var30 == './K&H94v*%\r.d'
        var31 = ''
        var32 = module0.BaseJSONConfigManager()
        assert var32 is not None
        var33 = var32.get(var31)
        assert var33 is not None
        var34 = module0.BaseJSONConfigManager()
        assert var34 is not None
        var35 = module0.BaseJSONConfigManager()
        assert var35 is not None
        var36 = module0.BaseJSONConfigManager()
        assert var36 is not None
        var37 = {}
        var38 = module0.BaseJSONConfigManager(**var37)
        assert var38 is not None
        var39 = var38.ensure_config_dir_exists()
        assert var39 is None
        var40 = var38.ensure_config_dir_exists()
        assert var40 is None
        var41 = var38.ensure_config_dir_exists()
        assert var41 is None
        var42 = ''
        var43 = module0.BaseJSONConfigManager()
        assert var43 is not None
        var44 = var43.get(var42)
        assert var44 is not None
        var45 = var38.ensure_config_dir_exists()
        assert var45 is None
        var46 = ''
        var47 = module0.BaseJSONConfigManager()
        assert var47 is not None
        var48 = var47.get(var46)
        assert var48 is not None
        var49 = var47.ensure_config_dir_exists()
        assert var49 is None
        var50 = var47.ensure_config_dir_exists()
        assert var50 is None
        var51 = var47.ensure_config_dir_exists()
        assert var51 is None
        var52 = [var6, var14, var45, var37]
        var53 = 848
        var54 = var52, var24, var53, var24
        var55 = var43.set(var16, var54)
    except BaseException:
        pass


def test_case_355():
    try:
        var0 = 'K&H94v*%\r'
        var1 = {var0: var0, var0: var0, var0: var0}
        var2 = module0.BaseJSONConfigManager(**var1)
        assert var2 is not None
        var3 = var2.ensure_config_dir_exists()
        assert var3 is None
        var4 = {}
        var5 = []
        var6 = module0.remove_defaults(var4, var5)
        assert var6 is None
        var7 = module0.BaseJSONConfigManager()
        assert var7 is not None
        var8 = var7.ensure_config_dir_exists()
        assert var8 is None
        var9 = True
        var10 = -1304
        var11 = module0.recursive_update(var9, var10)
    except BaseException:
        pass


def test_case_356():
    try:
        var0 = ''
        var1 = module0.BaseJSONConfigManager()
        assert var1 is not None
        var2 = var1.get(var0)
        assert var2 is not None
        var3 = module0.BaseJSONConfigManager()
        assert var3 is not None
        var4 = var3.ensure_config_dir_exists()
        assert var4 is None
        var5 = ''
        var6 = module0.BaseJSONConfigManager()
        assert var6 is not None
        var7 = var6.get(var5)
        assert var7 is not None
        var8 = module0.BaseJSONConfigManager()
        assert var8 is not None
        var9 = ''
        var10 = module0.BaseJSONConfigManager()
        assert var10 is not None
        var11 = var10.get(var9)
        assert var11 is not None
        var12 = module0.BaseJSONConfigManager()
        assert var12 is not None
        var13 = var12.file_name(var9)
        assert var13 == './.json'
        var14 = ''
        var15 = module0.BaseJSONConfigManager()
        assert var15 is not None
        var16 = var15.get(var14)
        assert var16 is not None
        var17 = var15.ensure_config_dir_exists()
        assert var17 is None
        var18 = var15.ensure_config_dir_exists()
        assert var18 is None
        var19 = module0.BaseJSONConfigManager()
        assert var19 is not None
        var20 = ''
        var21 = module0.BaseJSONConfigManager()
        assert var21 is not None
        var22 = var21.get(var20)
        assert var22 is not None
        var23 = var21.ensure_config_dir_exists()
        assert var23 is None
        var24 = var21.ensure_config_dir_exists()
        assert var24 is None
        var25 = var21.ensure_config_dir_exists()
        assert var25 is None
        var26 = {}
        var27 = module0.BaseJSONConfigManager(**var26)
        assert var27 is not None
        var28 = var27.ensure_config_dir_exists()
        assert var28 is None
        var29 = ''
        var30 = module0.BaseJSONConfigManager()
        assert var30 is not None
        var31 = var30.get(var29)
        assert var31 is not None
        var32 = module0.BaseJSONConfigManager()
        assert var32 is not None
        var33 = var32.ensure_config_dir_exists()
        assert var33 is None
        var34 = module0.BaseJSONConfigManager()
        assert var34 is not None
        var35 = ''
        var36 = module0.BaseJSONConfigManager()
        assert var36 is not None
        var37 = var36.get(var35)
        assert var37 is not None
        var38 = var36.ensure_config_dir_exists()
        assert var38 is None
        var39 = '\tYV'
        var40 = {var39: var39}
        var41 = module0.BaseJSONConfigManager(**var40)
        assert var41 is not None
        var42 = var41.ensure_config_dir_exists()
        assert var42 is None
        var43 = module0.BaseJSONConfigManager()
        assert var43 is not None
        var44 = var43.ensure_config_dir_exists()
        assert var44 is None
        var45 = True
        var46 = module0.remove_defaults(var45, var30)
    except BaseException:
        pass


def test_case_357():
    try:
        var0 = ''
        var1 = module0.BaseJSONConfigManager()
        assert var1 is not None
        var2 = var1.get(var0)
        assert var2 is not None
        var3 = var1.ensure_config_dir_exists()
        assert var3 is None
        var4 = var1.ensure_config_dir_exists()
        assert var4 is None
        var5 = module0.BaseJSONConfigManager()
        assert var5 is not None
        var6 = ''
        var7 = module0.BaseJSONConfigManager()
        assert var7 is not None
        var8 = var7.get(var6)
        assert var8 is not None
        var9 = var7.ensure_config_dir_exists()
        assert var9 is None
        var10 = var7.ensure_config_dir_exists()
        assert var10 is None
        var11 = var7.ensure_config_dir_exists()
        assert var11 is None
        var12 = 'K&H94v*%\r'
        var13 = {var12: var12, var12: var12, var12: var12}
        var14 = module0.BaseJSONConfigManager(**var13)
        assert var14 is not None
        var15 = var14.ensure_config_dir_exists()
        assert var15 is None
        var16 = {}
        var17 = module0.BaseJSONConfigManager(**var16)
        assert var17 is not None
        var18 = var17.ensure_config_dir_exists()
        assert var18 is None
        var19 = ''
        var20 = module0.BaseJSONConfigManager()
        assert var20 is not None
        var21 = var20.get(var19)
        assert var21 is not None
        var22 = module0.BaseJSONConfigManager()
        assert var22 is not None
        var23 = var22.ensure_config_dir_exists()
        assert var23 is None
        var24 = module0.BaseJSONConfigManager()
        assert var24 is not None
        var25 = {}
        var26 = module0.BaseJSONConfigManager(**var25)
        assert var26 is not None
        var27 = var26.ensure_config_dir_exists()
        assert var27 is None
        var28 = var26.ensure_config_dir_exists()
        assert var28 is None
        var29 = var26.ensure_config_dir_exists()
        assert var29 is None
        var30 = {}
        var31 = module0.BaseJSONConfigManager(**var30)
        assert var31 is not None
        var32 = var31.ensure_config_dir_exists()
        assert var32 is None
        var33 = var31.ensure_config_dir_exists()
        assert var33 is None
        var34 = var31.ensure_config_dir_exists()
        assert var34 is None
        var35 = ''
        var36 = module0.BaseJSONConfigManager()
        assert var36 is not None
        var37 = var36.get(var35)
        assert var37 is not None
        var38 = var31.ensure_config_dir_exists()
        assert var38 is None
        var39 = module0.BaseJSONConfigManager()
        assert var39 is not None
        var40 = var39.ensure_config_dir_exists()
        assert var40 is None
        var41 = {}
        var42 = module0.BaseJSONConfigManager(**var41)
        assert var42 is not None
        var43 = var42.ensure_config_dir_exists()
        assert var43 is None
        var44 = "@^8 YSBOCxv2_Uy'\t"
        var45 = var42.file_name(var44)
        assert var45 == "./@^8 YSBOCxv2_Uy'\t.json"
        var46 = b'\xf4H\x83\x90Yr\x8b\xe8\x06\xc8\xb5ho7ME\x7f\x90X'
        var47 = 2170
        var48 = False
        var49 = {var13}
    except BaseException:
        pass


def test_case_358():
    try:
        var0 = '\tYV'
        var1 = {var0: var0}
        var2 = module0.BaseJSONConfigManager(**var1)
        assert var2 is not None
        var3 = var2.ensure_config_dir_exists()
        assert var3 is None
        var4 = var2.ensure_config_dir_exists()
        assert var4 is None
        var5 = ''
        var6 = module0.BaseJSONConfigManager()
        assert var6 is not None
        var7 = var6.get(var5)
        assert var7 is not None
        var8 = var6.ensure_config_dir_exists()
        assert var8 is None
        var9 = var6.ensure_config_dir_exists()
        assert var9 is None
        var10 = 'K&H94v*%\r'
        var11 = {var10: var10, var10: var10, var10: var10}
        var12 = module0.BaseJSONConfigManager(**var11)
        assert var12 is not None
        var13 = var12.ensure_config_dir_exists()
        assert var13 is None
        var14 = ''
        var15 = module0.BaseJSONConfigManager()
        assert var15 is not None
        var16 = var15.get(var14)
        assert var16 is not None
        var17 = var15.ensure_config_dir_exists()
        assert var17 is None
        var18 = var15.ensure_config_dir_exists()
        assert var18 is None
        var19 = module0.BaseJSONConfigManager()
        assert var19 is not None
        var20 = ''
        var21 = module0.BaseJSONConfigManager()
        assert var21 is not None
        var22 = var21.get(var20)
        assert var22 is not None
        var23 = module0.BaseJSONConfigManager()
        assert var23 is not None
        var24 = module0.BaseJSONConfigManager()
        assert var24 is not None
        var25 = module0.BaseJSONConfigManager()
        assert var25 is not None
        var26 = 'K&H94v*%\r'
        var27 = {var26: var26, var26: var26, var26: var26}
        var28 = module0.BaseJSONConfigManager(**var27)
        assert var28 is not None
        var29 = var28.ensure_config_dir_exists()
        assert var29 is None
        var30 = var28.directory(var26)
        assert var30 == './K&H94v*%\r.d'
        var31 = ''
        var32 = module0.BaseJSONConfigManager()
        assert var32 is not None
        var33 = var32.get(var31)
        assert var33 is not None
        var34 = {}
        var35 = module0.BaseJSONConfigManager(**var34)
        assert var35 is not None
        var36 = var35.ensure_config_dir_exists()
        assert var36 is None
        var37 = var35.ensure_config_dir_exists()
        assert var37 is None
        var38 = var35.ensure_config_dir_exists()
        assert var38 is None
        var39 = ''
        var40 = module0.BaseJSONConfigManager()
        assert var40 is not None
        var41 = var40.get(var39)
        assert var41 is not None
        var42 = var35.ensure_config_dir_exists()
        assert var42 is None
        var43 = {var7: var31, var22: var10, var30: var7}
    except BaseException:
        pass


def test_case_359():
    try:
        var0 = '\tYV'
        var1 = {var0: var0}
        var2 = module0.BaseJSONConfigManager(**var1)
        assert var2 is not None
        var3 = var2.ensure_config_dir_exists()
        assert var3 is None
        var4 = None
        var5 = module0.BaseJSONConfigManager()
        assert var5 is not None
        var6 = var5.get(var4)
    except BaseException:
        pass


def test_case_360():
    try:
        var0 = ''
        var1 = module0.BaseJSONConfigManager()
        assert var1 is not None
        var2 = var1.get(var0)
        assert var2 is not None
        var3 = var1.ensure_config_dir_exists()
        assert var3 is None
        var4 = var1.ensure_config_dir_exists()
        assert var4 is None
        var5 = ''
        var6 = module0.BaseJSONConfigManager()
        assert var6 is not None
        var7 = var6.get(var5)
        assert var7 is not None
        var8 = module0.BaseJSONConfigManager()
        assert var8 is not None
        var9 = 'K&H94v*%\r'
        var10 = {var9: var9, var9: var9, var9: var9}
        var11 = module0.BaseJSONConfigManager(**var10)
        assert var11 is not None
        var12 = var11.ensure_config_dir_exists()
        assert var12 is None
        var13 = var11.ensure_config_dir_exists()
        assert var13 is None
        var14 = 456
        var15 = False
        var16 = var6.update(var14, var15)
    except BaseException:
        pass


def test_case_361():
    try:
        var0 = module0.BaseJSONConfigManager()
        assert var0 is not None
        var1 = {}
        var2 = module0.BaseJSONConfigManager(**var1)
        assert var2 is not None
        var3 = var2.ensure_config_dir_exists()
        assert var3 is None
        var4 = {}
        var5 = module0.BaseJSONConfigManager(**var4)
        assert var5 is not None
        var6 = var5.ensure_config_dir_exists()
        assert var6 is None
        var7 = var5.ensure_config_dir_exists()
        assert var7 is None
        var8 = var5.ensure_config_dir_exists()
        assert var8 is None
        var9 = module0.BaseJSONConfigManager()
        assert var9 is not None
        var10 = 'K&H94v*%\r'
        var11 = {var10: var10, var10: var10, var10: var10}
        var12 = module0.BaseJSONConfigManager(**var11)
        assert var12 is not None
        var13 = var12.ensure_config_dir_exists()
        assert var13 is None
        var14 = var12.ensure_config_dir_exists()
        assert var14 is None
        var15 = ''
        var16 = module0.BaseJSONConfigManager()
        assert var16 is not None
        var17 = var16.get(var15)
        assert var17 is not None
        var18 = var16.ensure_config_dir_exists()
        assert var18 is None
        var19 = var16.ensure_config_dir_exists()
        assert var19 is None
        var20 = var16.ensure_config_dir_exists()
        assert var20 is None
        var21 = '\tYV'
        var22 = {var21: var21}
        var23 = module0.BaseJSONConfigManager(**var22)
        assert var23 is not None
        var24 = var23.ensure_config_dir_exists()
        assert var24 is None
        var25 = var23.ensure_config_dir_exists()
        assert var25 is None
        var26 = {}
        var27 = module0.BaseJSONConfigManager(**var26)
        assert var27 is not None
        var28 = var27.ensure_config_dir_exists()
        assert var28 is None
        var29 = var27.ensure_config_dir_exists()
        assert var29 is None
        var30 = var27.ensure_config_dir_exists()
        assert var30 is None
        var31 = ''
        var32 = module0.BaseJSONConfigManager()
        assert var32 is not None
        var33 = var32.get(var31)
        assert var33 is not None
        var34 = var27.ensure_config_dir_exists()
        assert var34 is None
        var35 = None
        var36 = 0.8
        var37 = [var36, var6]
        var38 = 536
        var39 = '!~'
        var40 = False
        var41 = 'h45'
        var42 = var39, var40, var41, var37
        var43 = var35, var37, var38, var42
        var44 = module0.BaseJSONConfigManager()
        assert var44 is not None
        var45 = var44.get(var43)
    except BaseException:
        pass


def test_case_362():
    try:
        var0 = ''
        var1 = module0.BaseJSONConfigManager()
        assert var1 is not None
        var2 = var1.get(var0)
        assert var2 is not None
        var3 = var1.ensure_config_dir_exists()
        assert var3 is None
        var4 = var1.ensure_config_dir_exists()
        assert var4 is None
        var5 = var1.ensure_config_dir_exists()
        assert var5 is None
        var6 = 'K&H94v*%\r'
        var7 = {var6: var6, var6: var6, var6: var6}
        var8 = module0.BaseJSONConfigManager(**var7)
        assert var8 is not None
        var9 = var8.ensure_config_dir_exists()
        assert var9 is None
        var10 = var8.directory(var6)
        assert var10 == './K&H94v*%\r.d'
        var11 = ''
        var12 = module0.BaseJSONConfigManager()
        assert var12 is not None
        var13 = var12.get(var11)
        assert var13 is not None
        var14 = var12.ensure_config_dir_exists()
        assert var14 is None
        var15 = ''
        var16 = module0.BaseJSONConfigManager()
        assert var16 is not None
        var17 = var16.get(var15)
        assert var17 is not None
        var18 = var16.ensure_config_dir_exists()
        assert var18 is None
        var19 = var16.ensure_config_dir_exists()
        assert var19 is None
        var20 = module0.BaseJSONConfigManager()
        assert var20 is not None
        var21 = {}
        var22 = module0.BaseJSONConfigManager(**var21)
        assert var22 is not None
        var23 = None
        var24 = var20.directory(var23)
    except BaseException:
        pass


def test_case_363():
    try:
        var0 = ''
        var1 = module0.BaseJSONConfigManager()
        assert var1 is not None
        var2 = var1.get(var0)
        assert var2 is not None
        var3 = module0.BaseJSONConfigManager()
        assert var3 is not None
        var4 = {}
        var5 = module0.BaseJSONConfigManager(**var4)
        assert var5 is not None
        var6 = var5.ensure_config_dir_exists()
        assert var6 is None
        var7 = "@^8 YSBOCxv2_Uy'\t"
        var8 = var5.file_name(var7)
        assert var8 == "./@^8 YSBOCxv2_Uy'\t.json"
        var9 = '\tYV'
        var10 = {var9: var9}
        var11 = module0.BaseJSONConfigManager(**var10)
        assert var11 is not None
        var12 = var11.ensure_config_dir_exists()
        assert var12 is None
        var13 = {}
        var14 = module0.BaseJSONConfigManager(**var13)
        assert var14 is not None
        var15 = var14.ensure_config_dir_exists()
        assert var15 is None
        var16 = var14.ensure_config_dir_exists()
        assert var16 is None
        var17 = var14.ensure_config_dir_exists()
        assert var17 is None
        var18 = 'K&H94v*%\r'
        var19 = {var18: var18, var18: var18, var18: var18}
        var20 = module0.BaseJSONConfigManager(**var19)
        assert var20 is not None
        var21 = var20.ensure_config_dir_exists()
        assert var21 is None
        var22 = {}
        var23 = []
        var24 = module0.remove_defaults(var22, var23)
        assert var24 is None
        var25 = ''
        var26 = module0.BaseJSONConfigManager()
        assert var26 is not None
        var27 = var26.get(var25)
        assert var27 is not None
        var28 = module0.BaseJSONConfigManager()
        assert var28 is not None
        var29 = module0.BaseJSONConfigManager()
        assert var29 is not None
        var30 = module0.BaseJSONConfigManager()
        assert var30 is not None
        var31 = {var19, var16}
    except BaseException:
        pass


def test_case_364():
    try:
        var0 = '\tYV'
        var1 = {var0: var0}
        var2 = module0.BaseJSONConfigManager(**var1)
        assert var2 is not None
        var3 = var2.ensure_config_dir_exists()
        assert var3 is None
        var4 = ''
        var5 = module0.BaseJSONConfigManager()
        assert var5 is not None
        var6 = var5.get(var4)
        assert var6 is not None
        var7 = module0.BaseJSONConfigManager()
        assert var7 is not None
        var8 = '9'
        var9 = module0.BaseJSONConfigManager()
        assert var9 is not None
        var10 = var9.file_name(var8)
        assert var10 == './9.json'
        var11 = ''
        var12 = module0.BaseJSONConfigManager()
        assert var12 is not None
        var13 = var12.get(var11)
        assert var13 is not None
        var14 = var12.ensure_config_dir_exists()
        assert var14 is None
        var15 = ''
        var16 = module0.BaseJSONConfigManager()
        assert var16 is not None
        var17 = var16.get(var15)
        assert var17 is not None
        var18 = module0.BaseJSONConfigManager()
        assert var18 is not None
        var19 = {var16: var18, var15: var17, var16: var15}
        var20 = var16.get(var15, var19)
        assert var20 is not None
        var21 = ''
        var22 = module0.BaseJSONConfigManager()
        assert var22 is not None
        var23 = var22.get(var21)
        assert var23 is not None
        var24 = module0.BaseJSONConfigManager()
        assert var24 is not None
        var25 = ''
        var26 = module0.BaseJSONConfigManager()
        assert var26 is not None
        var27 = var26.get(var25)
        assert var27 is not None
        var28 = module0.BaseJSONConfigManager()
        assert var28 is not None
        var29 = var28.file_name(var25)
        assert var29 == './.json'
        var30 = b'48\xb1\x15\x16k\x97\x93?'
        var31 = True
        var32 = var26.set(var30, var31)
    except BaseException:
        pass


def test_case_365():
    try:
        var0 = module0.BaseJSONConfigManager()
        assert var0 is not None
        var1 = '9'
        var2 = module0.BaseJSONConfigManager()
        assert var2 is not None
        var3 = var2.file_name(var1)
        assert var3 == './9.json'
        var4 = {}
        var5 = module0.BaseJSONConfigManager(**var4)
        assert var5 is not None
        var6 = var5.ensure_config_dir_exists()
        assert var6 is None
        var7 = var5.ensure_config_dir_exists()
        assert var7 is None
        var8 = module0.BaseJSONConfigManager()
        assert var8 is not None
        var9 = var8.ensure_config_dir_exists()
        assert var9 is None
        var10 = [var4, var8]
        var11 = None
        var12 = module0.recursive_update(var10, var11)
    except BaseException:
        pass


def test_case_366():
    try:
        var0 = ''
        var1 = module0.BaseJSONConfigManager()
        assert var1 is not None
        var2 = var1.get(var0)
        assert var2 is not None
        var3 = module0.BaseJSONConfigManager()
        assert var3 is not None
        var4 = var3.ensure_config_dir_exists()
        assert var4 is None
        var5 = ''
        var6 = module0.BaseJSONConfigManager()
        assert var6 is not None
        var7 = var6.get(var5)
        assert var7 is not None
        var8 = module0.BaseJSONConfigManager()
        assert var8 is not None
        var9 = module0.BaseJSONConfigManager()
        assert var9 is not None
        var10 = module0.BaseJSONConfigManager()
        assert var10 is not None
        var11 = {}
        var12 = module0.remove_defaults(var0, var11)
    except BaseException:
        pass


def test_case_367():
    try:
        var0 = {}
        var1 = module0.BaseJSONConfigManager(**var0)
        assert var1 is not None
        var2 = var1.ensure_config_dir_exists()
        assert var2 is None
        var3 = "@^8 YSBOCxv2_Uy'\t"
        var4 = var1.file_name(var3)
        assert var4 == "./@^8 YSBOCxv2_Uy'\t.json"
        var5 = '\tYV'
        var6 = {var5: var5}
        var7 = module0.BaseJSONConfigManager(**var6)
        assert var7 is not None
        var8 = var7.ensure_config_dir_exists()
        assert var8 is None
        var9 = var7.ensure_config_dir_exists()
        assert var9 is None
        var10 = module0.BaseJSONConfigManager()
        assert var10 is not None
        var11 = 'Qe'
        var12 = {var11: var11}
        var13 = module0.BaseJSONConfigManager(**var12)
        assert var13 is not None
        var14 = {}
        var15 = module0.BaseJSONConfigManager(**var14)
        assert var15 is not None
        var16 = var15.ensure_config_dir_exists()
        assert var16 is None
        var17 = var15.ensure_config_dir_exists()
        assert var17 is None
        var18 = ''
        var19 = module0.BaseJSONConfigManager()
        assert var19 is not None
        var20 = var19.get(var18)
        assert var20 is not None
        var21 = module0.BaseJSONConfigManager()
        assert var21 is not None
        var22 = {var19: var21, var18: var20, var19: var18}
        var23 = var19.get(var18, var22)
        assert var23 is not None
        var24 = {}
        var25 = module0.BaseJSONConfigManager(**var24)
        assert var25 is not None
        var26 = var25.ensure_config_dir_exists()
        assert var26 is None
        var27 = ''
        var28 = module0.BaseJSONConfigManager()
        assert var28 is not None
        var29 = var28.get(var27)
        assert var29 is not None
        var30 = module0.BaseJSONConfigManager()
        assert var30 is not None
        var31 = var30.ensure_config_dir_exists()
        assert var31 is None
        var32 = module0.BaseJSONConfigManager()
        assert var32 is not None
        var33 = 427.0
        var34 = module0.remove_defaults(var22, var33)
    except BaseException:
        pass


def test_case_368():
    try:
        var0 = 'K&H94v*%\r'
        var1 = {var0: var0, var0: var0, var0: var0}
        var2 = module0.BaseJSONConfigManager(**var1)
        assert var2 is not None
        var3 = var2.ensure_config_dir_exists()
        assert var3 is None
        var4 = {}
        var5 = []
        var6 = module0.remove_defaults(var4, var5)
        assert var6 is None
        var7 = ''
        var8 = module0.BaseJSONConfigManager()
        assert var8 is not None
        var9 = var8.get(var7)
        assert var9 is not None
        var10 = var8.ensure_config_dir_exists()
        assert var10 is None
        var11 = var8.ensure_config_dir_exists()
        assert var11 is None
        var12 = module0.BaseJSONConfigManager()
        assert var12 is not None
        var13 = ''
        var14 = module0.BaseJSONConfigManager()
        assert var14 is not None
        var15 = var14.get(var13)
        assert var15 is not None
        var16 = module0.BaseJSONConfigManager()
        assert var16 is not None
        var17 = var16.ensure_config_dir_exists()
        assert var17 is None
        var18 = ''
        var19 = module0.BaseJSONConfigManager()
        assert var19 is not None
        var20 = var19.get(var18)
        assert var20 is not None
        var21 = module0.BaseJSONConfigManager()
        assert var21 is not None
        var22 = 3271
        var23 = {var22, var13, var11, var10}
        var24 = 40.0
        var25 = "dwgK'|~8W\t\tAqw\\cRpY"
        var26 = (
            b'\xaa\xf6\xe9\xbf\r\x1cw\x9b\x0ej\x13\xe3p\xea\xed\xcd\xad\x00')
        var27 = var24, var25, var18, var26
        var28 = var12.update(var23, var27)
    except BaseException:
        pass


def test_case_369():
    try:
        var0 = ''
        var1 = module0.BaseJSONConfigManager()
        assert var1 is not None
        var2 = var1.get(var0)
        assert var2 is not None
        var3 = module0.BaseJSONConfigManager()
        assert var3 is not None
        var4 = module0.BaseJSONConfigManager()
        assert var4 is not None
        var5 = module0.BaseJSONConfigManager()
        assert var5 is not None
        var6 = {}
        var7 = module0.BaseJSONConfigManager(**var6)
        assert var7 is not None
        var8 = var7.ensure_config_dir_exists()
        assert var8 is None
        var9 = "@^8 YSBOCxv2_Uy'\t"
        var10 = var7.file_name(var9)
        assert var10 == "./@^8 YSBOCxv2_Uy'\t.json"
        var11 = ''
        var12 = module0.BaseJSONConfigManager()
        assert var12 is not None
        var13 = var12.get(var11)
        assert var13 is not None
        var14 = module0.BaseJSONConfigManager()
        assert var14 is not None
        var15 = ''
        var16 = module0.BaseJSONConfigManager()
        assert var16 is not None
        var17 = var16.get(var15)
        assert var17 is not None
        var18 = var16.ensure_config_dir_exists()
        assert var18 is None
        var19 = var16.ensure_config_dir_exists()
        assert var19 is None
        var20 = module0.BaseJSONConfigManager()
        assert var20 is not None
        var21 = module0.BaseJSONConfigManager()
        assert var21 is not None
        var22 = var21.ensure_config_dir_exists()
        assert var22 is None
        var23 = 'K&H94v*%\r'
        var24 = {var23: var23, var23: var23, var23: var23}
        var25 = module0.BaseJSONConfigManager(**var24)
        assert var25 is not None
        var26 = var25.ensure_config_dir_exists()
        assert var26 is None
        var27 = {}
        var28 = []
        var29 = module0.remove_defaults(var27, var28)
        assert var29 is None
        var30 = ''
        var31 = module0.BaseJSONConfigManager()
        assert var31 is not None
        var32 = var31.get(var30)
        assert var32 is not None
        var33 = module0.BaseJSONConfigManager()
        assert var33 is not None
        var34 = {var31: var33, var30: var32, var31: var30}
        var35 = var31.get(var30, var34)
        assert var35 is not None
        var36 = {}
        var37 = module0.BaseJSONConfigManager(**var36)
        assert var37 is not None
        var38 = {}
        var39 = module0.BaseJSONConfigManager(**var38)
        assert var39 is not None
        var40 = var39.ensure_config_dir_exists()
        assert var40 is None
        var41 = var39.ensure_config_dir_exists()
        assert var41 is None
        var42 = {}
        var43 = module0.BaseJSONConfigManager(**var42)
        assert var43 is not None
        var44 = var43.ensure_config_dir_exists()
        assert var44 is None
        var45 = {var14, var0}
        var46 = '~=,pa8Jj]Xx?k1<'
        var47 = var12.update(var45, var46)
    except BaseException:
        pass


def test_case_370():
    try:
        var0 = -3296
        var1 = {var0: var0, var0: var0, var0: var0}
        var2 = module0.remove_defaults(var0, var1)
    except BaseException:
        pass


def test_case_371():
    try:
        var0 = ''
        var1 = module0.BaseJSONConfigManager()
        assert var1 is not None
        var2 = var1.get(var0)
        assert var2 is not None
        var3 = module0.BaseJSONConfigManager()
        assert var3 is not None
        var4 = module0.BaseJSONConfigManager()
        assert var4 is not None
        var5 = module0.BaseJSONConfigManager()
        assert var5 is not None
        var6 = ''
        var7 = module0.BaseJSONConfigManager()
        assert var7 is not None
        var8 = var7.get(var6)
        assert var8 is not None
        var9 = module0.BaseJSONConfigManager()
        assert var9 is not None
        var10 = var9.ensure_config_dir_exists()
        assert var10 is None
        var11 = module0.BaseJSONConfigManager()
        assert var11 is not None
        var12 = var11.ensure_config_dir_exists()
        assert var12 is None
        var13 = ''
        var14 = module0.BaseJSONConfigManager()
        assert var14 is not None
        var15 = var14.get(var13)
        assert var15 is not None
        var16 = module0.BaseJSONConfigManager()
        assert var16 is not None
        var17 = ''
        var18 = module0.BaseJSONConfigManager()
        assert var18 is not None
        var19 = var18.get(var17)
        assert var19 is not None
        var20 = module0.BaseJSONConfigManager()
        assert var20 is not None
        var21 = var20.file_name(var17)
        assert var21 == './.json'
        var22 = ''
        var23 = module0.BaseJSONConfigManager()
        assert var23 is not None
        var24 = var23.get(var22)
        assert var24 is not None
        var25 = module0.BaseJSONConfigManager()
        assert var25 is not None
        var26 = {}
        var27 = module0.BaseJSONConfigManager(**var26)
        assert var27 is not None
        var28 = var27.ensure_config_dir_exists()
        assert var28 is None
        var29 = {}
        var30 = module0.BaseJSONConfigManager(**var29)
        assert var30 is not None
        var31 = var30.ensure_config_dir_exists()
        assert var31 is None
        var32 = var30.ensure_config_dir_exists()
        assert var32 is None
        var33 = '\tYV'
        var34 = {var33: var33}
        var35 = module0.BaseJSONConfigManager(**var34)
        assert var35 is not None
        var36 = var35.ensure_config_dir_exists()
        assert var36 is None
        var37 = ''
        var38 = module0.BaseJSONConfigManager()
        assert var38 is not None
        var39 = var38.get(var37)
        assert var39 is not None
        var40 = var38.ensure_config_dir_exists()
        assert var40 is None
        var41 = 'K&H94v*%\r'
        var42 = {var41: var41, var41: var41, var41: var41}
        var43 = module0.BaseJSONConfigManager(**var42)
        assert var43 is not None
        var44 = var43.ensure_config_dir_exists()
        assert var44 is None
        var45 = {}
        var46 = []
        var47 = module0.remove_defaults(var45, var46)
        assert var47 is None
        var48 = None
        var49 = {var38}
        var50 = module0.remove_defaults(var48, var49)
    except BaseException:
        pass


def test_case_372():
    try:
        var0 = ''
        var1 = module0.BaseJSONConfigManager()
        assert var1 is not None
        var2 = var1.get(var0)
        assert var2 is not None
        var3 = var1.ensure_config_dir_exists()
        assert var3 is None
        var4 = var1.ensure_config_dir_exists()
        assert var4 is None
        var5 = module0.BaseJSONConfigManager()
        assert var5 is not None
        var6 = {}
        var7 = module0.BaseJSONConfigManager(**var6)
        assert var7 is not None
        var8 = var7.ensure_config_dir_exists()
        assert var8 is None
        var9 = var7.ensure_config_dir_exists()
        assert var9 is None
        var10 = ''
        var11 = module0.BaseJSONConfigManager()
        assert var11 is not None
        var12 = var11.get(var10)
        assert var12 is not None
        var13 = 'K&H94v*%\r'
        var14 = {var13: var13, var13: var13, var13: var13}
        var15 = module0.BaseJSONConfigManager(**var14)
        assert var15 is not None
        var16 = var15.ensure_config_dir_exists()
        assert var16 is None
        var17 = var15.directory(var13)
        assert var17 == './K&H94v*%\r.d'
        var18 = ()
        var19 = module0.recursive_update(var18, var18)
    except BaseException:
        pass


def test_case_373():
    try:
        var0 = ''
        var1 = module0.BaseJSONConfigManager()
        assert var1 is not None
        var2 = var1.get(var0)
        assert var2 is not None
        var3 = module0.BaseJSONConfigManager()
        assert var3 is not None
        var4 = var3.ensure_config_dir_exists()
        assert var4 is None
        var5 = ''
        var6 = module0.BaseJSONConfigManager()
        assert var6 is not None
        var7 = var6.get(var5)
        assert var7 is not None
        var8 = module0.BaseJSONConfigManager()
        assert var8 is not None
        var9 = ''
        var10 = module0.BaseJSONConfigManager()
        assert var10 is not None
        var11 = var10.get(var9)
        assert var11 is not None
        var12 = module0.BaseJSONConfigManager()
        assert var12 is not None
        var13 = var12.ensure_config_dir_exists()
        assert var13 is None
        var14 = '\tYV'
        var15 = {var14: var14}
        var16 = module0.BaseJSONConfigManager(**var15)
        assert var16 is not None
        var17 = var16.ensure_config_dir_exists()
        assert var17 is None
        var18 = var16.ensure_config_dir_exists()
        assert var18 is None
        var19 = 'K&H94v*%\r'
        var20 = {var19: var19, var19: var19, var19: var19}
        var21 = module0.BaseJSONConfigManager(**var20)
        assert var21 is not None
        var22 = var21.ensure_config_dir_exists()
        assert var22 is None
        var23 = {}
        var24 = []
        var25 = module0.remove_defaults(var23, var24)
        assert var25 is None
        var26 = module0.BaseJSONConfigManager()
        assert var26 is not None
        var27 = {}
        var28 = module0.BaseJSONConfigManager(**var27)
        assert var28 is not None
        var29 = var28.ensure_config_dir_exists()
        assert var29 is None
        var30 = var28.ensure_config_dir_exists()
        assert var30 is None
        var31 = var28.ensure_config_dir_exists()
        assert var31 is None
        var32 = ''
        var33 = module0.BaseJSONConfigManager()
        assert var33 is not None
        var34 = var33.get(var32)
        assert var34 is not None
        var35 = var28.ensure_config_dir_exists()
        assert var35 is None
        var36 = 'K&H94v*%\r'
        var37 = {var36: var36, var36: var36, var36: var36}
        var38 = module0.BaseJSONConfigManager(**var37)
        assert var38 is not None
        var39 = var38.ensure_config_dir_exists()
        assert var39 is None
        var40 = var38.directory(var36)
        assert var40 == './K&H94v*%\r.d'
        var41 = 'mlY|,NIwI.ZPnj('
        var42 = False
        var43 = var21.update(var41, var42)
    except BaseException:
        pass


def test_case_374():
    try:
        var0 = ''
        var1 = module0.BaseJSONConfigManager()
        assert var1 is not None
        var2 = var1.get(var0)
        assert var2 is not None
        var3 = var1.ensure_config_dir_exists()
        assert var3 is None
        var4 = var1.ensure_config_dir_exists()
        assert var4 is None
        var5 = 'K&H94v*%\r'
        var6 = {var5: var5, var5: var5, var5: var5}
        var7 = module0.BaseJSONConfigManager(**var6)
        assert var7 is not None
        var8 = var7.ensure_config_dir_exists()
        assert var8 is None
        var9 = module0.BaseJSONConfigManager()
        assert var9 is not None
        var10 = ''
        var11 = module0.BaseJSONConfigManager()
        assert var11 is not None
        var12 = var11.get(var10)
        assert var12 is not None
        var13 = module0.BaseJSONConfigManager()
        assert var13 is not None
        var14 = var13.ensure_config_dir_exists()
        assert var14 is None
        var15 = ''
        var16 = module0.BaseJSONConfigManager()
        assert var16 is not None
        var17 = var16.get(var15)
        assert var17 is not None
        var18 = module0.BaseJSONConfigManager()
        assert var18 is not None
        var19 = ''
        var20 = module0.BaseJSONConfigManager()
        assert var20 is not None
        var21 = var20.get(var19)
        assert var21 is not None
        var22 = module0.BaseJSONConfigManager()
        assert var22 is not None
        var23 = module0.BaseJSONConfigManager()
        assert var23 is not None
        var24 = module0.BaseJSONConfigManager()
        assert var24 is not None
        var25 = {}
        var26 = module0.BaseJSONConfigManager(**var25)
        assert var26 is not None
        var27 = var26.ensure_config_dir_exists()
        assert var27 is None
        var28 = var26.ensure_config_dir_exists()
        assert var28 is None
        var29 = {}
        var30 = module0.BaseJSONConfigManager(**var29)
        assert var30 is not None
        var31 = var30.ensure_config_dir_exists()
        assert var31 is None
        var32 = ''
        var33 = module0.BaseJSONConfigManager()
        assert var33 is not None
        var34 = var33.get(var32)
        assert var34 is not None
        var35 = module0.BaseJSONConfigManager()
        assert var35 is not None
        var36 = var35.ensure_config_dir_exists()
        assert var36 is None
        var37 = module0.BaseJSONConfigManager()
        assert var37 is not None
        var38 = ''
        var39 = module0.BaseJSONConfigManager()
        assert var39 is not None
        var40 = var39.get(var38)
        assert var40 is not None
        var41 = module0.BaseJSONConfigManager()
        assert var41 is not None
        var42 = {var39: var41, var38: var40, var39: var38}
        var43 = var39.get(var38, var42)
        assert var43 is not None
        var44 = module0.BaseJSONConfigManager()
        assert var44 is not None
        var45 = var44.ensure_config_dir_exists()
        assert var45 is None
        var46 = var13.get(var42)
    except BaseException:
        pass


def test_case_375():
    try:
        var0 = ''
        var1 = module0.BaseJSONConfigManager()
        assert var1 is not None
        var2 = var1.get(var0)
        assert var2 is not None
        var3 = None
        var4 = var1.file_name(var3)
    except BaseException:
        pass


def test_case_376():
    try:
        var0 = False
        var1 = {}
        var2 = module0.BaseJSONConfigManager()
        assert var2 is not None
        var3 = var2.update(var0, var1)
    except BaseException:
        pass


def test_case_377():
    try:
        var0 = '9'
        var1 = module0.BaseJSONConfigManager()
        assert var1 is not None
        var2 = var1.file_name(var0)
        assert var2 == './9.json'
        var3 = {var0, var1, var0, var0}
        var4 = [var2]
        var5 = module0.remove_defaults(var3, var4)
    except BaseException:
        pass


def test_case_378():
    try:
        var0 = True
        var1 = b"\xe8@J%XT\xdf\xb3\xf03@\xbb\xef\xb2'r"
        var2 = {var0: var0, var1: var0}
        var3 = module0.remove_defaults(var0, var2)
    except BaseException:
        pass


def test_case_379():
    try:
        var0 = module0.BaseJSONConfigManager()
        assert var0 is not None
        var1 = var0.ensure_config_dir_exists()
        assert var1 is None
        var2 = ''
        var3 = module0.BaseJSONConfigManager()
        assert var3 is not None
        var4 = var3.get(var2)
        assert var4 is not None
        var5 = var3.ensure_config_dir_exists()
        assert var5 is None
        var6 = {}
        var7 = module0.BaseJSONConfigManager(**var6)
        assert var7 is not None
        var8 = var7.ensure_config_dir_exists()
        assert var8 is None
        var9 = ''
        var10 = module0.BaseJSONConfigManager()
        assert var10 is not None
        var11 = var10.get(var9)
        assert var11 is not None
        var12 = 'K&H94v*%\r'
        var13 = {var12: var12, var12: var12, var12: var12}
        var14 = module0.BaseJSONConfigManager(**var13)
        assert var14 is not None
        var15 = var14.ensure_config_dir_exists()
        assert var15 is None
        var16 = {}
        var17 = []
        var18 = module0.remove_defaults(var16, var17)
        assert var18 is None
        var19 = None
        var20 = None
        var21 = module0.recursive_update(var19, var20)
    except BaseException:
        pass


def test_case_380():
    try:
        var0 = 'K&H94v*%\r'
        var1 = {var0: var0, var0: var0, var0: var0}
        var2 = module0.BaseJSONConfigManager(**var1)
        assert var2 is not None
        var3 = var2.ensure_config_dir_exists()
        assert var3 is None
        var4 = True
        var5 = var2.get(var4)
    except BaseException:
        pass


def test_case_381():
    try:
        var0 = 'K&H94v*%\r'
        var1 = {var0: var0, var0: var0, var0: var0}
        var2 = module0.BaseJSONConfigManager(**var1)
        assert var2 is not None
        var3 = var2.ensure_config_dir_exists()
        assert var3 is None
        var4 = ''
        var5 = module0.BaseJSONConfigManager()
        assert var5 is not None
        var6 = var5.get(var4)
        assert var6 is not None
        var7 = 'K&H94v*%\r'
        var8 = {var7: var7, var7: var7, var7: var7}
        var9 = module0.BaseJSONConfigManager(**var8)
        assert var9 is not None
        var10 = var9.ensure_config_dir_exists()
        assert var10 is None
        var11 = var9.directory(var7)
        assert var11 == './K&H94v*%\r.d'
        var12 = ''
        var13 = module0.BaseJSONConfigManager()
        assert var13 is not None
        var14 = var13.get(var12)
        assert var14 is not None
        var15 = module0.BaseJSONConfigManager()
        assert var15 is not None
        var16 = {var13: var15, var12: var14, var13: var12}
        var17 = var13.get(var12, var16)
        assert var17 is not None
        var18 = {var12}
        var19 = module0.BaseJSONConfigManager()
        assert var19 is not None
        var20 = var19.directory(var18)
    except BaseException:
        pass


def test_case_382():
    try:
        var0 = '\tYV'
        var1 = {var0: var0}
        var2 = module0.BaseJSONConfigManager(**var1)
        assert var2 is not None
        var3 = var2.ensure_config_dir_exists()
        assert var3 is None
        var4 = {}
        var5 = module0.BaseJSONConfigManager(**var4)
        assert var5 is not None
        var6 = var5.ensure_config_dir_exists()
        assert var6 is None
        var7 = var5.ensure_config_dir_exists()
        assert var7 is None
        var8 = var5.ensure_config_dir_exists()
        assert var8 is None
        var9 = {}
        var10 = module0.BaseJSONConfigManager(**var9)
        assert var10 is not None
        var11 = var10.ensure_config_dir_exists()
        assert var11 is None
        var12 = ''
        var13 = module0.BaseJSONConfigManager()
        assert var13 is not None
        var14 = var13.get(var12)
        assert var14 is not None
        var15 = var13.ensure_config_dir_exists()
        assert var15 is None
        var16 = {}
        var17 = module0.BaseJSONConfigManager(**var16)
        assert var17 is not None
        var18 = ''
        var19 = module0.BaseJSONConfigManager()
        assert var19 is not None
        var20 = var19.get(var18)
        assert var20 is not None
        var21 = var19.ensure_config_dir_exists()
        assert var21 is None
        var22 = var19.ensure_config_dir_exists()
        assert var22 is None
        var23 = False
        var24 = [var9, var3, var23]
        var25 = var10.file_name(var24)
    except BaseException:
        pass


def test_case_383():
    try:
        var0 = module0.BaseJSONConfigManager()
        assert var0 is not None
        var1 = module0.BaseJSONConfigManager()
        assert var1 is not None
        var2 = var1.directory(var0)
    except BaseException:
        pass


def test_case_384():
    try:
        var0 = ''
        var1 = module0.BaseJSONConfigManager()
        assert var1 is not None
        var2 = var1.get(var0)
        assert var2 is not None
        var3 = var1.ensure_config_dir_exists()
        assert var3 is None
        var4 = ''
        var5 = module0.BaseJSONConfigManager()
        assert var5 is not None
        var6 = var5.get(var4)
        assert var6 is not None
        var7 = var5.ensure_config_dir_exists()
        assert var7 is None
        var8 = var5.ensure_config_dir_exists()
        assert var8 is None
        var9 = module0.BaseJSONConfigManager()
        assert var9 is not None
        var10 = {}
        var11 = module0.BaseJSONConfigManager(**var10)
        assert var11 is not None
        var12 = 'K&H94v*%\r'
        var13 = {var12: var12, var12: var12, var12: var12}
        var14 = module0.BaseJSONConfigManager(**var13)
        assert var14 is not None
        var15 = var14.ensure_config_dir_exists()
        assert var15 is None
        var16 = ''
        var17 = module0.BaseJSONConfigManager()
        assert var17 is not None
        var18 = var17.get(var16)
        assert var18 is not None
        var19 = module0.BaseJSONConfigManager()
        assert var19 is not None
        var20 = ''
        var21 = module0.BaseJSONConfigManager()
        assert var21 is not None
        var22 = var21.get(var20)
        assert var22 is not None
        var23 = module0.BaseJSONConfigManager()
        assert var23 is not None
        var24 = var23.file_name(var20)
        assert var24 == './.json'
        var25 = 'K&H94v*%\r'
        var26 = {var25: var25, var25: var25, var25: var25}
        var27 = module0.BaseJSONConfigManager(**var26)
        assert var27 is not None
        var28 = var27.ensure_config_dir_exists()
        assert var28 is None
        var29 = var27.directory(var25)
        assert var29 == './K&H94v*%\r.d'
        var30 = 'K&H94v*%\r'
        var31 = {var30: var30, var30: var30, var30: var30}
        var32 = module0.BaseJSONConfigManager(**var31)
        assert var32 is not None
        var33 = var32.ensure_config_dir_exists()
        assert var33 is None
        var34 = {}
        var35 = []
        var36 = module0.remove_defaults(var34, var35)
        assert var36 is None
        var37 = 1576.038049
        var38 = var17.directory(var37)
    except BaseException:
        pass


def test_case_385():
    try:
        var0 = ''
        var1 = module0.BaseJSONConfigManager()
        assert var1 is not None
        var2 = var1.get(var0)
        assert var2 is not None
        var3 = var1.ensure_config_dir_exists()
        assert var3 is None
        var4 = var1.ensure_config_dir_exists()
        assert var4 is None
        var5 = var1.ensure_config_dir_exists()
        assert var5 is None
        var6 = {}
        var7 = module0.BaseJSONConfigManager(**var6)
        assert var7 is not None
        var8 = var7.ensure_config_dir_exists()
        assert var8 is None
        var9 = ''
        var10 = module0.BaseJSONConfigManager()
        assert var10 is not None
        var11 = var10.get(var9)
        assert var11 is not None
        var12 = module0.BaseJSONConfigManager()
        assert var12 is not None
        var13 = var12.ensure_config_dir_exists()
        assert var13 is None
        var14 = module0.BaseJSONConfigManager()
        assert var14 is not None
        var15 = ''
        var16 = module0.BaseJSONConfigManager()
        assert var16 is not None
        var17 = var16.get(var15)
        assert var17 is not None
        var18 = module0.BaseJSONConfigManager()
        assert var18 is not None
        var19 = var18.ensure_config_dir_exists()
        assert var19 is None
        var20 = {}
        var21 = module0.BaseJSONConfigManager(**var20)
        assert var21 is not None
        var22 = {}
        var23 = module0.BaseJSONConfigManager(**var22)
        assert var23 is not None
        var24 = var23.ensure_config_dir_exists()
        assert var24 is None
        var25 = var23.ensure_config_dir_exists()
        assert var25 is None
        var26 = [var18]
        var27 = var7.directory(var26)
    except BaseException:
        pass


def test_case_386():
    try:
        var0 = 'K&H94v*%\r'
        var1 = {var0: var0, var0: var0, var0: var0}
        var2 = module0.BaseJSONConfigManager(**var1)
        assert var2 is not None
        var3 = var2.ensure_config_dir_exists()
        assert var3 is None
        var4 = var2.directory(var0)
        assert var4 == './K&H94v*%\r.d'
        var5 = module0.BaseJSONConfigManager()
        assert var5 is not None
        var6 = 'K&H94v*%\r'
        var7 = {var6: var6, var6: var6, var6: var6}
        var8 = module0.BaseJSONConfigManager(**var7)
        assert var8 is not None
        var9 = var8.ensure_config_dir_exists()
        assert var9 is None
        var10 = var8.ensure_config_dir_exists()
        assert var10 is None
        var11 = ''
        var12 = module0.BaseJSONConfigManager()
        assert var12 is not None
        var13 = var12.get(var11)
        assert var13 is not None
        var14 = module0.BaseJSONConfigManager()
        assert var14 is not None
        var15 = {}
        var16 = module0.BaseJSONConfigManager(**var15)
        assert var16 is not None
        var17 = var16.ensure_config_dir_exists()
        assert var17 is None
        var18 = "@^8 YSBOCxv2_Uy'\t"
        var19 = var16.file_name(var18)
        assert var19 == "./@^8 YSBOCxv2_Uy'\t.json"
        var20 = {}
        var21 = module0.BaseJSONConfigManager(**var20)
        assert var21 is not None
        var22 = var8.file_name(var8)
    except BaseException:
        pass


def test_case_387():
    try:
        var0 = {}
        var1 = module0.BaseJSONConfigManager(**var0)
        assert var1 is not None
        var2 = var1.ensure_config_dir_exists()
        assert var2 is None
        var3 = var1.ensure_config_dir_exists()
        assert var3 is None
        var4 = var1.ensure_config_dir_exists()
        assert var4 is None
        var5 = var1.file_name(var1)
    except BaseException:
        pass


def test_case_388():
    try:
        var0 = {}
        var1 = module0.BaseJSONConfigManager(**var0)
        assert var1 is not None
        var2 = var1.ensure_config_dir_exists()
        assert var2 is None
        var3 = var1.ensure_config_dir_exists()
        assert var3 is None
        var4 = var1.ensure_config_dir_exists()
        assert var4 is None
        var5 = ''
        var6 = module0.BaseJSONConfigManager()
        assert var6 is not None
        var7 = var6.get(var5)
        assert var7 is not None
        var8 = module0.BaseJSONConfigManager()
        assert var8 is not None
        var9 = {}
        var10 = module0.BaseJSONConfigManager(**var9)
        assert var10 is not None
        var11 = var10.ensure_config_dir_exists()
        assert var11 is None
        var12 = var10.ensure_config_dir_exists()
        assert var12 is None
        var13 = {}
        var14 = module0.BaseJSONConfigManager(**var13)
        assert var14 is not None
        var15 = var14.ensure_config_dir_exists()
        assert var15 is None
        var16 = ''
        var17 = module0.BaseJSONConfigManager()
        assert var17 is not None
        var18 = var17.get(var16)
        assert var18 is not None
        var19 = module0.BaseJSONConfigManager()
        assert var19 is not None
        var20 = var19.ensure_config_dir_exists()
        assert var20 is None
        var21 = module0.BaseJSONConfigManager()
        assert var21 is not None
        var22 = ''
        var23 = module0.BaseJSONConfigManager()
        assert var23 is not None
        var24 = var23.get(var22)
        assert var24 is not None
        var25 = ''
        var26 = module0.BaseJSONConfigManager()
        assert var26 is not None
        var27 = var26.get(var25)
        assert var27 is not None
        var28 = module0.BaseJSONConfigManager()
        assert var28 is not None
        var29 = var28.ensure_config_dir_exists()
        assert var29 is None
        var30 = ''
        var31 = module0.BaseJSONConfigManager()
        assert var31 is not None
        var32 = var31.get(var30)
        assert var32 is not None
        var33 = module0.BaseJSONConfigManager()
        assert var33 is not None
        var34 = {var31: var33, var30: var32, var31: var30}
        var35 = var31.get(var30, var34)
        assert var35 is not None
        var36 = module0.BaseJSONConfigManager()
        assert var36 is not None
        var37 = var36.ensure_config_dir_exists()
        assert var37 is None
        var38 = {}
        var39 = module0.BaseJSONConfigManager(**var38)
        assert var39 is not None
        var40 = var39.ensure_config_dir_exists()
        assert var40 is None
        var41 = var39.ensure_config_dir_exists()
        assert var41 is None
        var42 = var39.ensure_config_dir_exists()
        assert var42 is None
        var43 = ''
        var44 = module0.BaseJSONConfigManager()
        assert var44 is not None
        var45 = var44.get(var43)
        assert var45 is not None
        var46 = var39.ensure_config_dir_exists()
        assert var46 is None
        var47 = ''
        var48 = module0.BaseJSONConfigManager()
        assert var48 is not None
        var49 = var48.get(var47)
        assert var49 is not None
        var50 = var48.ensure_config_dir_exists()
        assert var50 is None
        var51 = var48.ensure_config_dir_exists()
        assert var51 is None
        var52 = module0.BaseJSONConfigManager()
        assert var52 is not None
        var53 = None
        var54 = 'P; C\toeEq}\\e<*6'
        var55 = module0.remove_defaults(var53, var54)
    except BaseException:
        pass


def test_case_389():
    try:
        var0 = ''
        var1 = module0.BaseJSONConfigManager()
        assert var1 is not None
        var2 = var1.get(var0)
        assert var2 is not None
        var3 = module0.BaseJSONConfigManager()
        assert var3 is not None
        var4 = {}
        var5 = module0.BaseJSONConfigManager(**var4)
        assert var5 is not None
        var6 = var5.ensure_config_dir_exists()
        assert var6 is None
        var7 = var5.ensure_config_dir_exists()
        assert var7 is None
        var8 = '\tYV'
        var9 = {var8: var8}
        var10 = module0.BaseJSONConfigManager(**var9)
        assert var10 is not None
        var11 = var10.ensure_config_dir_exists()
        assert var11 is None
        var12 = var10.ensure_config_dir_exists()
        assert var12 is None
        var13 = 'Qe'
        var14 = {var13: var13}
        var15 = module0.BaseJSONConfigManager(**var14)
        assert var15 is not None
        var16 = {}
        var17 = module0.BaseJSONConfigManager(**var16)
        assert var17 is not None
        var18 = var17.ensure_config_dir_exists()
        assert var18 is None
        var19 = var17.ensure_config_dir_exists()
        assert var19 is None
        var20 = var17.ensure_config_dir_exists()
        assert var20 is None
        var21 = module0.BaseJSONConfigManager()
        assert var21 is not None
        var22 = var21.ensure_config_dir_exists()
        assert var22 is None
        var23 = '9'
        var24 = module0.BaseJSONConfigManager()
        assert var24 is not None
        var25 = var24.file_name(var23)
        assert var25 == './9.json'
        var26 = None
        var27 = 1013
        var28 = var15.set(var26, var27)
    except BaseException:
        pass


def test_case_390():
    try:
        var0 = '\tYV'
        var1 = {var0: var0}
        var2 = module0.BaseJSONConfigManager(**var1)
        assert var2 is not None
        var3 = var2.ensure_config_dir_exists()
        assert var3 is None
        var4 = {}
        var5 = module0.BaseJSONConfigManager(**var4)
        assert var5 is not None
        var6 = var5.ensure_config_dir_exists()
        assert var6 is None
        var7 = module0.BaseJSONConfigManager()
        assert var7 is not None
        var8 = var7.ensure_config_dir_exists()
        assert var8 is None
        var9 = ''
        var10 = module0.BaseJSONConfigManager()
        assert var10 is not None
        var11 = var10.get(var9)
        assert var11 is not None
        var12 = module0.BaseJSONConfigManager()
        assert var12 is not None
        var13 = {var10: var12, var9: var11, var10: var9}
        var14 = var10.get(var9, var13)
        assert var14 is not None
        var15 = 'Qe'
        var16 = {var15: var15}
        var17 = module0.BaseJSONConfigManager(**var16)
        assert var17 is not None
        var18 = module0.BaseJSONConfigManager()
        assert var18 is not None
        var19 = 'K&H94v*%\r'
        var20 = {var19: var19, var19: var19, var19: var19}
        var21 = module0.BaseJSONConfigManager(**var20)
        assert var21 is not None
        var22 = var21.ensure_config_dir_exists()
        assert var22 is None
        var23 = var21.ensure_config_dir_exists()
        assert var23 is None
        var24 = 'python (.py)'
        var25 = var5.update(var13, var24)
    except BaseException:
        pass


def test_case_391():
    try:
        var0 = {}
        var1 = module0.BaseJSONConfigManager(**var0)
        assert var1 is not None
        var2 = var1.ensure_config_dir_exists()
        assert var2 is None
        var3 = var1.ensure_config_dir_exists()
        assert var3 is None
        var4 = var1.ensure_config_dir_exists()
        assert var4 is None
        var5 = ''
        var6 = module0.BaseJSONConfigManager()
        assert var6 is not None
        var7 = var6.get(var5)
        assert var7 is not None
        var8 = var6.ensure_config_dir_exists()
        assert var8 is None
        var9 = var6.ensure_config_dir_exists()
        assert var9 is None
        var10 = module0.BaseJSONConfigManager()
        assert var10 is not None
        var11 = {}
        var12 = module0.BaseJSONConfigManager(**var11)
        assert var12 is not None
        var13 = ''
        var14 = module0.BaseJSONConfigManager()
        assert var14 is not None
        var15 = var14.get(var13)
        assert var15 is not None
        var16 = var14.ensure_config_dir_exists()
        assert var16 is None
        var17 = var14.ensure_config_dir_exists()
        assert var17 is None
        var18 = ''
        var19 = module0.BaseJSONConfigManager()
        assert var19 is not None
        var20 = var19.get(var18)
        assert var20 is not None
        var21 = module0.BaseJSONConfigManager()
        assert var21 is not None
        var22 = var21.ensure_config_dir_exists()
        assert var22 is None
        var23 = ''
        var24 = module0.BaseJSONConfigManager()
        assert var24 is not None
        var25 = var24.get(var23)
        assert var25 is not None
        var26 = module0.BaseJSONConfigManager()
        assert var26 is not None
        var27 = ''
        var28 = module0.BaseJSONConfigManager()
        assert var28 is not None
        var29 = var28.get(var27)
        assert var29 is not None
        var30 = module0.BaseJSONConfigManager()
        assert var30 is not None
        var31 = {var28: var30, var27: var29, var28: var27}
        var32 = var28.get(var27, var31)
        assert var32 is not None
        var33 = ''
        var34 = module0.BaseJSONConfigManager()
        assert var34 is not None
        var35 = var34.get(var33)
        assert var35 is not None
        var36 = var34.ensure_config_dir_exists()
        assert var36 is None
        var37 = 'K&H94v*%\r'
        var38 = {var37: var37, var37: var37, var37: var37}
        var39 = module0.BaseJSONConfigManager(**var38)
        assert var39 is not None
        var40 = var39.ensure_config_dir_exists()
        assert var40 is None
        var41 = var39.directory(var37)
        assert var41 == './K&H94v*%\r.d'
        var42 = ''
        var43 = module0.BaseJSONConfigManager()
        assert var43 is not None
        var44 = var43.get(var42)
        assert var44 is not None
        var45 = 'K&H94v*%\r'
        var46 = {var45: var45, var45: var45, var45: var45}
        var47 = module0.BaseJSONConfigManager(**var46)
        assert var47 is not None
        var48 = var47.ensure_config_dir_exists()
        assert var48 is None
        var49 = True
        var50 = [var31, var7]
        var51 = var6.update(var49, var50)
    except BaseException:
        pass


def test_case_392():
    try:
        var0 = 'zo'
        var1 = None
        var2 = {var0: var0, var0: var1, var0: var0}
        var3 = (
            b'\xa4\x10-w\x97R\x84\x99\x90?\xb2\xcaq\xa9\xdd4\xcd\x17\x9d\x0b')
        var4 = 'C5}t4`(q$'
        var5 = {var4: var4, var4: var4}
        var6 = module0.BaseJSONConfigManager(**var5)
        assert var6 is not None
        var7 = var6.update(var2, var3)
    except BaseException:
        pass


def test_case_393():
    try:
        var0 = '\tYV'
        var1 = {var0: var0}
        var2 = module0.BaseJSONConfigManager(**var1)
        assert var2 is not None
        var3 = var2.ensure_config_dir_exists()
        assert var3 is None
        var4 = var2.ensure_config_dir_exists()
        assert var4 is None
        var5 = True
        var6 = var5,
        var7 = b'\x1ex\xddf\x0e\xf7\x00(\x07\x80'
        var8 = module0.recursive_update(var6, var7)
    except BaseException:
        pass


def test_case_394():
    try:
        var0 = 'K&H94v*%\r'
        var1 = {var0: var0, var0: var0, var0: var0}
        var2 = module0.BaseJSONConfigManager(**var1)
        assert var2 is not None
        var3 = var2.ensure_config_dir_exists()
        assert var3 is None
        var4 = var2.directory(var0)
        assert var4 == './K&H94v*%\r.d'
        var5 = ''
        var6 = module0.BaseJSONConfigManager()
        assert var6 is not None
        var7 = var6.get(var5)
        assert var7 is not None
        var8 = ''
        var9 = module0.BaseJSONConfigManager()
        assert var9 is not None
        var10 = var9.get(var8)
        assert var10 is not None
        var11 = var9.ensure_config_dir_exists()
        assert var11 is None
        var12 = var9.ensure_config_dir_exists()
        assert var12 is None
        var13 = module0.BaseJSONConfigManager()
        assert var13 is not None
        var14 = module0.BaseJSONConfigManager()
        assert var14 is not None
        var15 = None
        var16 = var2.directory(var15)
    except BaseException:
        pass


def test_case_395():
    try:
        var0 = ''
        var1 = module0.BaseJSONConfigManager()
        assert var1 is not None
        var2 = var1.get(var0)
        assert var2 is not None
        var3 = module0.BaseJSONConfigManager()
        assert var3 is not None
        var4 = module0.BaseJSONConfigManager()
        assert var4 is not None
        var5 = module0.BaseJSONConfigManager()
        assert var5 is not None
        var6 = '9'
        var7 = module0.BaseJSONConfigManager()
        assert var7 is not None
        var8 = var7.file_name(var6)
        assert var8 == './9.json'
        var9 = {}
        var10 = module0.BaseJSONConfigManager(**var9)
        assert var10 is not None
        var11 = var10.ensure_config_dir_exists()
        assert var11 is None
        var12 = module0.BaseJSONConfigManager()
        assert var12 is not None
        var13 = var12.ensure_config_dir_exists()
        assert var13 is None
        var14 = ''
        var15 = module0.BaseJSONConfigManager()
        assert var15 is not None
        var16 = var15.get(var14)
        assert var16 is not None
        var17 = var15.ensure_config_dir_exists()
        assert var17 is None
        var18 = '\tYV'
        var19 = {var18: var18}
        var20 = module0.BaseJSONConfigManager(**var19)
        assert var20 is not None
        var21 = var20.ensure_config_dir_exists()
        assert var21 is None
        var22 = var20.ensure_config_dir_exists()
        assert var22 is None
        var23 = {}
        var24 = module0.BaseJSONConfigManager(**var9)
        assert var24 is not None
        var25 = var24.file_name(var23)
    except BaseException:
        pass


def test_case_396():
    try:
        var0 = '4'
        var1 = '~!'
        var2 = {var0: var0, var0: var0, var1: var1, var1: var0}
        var3 = module0.BaseJSONConfigManager(**var2)
        assert var3 is not None
        var4 = b'\x15\x8a\xf4\xe8s\x8fP,uM\xdf"\xfdz\xd2'
        var5 = [var4]
        var6 = [var1, var5, var5, var5]
        var7 = var4, var6, var3, var3
        var8 = module0.BaseJSONConfigManager()
        assert var8 is not None
        var9 = var8.set(var3, var7)
    except BaseException:
        pass


def test_case_397():
    try:
        var0 = {}
        var1 = module0.BaseJSONConfigManager(**var0)
        assert var1 is not None
        var2 = var1.ensure_config_dir_exists()
        assert var2 is None
        var3 = {}
        var4 = module0.BaseJSONConfigManager(**var3)
        assert var4 is not None
        var5 = var4.ensure_config_dir_exists()
        assert var5 is None
        var6 = var4.ensure_config_dir_exists()
        assert var6 is None
        var7 = var4.ensure_config_dir_exists()
        assert var7 is None
        var8 = ''
        var9 = module0.BaseJSONConfigManager()
        assert var9 is not None
        var10 = var9.get(var8)
        assert var10 is not None
        var11 = var4.ensure_config_dir_exists()
        assert var11 is None
        var12 = -1222.37
        var13 = module0.remove_defaults(var12, var1)
    except BaseException:
        pass


def test_case_398():
    try:
        var0 = '\tYV'
        var1 = {var0: var0}
        var2 = module0.BaseJSONConfigManager(**var1)
        assert var2 is not None
        var3 = var2.ensure_config_dir_exists()
        assert var3 is None
        var4 = var2.ensure_config_dir_exists()
        assert var4 is None
        var5 = module0.BaseJSONConfigManager()
        assert var5 is not None
        var6 = var5.ensure_config_dir_exists()
        assert var6 is None
        var7 = ''
        var8 = module0.BaseJSONConfigManager()
        assert var8 is not None
        var9 = var8.get(var7)
        assert var9 is not None
        var10 = 'K&H94v*%\r'
        var11 = {var10: var10, var10: var10, var10: var10}
        var12 = module0.BaseJSONConfigManager(**var11)
        assert var12 is not None
        var13 = var12.ensure_config_dir_exists()
        assert var13 is None
        var14 = {}
        var15 = []
        var16 = module0.remove_defaults(var14, var15)
        assert var16 is None
        var17 = {}
        var18 = module0.BaseJSONConfigManager(**var17)
        assert var18 is not None
        var19 = var18.ensure_config_dir_exists()
        assert var19 is None
        var20 = "@^8 YSBOCxv2_Uy'\t"
        var21 = var18.file_name(var20)
        assert var21 == "./@^8 YSBOCxv2_Uy'\t.json"
        var22 = {}
        var23 = module0.BaseJSONConfigManager(**var22)
        assert var23 is not None
        var24 = var23.ensure_config_dir_exists()
        assert var24 is None
        var25 = ''
        var26 = module0.BaseJSONConfigManager()
        assert var26 is not None
        var27 = var26.get(var25)
        assert var27 is not None
        var28 = module0.BaseJSONConfigManager()
        assert var28 is not None
        var29 = var28.ensure_config_dir_exists()
        assert var29 is None
        var30 = module0.BaseJSONConfigManager()
        assert var30 is not None
        var31 = ''
        var32 = module0.BaseJSONConfigManager()
        assert var32 is not None
        var33 = var32.get(var31)
        assert var33 is not None
        var34 = module0.BaseJSONConfigManager()
        assert var34 is not None
        var35 = {var32: var34, var31: var33, var32: var31}
        var36 = var32.get(var31, var35)
        assert var36 is not None
        var37 = 'PA=b='
        var38 = b'Z]$\xe4\xde\x86\xaa\n\xf2\x98Qx.\x08[\xb1'
        var39 = var23.update(var37, var38)
    except BaseException:
        pass


def test_case_399():
    try:
        var0 = ''
        var1 = module0.BaseJSONConfigManager()
        assert var1 is not None
        var2 = var1.get(var0)
        assert var2 is not None
        var3 = module0.BaseJSONConfigManager()
        assert var3 is not None
        var4 = ''
        var5 = module0.BaseJSONConfigManager()
        assert var5 is not None
        var6 = var5.get(var4)
        assert var6 is not None
        var7 = var5.ensure_config_dir_exists()
        assert var7 is None
        var8 = var5.ensure_config_dir_exists()
        assert var8 is None
        var9 = ''
        var10 = module0.BaseJSONConfigManager()
        assert var10 is not None
        var11 = var10.get(var9)
        assert var11 is not None
        var12 = module0.BaseJSONConfigManager()
        assert var12 is not None
        var13 = module0.BaseJSONConfigManager()
        assert var13 is not None
        var14 = module0.BaseJSONConfigManager()
        assert var14 is not None
        var15 = {}
        var16 = module0.BaseJSONConfigManager(**var15)
        assert var16 is not None
        var17 = var16.ensure_config_dir_exists()
        assert var17 is None
        var18 = "@^8 YSBOCxv2_Uy'\t"
        var19 = var16.file_name(var18)
        assert var19 == "./@^8 YSBOCxv2_Uy'\t.json"
        var20 = ''
        var21 = module0.BaseJSONConfigManager()
        assert var21 is not None
        var22 = var21.get(var20)
        assert var22 is not None
        var23 = var21.ensure_config_dir_exists()
        assert var23 is None
        var24 = var21.ensure_config_dir_exists()
        assert var24 is None
        var25 = var21.ensure_config_dir_exists()
        assert var25 is None
        var26 = {}
        var27 = module0.BaseJSONConfigManager(**var26)
        assert var27 is not None
        var28 = var27.ensure_config_dir_exists()
        assert var28 is None
        var29 = var27.ensure_config_dir_exists()
        assert var29 is None
        var30 = var27.ensure_config_dir_exists()
        assert var30 is None
        var31 = ''
        var32 = module0.BaseJSONConfigManager()
        assert var32 is not None
        var33 = var32.get(var31)
        assert var33 is not None
        var34 = var27.ensure_config_dir_exists()
        assert var34 is None
        var35 = '\tYV'
        var36 = {var35: var35}
        var37 = module0.BaseJSONConfigManager(**var36)
        assert var37 is not None
        var38 = var37.ensure_config_dir_exists()
        assert var38 is None
        var39 = var37.ensure_config_dir_exists()
        assert var39 is None
        var40 = '\tYV'
        var41 = {var40: var40}
        var42 = module0.BaseJSONConfigManager(**var41)
        assert var42 is not None
        var43 = var42.ensure_config_dir_exists()
        assert var43 is None
        var44 = {var33: var16}
    except BaseException:
        pass


def test_case_400():
    try:
        var0 = None
        var1 = '($Wk6kMh{\rSw|dx%3q'
        var2 = 'Z+}\\\\5M-|[`*P'
        var3 = 'login.html'
        var4 = -259
        var5 = {var1: var1, var2: var2, var3: var4, var1: var4}
        var6 = module0.BaseJSONConfigManager(**var5)
        assert var6 is not None
        var7 = module0.BaseJSONConfigManager()
        assert var7 is not None
        var8 = var7.get(var0, var6)
    except BaseException:
        pass


def test_case_401():
    try:
        var0 = ''
        var1 = module0.BaseJSONConfigManager()
        assert var1 is not None
        var2 = var1.get(var0)
        assert var2 is not None
        var3 = module0.BaseJSONConfigManager()
        assert var3 is not None
        var4 = var3.ensure_config_dir_exists()
        assert var4 is None
        var5 = ''
        var6 = module0.BaseJSONConfigManager()
        assert var6 is not None
        var7 = var6.get(var5)
        assert var7 is not None
        var8 = module0.BaseJSONConfigManager()
        assert var8 is not None
        var9 = None
        var10 = None
        var11 = module0.recursive_update(var9, var10)
    except BaseException:
        pass


def test_case_402():
    try:
        var0 = ''
        var1 = module0.BaseJSONConfigManager()
        assert var1 is not None
        var2 = var1.get(var0)
        assert var2 is not None
        var3 = var1.ensure_config_dir_exists()
        assert var3 is None
        var4 = var1.ensure_config_dir_exists()
        assert var4 is None
        var5 = ''
        var6 = module0.BaseJSONConfigManager()
        assert var6 is not None
        var7 = var6.get(var5)
        assert var7 is not None
        var8 = module0.BaseJSONConfigManager()
        assert var8 is not None
        var9 = module0.BaseJSONConfigManager()
        assert var9 is not None
        var10 = module0.BaseJSONConfigManager()
        assert var10 is not None
        var11 = b'\x15.\x97\x1a\xaa\xf2\xa2k\x8c\xa4\x1e\x91>'
        var12 = '-myU|t8'
        var13 = module0.recursive_update(var11, var12)
    except BaseException:
        pass


def test_case_403():
    try:
        var0 = ''
        var1 = module0.BaseJSONConfigManager()
        assert var1 is not None
        var2 = var1.get(var0)
        assert var2 is not None
        var3 = var1.ensure_config_dir_exists()
        assert var3 is None
        var4 = var1.ensure_config_dir_exists()
        assert var4 is None
        var5 = module0.BaseJSONConfigManager()
        assert var5 is not None
        var6 = module0.BaseJSONConfigManager()
        assert var6 is not None
        var7 = module0.BaseJSONConfigManager()
        assert var7 is not None
        var8 = var7.ensure_config_dir_exists()
        assert var8 is None
        var9 = module0.BaseJSONConfigManager()
        assert var9 is not None
        var10 = 'K&H94v*%\r'
        var11 = {var10: var10, var10: var10, var10: var10}
        var12 = module0.BaseJSONConfigManager(**var11)
        assert var12 is not None
        var13 = var12.ensure_config_dir_exists()
        assert var13 is None
        var14 = var12.ensure_config_dir_exists()
        assert var14 is None
        var15 = '\tYV'
        var16 = {var15: var15}
        var17 = module0.BaseJSONConfigManager(**var16)
        assert var17 is not None
        var18 = var17.ensure_config_dir_exists()
        assert var18 is None
        var19 = var17.ensure_config_dir_exists()
        assert var19 is None
        var20 = ''
        var21 = module0.BaseJSONConfigManager()
        assert var21 is not None
        var22 = var21.get(var20)
        assert var22 is not None
        var23 = var21.ensure_config_dir_exists()
        assert var23 is None
        var24 = ''
        var25 = module0.BaseJSONConfigManager()
        assert var25 is not None
        var26 = var25.get(var24)
        assert var26 is not None
        var27 = module0.BaseJSONConfigManager()
        assert var27 is not None
        var28 = module0.BaseJSONConfigManager()
        assert var28 is not None
        var29 = module0.BaseJSONConfigManager()
        assert var29 is not None
        var30 = 'K&H94v*%\r'
        var31 = {var30: var30, var30: var30, var30: var30}
        var32 = module0.BaseJSONConfigManager(**var31)
        assert var32 is not None
        var33 = var32.ensure_config_dir_exists()
        assert var33 is None
        var34 = {}
        var35 = []
        var36 = module0.remove_defaults(var34, var35)
        assert var36 is None
        var37 = False
        var38 = 1984.38094
        var39 = var27.set(var37, var38)
    except BaseException:
        pass


def test_case_404():
    try:
        var0 = ''
        var1 = module0.BaseJSONConfigManager()
        assert var1 is not None
        var2 = var1.get(var0)
        assert var2 is not None
        var3 = module0.BaseJSONConfigManager()
        assert var3 is not None
        var4 = ''
        var5 = module0.BaseJSONConfigManager()
        assert var5 is not None
        var6 = var5.get(var4)
        assert var6 is not None
        var7 = module0.BaseJSONConfigManager()
        assert var7 is not None
        var8 = var7.ensure_config_dir_exists()
        assert var8 is None
        var9 = {}
        var10 = module0.BaseJSONConfigManager(**var9)
        assert var10 is not None
        var11 = var10.ensure_config_dir_exists()
        assert var11 is None
        var12 = var10.ensure_config_dir_exists()
        assert var12 is None
        var13 = var10.ensure_config_dir_exists()
        assert var13 is None
        var14 = 'K&H94v*%\r'
        var15 = {var14: var14, var14: var14, var14: var14}
        var16 = module0.BaseJSONConfigManager(**var15)
        assert var16 is not None
        var17 = var16.ensure_config_dir_exists()
        assert var17 is None
        var18 = module0.BaseJSONConfigManager()
        assert var18 is not None
        var19 = 'K&H94v*%\r'
        var20 = {var19: var19, var19: var19, var19: var19}
        var21 = module0.BaseJSONConfigManager(**var20)
        assert var21 is not None
        var22 = var21.ensure_config_dir_exists()
        assert var22 is None
        var23 = var21.directory(var19)
        assert var23 == './K&H94v*%\r.d'
        var24 = ''
        var25 = module0.BaseJSONConfigManager()
        assert var25 is not None
        var26 = var25.get(var24)
        assert var26 is not None
        var27 = module0.BaseJSONConfigManager()
        assert var27 is not None
        var28 = ''
        var29 = module0.BaseJSONConfigManager()
        assert var29 is not None
        var30 = var29.get(var28)
        assert var30 is not None
        var31 = module0.BaseJSONConfigManager()
        assert var31 is not None
        var32 = var31.file_name(var28)
        assert var32 == './.json'
        var33 = set()
        var34 = None
        var35 = module0.remove_defaults(var33, var34)
    except BaseException:
        pass


def test_case_405():
    try:
        var0 = {}
        var1 = module0.BaseJSONConfigManager(**var0)
        assert var1 is not None
        var2 = var1.ensure_config_dir_exists()
        assert var2 is None
        var3 = var1.ensure_config_dir_exists()
        assert var3 is None
        var4 = ''
        var5 = module0.BaseJSONConfigManager()
        assert var5 is not None
        var6 = var5.get(var4)
        assert var6 is not None
        var7 = module0.BaseJSONConfigManager()
        assert var7 is not None
        var8 = None
        var9 = 1744
        var10 = module0.recursive_update(var8, var9)
    except BaseException:
        pass


def test_case_406():
    try:
        var0 = ''
        var1 = module0.BaseJSONConfigManager()
        assert var1 is not None
        var2 = var1.get(var0)
        assert var2 is not None
        var3 = var1.ensure_config_dir_exists()
        assert var3 is None
        var4 = var1.ensure_config_dir_exists()
        assert var4 is None
        var5 = var1.ensure_config_dir_exists()
        assert var5 is None
        var6 = module0.BaseJSONConfigManager()
        assert var6 is not None
        var7 = 'K&H94v*%\r'
        var8 = {var7: var7, var7: var7, var7: var7}
        var9 = module0.BaseJSONConfigManager(**var8)
        assert var9 is not None
        var10 = var9.ensure_config_dir_exists()
        assert var10 is None
        var11 = var9.ensure_config_dir_exists()
        assert var11 is None
        var12 = 1938
        var13 = b'(\xc3\xf6g\xf0\x1ec?'
        var14 = module0.remove_defaults(var12, var13)
    except BaseException:
        pass


def test_case_407():
    try:
        var0 = 235.0186
        var1 = 'uAZI:Z+xM19oe{k_og*'
        var2 = module0.BaseJSONConfigManager()
        assert var2 is not None
        var3 = var2.set(var0, var1)
    except BaseException:
        pass


def test_case_408():
    try:
        var0 = {}
        var1 = module0.BaseJSONConfigManager(**var0)
        assert var1 is not None
        var2 = var1.ensure_config_dir_exists()
        assert var2 is None
        var3 = var1.ensure_config_dir_exists()
        assert var3 is None
        var4 = 'K&H94v*%\r'
        var5 = {var4: var4, var4: var4, var4: var4}
        var6 = module0.BaseJSONConfigManager(**var5)
        assert var6 is not None
        var7 = var6.ensure_config_dir_exists()
        assert var7 is None
        var8 = 'K&H94v*%\r'
        var9 = {var8: var8, var8: var8, var8: var8}
        var10 = module0.BaseJSONConfigManager(**var9)
        assert var10 is not None
        var11 = var10.ensure_config_dir_exists()
        assert var11 is None
        var12 = var10.directory(var8)
        assert var12 == './K&H94v*%\r.d'
        var13 = module0.BaseJSONConfigManager()
        assert var13 is not None
        var14 = {}
        var15 = module0.BaseJSONConfigManager(**var14)
        assert var15 is not None
        var16 = b'\xa0\x06\xfb\x10\xc5t\xc3\xce\xe6\x15\xc5\xdbS'
        var17 = var13.get(var16)
    except BaseException:
        pass


def test_case_409():
    try:
        var0 = ''
        var1 = module0.BaseJSONConfigManager()
        assert var1 is not None
        var2 = var1.get(var0)
        assert var2 is not None
        var3 = module0.BaseJSONConfigManager()
        assert var3 is not None
        var4 = {var1: var3, var0: var2, var1: var0}
        var5 = var1.get(var0, var4)
        assert var5 is not None
        var6 = {}
        var7 = module0.BaseJSONConfigManager(**var6)
        assert var7 is not None
        var8 = var7.ensure_config_dir_exists()
        assert var8 is None
        var9 = var7.ensure_config_dir_exists()
        assert var9 is None
        var10 = var7.ensure_config_dir_exists()
        assert var10 is None
        var11 = 'K&H94v*%\r'
        var12 = {var11: var11, var11: var11, var11: var11}
        var13 = module0.BaseJSONConfigManager(**var12)
        assert var13 is not None
        var14 = var13.ensure_config_dir_exists()
        assert var14 is None
        var15 = var13.directory(var11)
        assert var15 == './K&H94v*%\r.d'
        var16 = module0.BaseJSONConfigManager()
        assert var16 is not None
        var17 = var16.ensure_config_dir_exists()
        assert var17 is None
        var18 = 996.8707
        var19 = var1.get(var18)
    except BaseException:
        pass


def test_case_410():
    try:
        var0 = ''
        var1 = module0.BaseJSONConfigManager()
        assert var1 is not None
        var2 = var1.get(var0)
        assert var2 is not None
        var3 = var1.ensure_config_dir_exists()
        assert var3 is None
        var4 = var1.ensure_config_dir_exists()
        assert var4 is None
        var5 = var1.ensure_config_dir_exists()
        assert var5 is None
        var6 = 'Qe'
        var7 = {var6: var6}
        var8 = module0.BaseJSONConfigManager(**var7)
        assert var8 is not None
        var9 = '\tYV'
        var10 = {var9: var9}
        var11 = module0.BaseJSONConfigManager(**var10)
        assert var11 is not None
        var12 = var11.ensure_config_dir_exists()
        assert var12 is None
        var13 = ''
        var14 = module0.BaseJSONConfigManager()
        assert var14 is not None
        var15 = var14.get(var13)
        assert var15 is not None
        var16 = module0.BaseJSONConfigManager()
        assert var16 is not None
        var17 = ''
        var18 = module0.BaseJSONConfigManager()
        assert var18 is not None
        var19 = var18.get(var17)
        assert var19 is not None
        var20 = module0.BaseJSONConfigManager()
        assert var20 is not None
        var21 = var20.file_name(var17)
        assert var21 == './.json'
        var22 = {}
        var23 = module0.BaseJSONConfigManager(**var22)
        assert var23 is not None
        var24 = var23.ensure_config_dir_exists()
        assert var24 is None
        var25 = var23.ensure_config_dir_exists()
        assert var25 is None
        var26 = var23.ensure_config_dir_exists()
        assert var26 is None
        var27 = {}
        var28 = module0.BaseJSONConfigManager(**var27)
        assert var28 is not None
        var29 = ''
        var30 = module0.BaseJSONConfigManager()
        assert var30 is not None
        var31 = var30.get(var29)
        assert var31 is not None
        var32 = var30.ensure_config_dir_exists()
        assert var32 is None
        var33 = var30.ensure_config_dir_exists()
        assert var33 is None
        var34 = '9'
        var35 = module0.BaseJSONConfigManager()
        assert var35 is not None
        var36 = var35.file_name(var34)
        assert var36 == './9.json'
        var37 = [var21]
        var38 = var16.file_name(var37)
    except BaseException:
        pass


def test_case_411():
    try:
        var0 = b'g\xd1\x9d$`'
        var1 = 'Lw"\'|t\x0cz|x^RM4Z]M"'
        var2 = 'login.html'
        var3 = '^]b~)B@'
        var4 = {var1: var1, var2: var3}
        var5 = module0.BaseJSONConfigManager(**var4)
        assert var5 is not None
        var6 = var5.file_name(var0)
    except BaseException:
        pass


def test_case_412():
    try:
        var0 = 'K&H94v*%\r'
        var1 = {var0: var0, var0: var0, var0: var0}
        var2 = module0.BaseJSONConfigManager(**var1)
        assert var2 is not None
        var3 = var2.ensure_config_dir_exists()
        assert var3 is None
        var4 = var2.directory(var0)
        assert var4 == './K&H94v*%\r.d'
        var5 = ''
        var6 = module0.BaseJSONConfigManager()
        assert var6 is not None
        var7 = var6.get(var5)
        assert var7 is not None
        var8 = module0.BaseJSONConfigManager()
        assert var8 is not None
        var9 = True
        var10 = module0.remove_defaults(var0, var9)
    except BaseException:
        pass


def test_case_413():
    try:
        var0 = ''
        var1 = module0.BaseJSONConfigManager()
        assert var1 is not None
        var2 = var1.get(var0)
        assert var2 is not None
        var3 = module0.BaseJSONConfigManager()
        assert var3 is not None
        var4 = var3.ensure_config_dir_exists()
        assert var4 is None
        var5 = ''
        var6 = module0.BaseJSONConfigManager()
        assert var6 is not None
        var7 = var6.get(var5)
        assert var7 is not None
        var8 = module0.BaseJSONConfigManager()
        assert var8 is not None
        var9 = ''
        var10 = module0.BaseJSONConfigManager()
        assert var10 is not None
        var11 = var10.get(var9)
        assert var11 is not None
        var12 = module0.BaseJSONConfigManager()
        assert var12 is not None
        var13 = module0.BaseJSONConfigManager()
        assert var13 is not None
        var14 = 'K&H94v*%\r'
        var15 = {var14: var14, var14: var14, var14: var14}
        var16 = module0.BaseJSONConfigManager(**var15)
        assert var16 is not None
        var17 = var16.ensure_config_dir_exists()
        assert var17 is None
        var18 = var16.ensure_config_dir_exists()
        assert var18 is None
        var19 = 'K&H94v*%\r'
        var20 = {var19: var19, var19: var19, var19: var19}
        var21 = module0.BaseJSONConfigManager(**var20)
        assert var21 is not None
        var22 = var21.ensure_config_dir_exists()
        assert var22 is None
        var23 = -818.0
        var24 = {var5: var8, var22: var17, var23: var4}
        var25 = [var16, var12]
        var26 = var24, var25
        var27 = var13.update(var26, var0)
    except BaseException:
        pass


def test_case_414():
    try:
        var0 = {}
        var1 = module0.BaseJSONConfigManager(**var0)
        assert var1 is not None
        var2 = var1.ensure_config_dir_exists()
        assert var2 is None
        var3 = "@^8 YSBOCxv2_Uy'\t"
        var4 = var1.file_name(var3)
        assert var4 == "./@^8 YSBOCxv2_Uy'\t.json"
        var5 = 'K&H94v*%\r'
        var6 = {var5: var5, var5: var5, var5: var5}
        var7 = module0.BaseJSONConfigManager(**var6)
        assert var7 is not None
        var8 = var7.ensure_config_dir_exists()
        assert var8 is None
        var9 = '\tYV'
        var10 = {var9: var9}
        var11 = module0.BaseJSONConfigManager(**var10)
        assert var11 is not None
        var12 = var11.ensure_config_dir_exists()
        assert var12 is None
        var13 = 'K&H94v*%\r'
        var14 = {var13: var13, var13: var13, var13: var13}
        var15 = module0.BaseJSONConfigManager(**var14)
        assert var15 is not None
        var16 = var15.ensure_config_dir_exists()
        assert var16 is None
        var17 = var15.directory(var13)
        assert var17 == './K&H94v*%\r.d'
        var18 = {}
        var19 = module0.BaseJSONConfigManager(**var18)
        assert var19 is not None
        var20 = 'K&H94v*%\r'
        var21 = {var20: var20, var20: var20, var20: var20}
        var22 = module0.BaseJSONConfigManager(**var21)
        assert var22 is not None
        var23 = var22.ensure_config_dir_exists()
        assert var23 is None
        var24 = {}
        var25 = []
        var26 = module0.remove_defaults(var24, var25)
        assert var26 is None
        var27 = {}
        var28 = module0.BaseJSONConfigManager(**var27)
        assert var28 is not None
        var29 = var28.ensure_config_dir_exists()
        assert var29 is None
        var30 = var28.ensure_config_dir_exists()
        assert var30 is None
        var31 = -1455
        var32 = module0.remove_defaults(var31, var11)
    except BaseException:
        pass


def test_case_415():
    try:
        var0 = {}
        var1 = module0.BaseJSONConfigManager(**var0)
        assert var1 is not None
        var2 = var1.ensure_config_dir_exists()
        assert var2 is None
        var3 = ''
        var4 = module0.BaseJSONConfigManager()
        assert var4 is not None
        var5 = var4.get(var3)
        assert var5 is not None
        var6 = module0.BaseJSONConfigManager()
        assert var6 is not None
        var7 = var6.ensure_config_dir_exists()
        assert var7 is None
        var8 = module0.BaseJSONConfigManager()
        assert var8 is not None
        var9 = {}
        var10 = module0.BaseJSONConfigManager(**var9)
        assert var10 is not None
        var11 = var10.ensure_config_dir_exists()
        assert var11 is None
        var12 = var10.ensure_config_dir_exists()
        assert var12 is None
        var13 = var10.ensure_config_dir_exists()
        assert var13 is None
        var14 = '\tYV'
        var15 = {var14: var14}
        var16 = module0.BaseJSONConfigManager(**var15)
        assert var16 is not None
        var17 = var16.ensure_config_dir_exists()
        assert var17 is None
        var18 = ''
        var19 = module0.BaseJSONConfigManager()
        assert var19 is not None
        var20 = var19.get(var18)
        assert var20 is not None
        var21 = module0.BaseJSONConfigManager()
        assert var21 is not None
        var22 = var21.ensure_config_dir_exists()
        assert var22 is None
        var23 = ''
        var24 = module0.BaseJSONConfigManager()
        assert var24 is not None
        var25 = var24.get(var23)
        assert var25 is not None
        var26 = module0.BaseJSONConfigManager()
        assert var26 is not None
        var27 = {}
        var28 = module0.BaseJSONConfigManager(**var27)
        assert var28 is not None
        var29 = var28.ensure_config_dir_exists()
        assert var29 is None
        var30 = 'Qe'
        var31 = {var30: var30}
        var32 = module0.BaseJSONConfigManager(**var31)
        assert var32 is not None
        var33 = {}
        var34 = module0.BaseJSONConfigManager(**var33)
        assert var34 is not None
        var35 = var34.ensure_config_dir_exists()
        assert var35 is None
        var36 = "@^8 YSBOCxv2_Uy'\t"
        var37 = var34.file_name(var36)
        assert var37 == "./@^8 YSBOCxv2_Uy'\t.json"
        var38 = ''
        var39 = module0.BaseJSONConfigManager()
        assert var39 is not None
        var40 = var39.get(var38)
        assert var40 is not None
        var41 = var39.ensure_config_dir_exists()
        assert var41 is None
        var42 = {}
        var43 = module0.BaseJSONConfigManager(**var42)
        assert var43 is not None
        var44 = var43.ensure_config_dir_exists()
        assert var44 is None
        var45 = var43.ensure_config_dir_exists()
        assert var45 is None
        var46 = var43.ensure_config_dir_exists()
        assert var46 is None
        var47 = ''
        var48 = module0.BaseJSONConfigManager()
        assert var48 is not None
        var49 = var48.get(var47)
        assert var49 is not None
        var50 = var43.ensure_config_dir_exists()
        assert var50 is None
        var51 = True
        var52 = module0.BaseJSONConfigManager()
        assert var52 is not None
        var53 = var52.file_name(var51)
    except BaseException:
        pass


def test_case_416():
    try:
        var0 = '9'
        var1 = module0.BaseJSONConfigManager()
        assert var1 is not None
        var2 = var1.file_name(var0)
        assert var2 == './9.json'
        var3 = ''
        var4 = module0.BaseJSONConfigManager()
        assert var4 is not None
        var5 = var4.get(var3)
        assert var5 is not None
        var6 = module0.BaseJSONConfigManager()
        assert var6 is not None
        var7 = module0.BaseJSONConfigManager()
        assert var7 is not None
        var8 = module0.BaseJSONConfigManager()
        assert var8 is not None
        var9 = ''
        var10 = module0.BaseJSONConfigManager()
        assert var10 is not None
        var11 = var10.get(var9)
        assert var11 is not None
        var12 = {}
        var13 = module0.BaseJSONConfigManager(**var12)
        assert var13 is not None
        var14 = var13.ensure_config_dir_exists()
        assert var14 is None
        var15 = ''
        var16 = module0.BaseJSONConfigManager()
        assert var16 is not None
        var17 = var16.get(var15)
        assert var17 is not None
        var18 = module0.BaseJSONConfigManager()
        assert var18 is not None
        var19 = var18.ensure_config_dir_exists()
        assert var19 is None
        var20 = module0.BaseJSONConfigManager()
        assert var20 is not None
        var21 = ''
        var22 = module0.BaseJSONConfigManager()
        assert var22 is not None
        var23 = var22.get(var21)
        assert var23 is not None
        var24 = module0.BaseJSONConfigManager()
        assert var24 is not None
        var25 = var24.ensure_config_dir_exists()
        assert var25 is None
        var26 = {}
        var27 = module0.BaseJSONConfigManager(**var26)
        assert var27 is not None
        var28 = ''
        var29 = module0.BaseJSONConfigManager()
        assert var29 is not None
        var30 = var29.get(var28)
        assert var30 is not None
        var31 = var29.ensure_config_dir_exists()
        assert var31 is None
        var32 = var29.ensure_config_dir_exists()
        assert var32 is None
        var33 = 'K&H94v*%\r'
        var34 = {var33: var33, var33: var33, var33: var33}
        var35 = module0.BaseJSONConfigManager(**var34)
        assert var35 is not None
        var36 = var35.ensure_config_dir_exists()
        assert var36 is None
        var37 = b'&\xae\xe2\xf3\xcdo\xd3M\x8d\xc5\xd4\xbb\xc8\xc3'
        var38 = 440
        var39 = module0.remove_defaults(var37, var38)
    except BaseException:
        pass


def test_case_417():
    try:
        var0 = 17
        var1 = -508
        var2 = module0.remove_defaults(var0, var1)
    except BaseException:
        pass


def test_case_418():
    try:
        var0 = '\tYV'
        var1 = {var0: var0}
        var2 = module0.BaseJSONConfigManager(**var1)
        assert var2 is not None
        var3 = var2.ensure_config_dir_exists()
        assert var3 is None
        var4 = var2.ensure_config_dir_exists()
        assert var4 is None
        var5 = ''
        var6 = module0.BaseJSONConfigManager()
        assert var6 is not None
        var7 = var6.get(var5)
        assert var7 is not None
        var8 = module0.BaseJSONConfigManager()
        assert var8 is not None
        var9 = {}
        var10 = module0.BaseJSONConfigManager(**var9)
        assert var10 is not None
        var11 = var10.ensure_config_dir_exists()
        assert var11 is None
        var12 = var10.ensure_config_dir_exists()
        assert var12 is None
        var13 = var10.ensure_config_dir_exists()
        assert var13 is None
        var14 = ''
        var15 = module0.BaseJSONConfigManager()
        assert var15 is not None
        var16 = var15.get(var14)
        assert var16 is not None
        var17 = var10.ensure_config_dir_exists()
        assert var17 is None
        var18 = {}
        var19 = module0.BaseJSONConfigManager(**var18)
        assert var19 is not None
        var20 = var19.ensure_config_dir_exists()
        assert var20 is None
        var21 = var19.ensure_config_dir_exists()
        assert var21 is None
        var22 = var19.ensure_config_dir_exists()
        assert var22 is None
        var23 = ''
        var24 = module0.BaseJSONConfigManager()
        assert var24 is not None
        var25 = var24.get(var23)
        assert var25 is not None
        var26 = module0.BaseJSONConfigManager()
        assert var26 is not None
        var27 = var26.ensure_config_dir_exists()
        assert var27 is None
        var28 = {}
        var29 = module0.BaseJSONConfigManager(**var28)
        assert var29 is not None
        var30 = var29.ensure_config_dir_exists()
        assert var30 is None
        var31 = var29.ensure_config_dir_exists()
        assert var31 is None
        var32 = '9'
        var33 = module0.BaseJSONConfigManager()
        assert var33 is not None
        var34 = var33.file_name(var32)
        assert var34 == './9.json'
        var35 = b'\r\xb4ws\xc3Vy\x00K>\xa8\x81\xc1\x17\xf9'
        var36 = module0.recursive_update(var35, var14)
    except BaseException:
        pass


def test_case_419():
    try:
        var0 = module0.BaseJSONConfigManager()
        assert var0 is not None
        var1 = 'K&H94v*%\r'
        var2 = {var1: var1, var1: var1, var1: var1}
        var3 = module0.BaseJSONConfigManager(**var2)
        assert var3 is not None
        var4 = var3.ensure_config_dir_exists()
        assert var4 is None
        var5 = var3.ensure_config_dir_exists()
        assert var5 is None
        var6 = ''
        var7 = module0.BaseJSONConfigManager()
        assert var7 is not None
        var8 = var7.get(var6)
        assert var8 is not None
        var9 = module0.BaseJSONConfigManager()
        assert var9 is not None
        var10 = module0.BaseJSONConfigManager()
        assert var10 is not None
        var11 = module0.BaseJSONConfigManager()
        assert var11 is not None
        var12 = {}
        var13 = module0.BaseJSONConfigManager(**var12)
        assert var13 is not None
        var14 = var13.ensure_config_dir_exists()
        assert var14 is None
        var15 = var13.ensure_config_dir_exists()
        assert var15 is None
        var16 = var13.ensure_config_dir_exists()
        assert var16 is None
        var17 = ''
        var18 = module0.BaseJSONConfigManager()
        assert var18 is not None
        var19 = var18.get(var17)
        assert var19 is not None
        var20 = var13.ensure_config_dir_exists()
        assert var20 is None
        var21 = 'K&H94v*%\r'
        var22 = {var21: var21, var21: var21, var21: var21}
        var23 = module0.BaseJSONConfigManager(**var22)
        assert var23 is not None
        var24 = var23.ensure_config_dir_exists()
        assert var24 is None
        var25 = ''
        var26 = module0.BaseJSONConfigManager()
        assert var26 is not None
        var27 = var26.get(var25)
        assert var27 is not None
        var28 = module0.BaseJSONConfigManager()
        assert var28 is not None
        var29 = 'Qe'
        var30 = {var29: var29}
        var31 = module0.BaseJSONConfigManager(**var30)
        assert var31 is not None
        var32 = None
        var33 = 4522.5
        var34 = module0.recursive_update(var32, var33)
    except BaseException:
        pass


def test_case_420():
    try:
        var0 = ''
        var1 = module0.BaseJSONConfigManager()
        assert var1 is not None
        var2 = var1.get(var0)
        assert var2 is not None
        var3 = var1.ensure_config_dir_exists()
        assert var3 is None
        var4 = var1.ensure_config_dir_exists()
        assert var4 is None
        var5 = ''
        var6 = module0.BaseJSONConfigManager()
        assert var6 is not None
        var7 = var6.get(var5)
        assert var7 is not None
        var8 = ''
        var9 = module0.BaseJSONConfigManager()
        assert var9 is not None
        var10 = var9.get(var8)
        assert var10 is not None
        var11 = var9.ensure_config_dir_exists()
        assert var11 is None
        var12 = var9.ensure_config_dir_exists()
        assert var12 is None
        var13 = module0.BaseJSONConfigManager()
        assert var13 is not None
        var14 = {}
        var15 = module0.BaseJSONConfigManager(**var14)
        assert var15 is not None
        var16 = var15.ensure_config_dir_exists()
        assert var16 is None
        var17 = var15.ensure_config_dir_exists()
        assert var17 is None
        var18 = var15.ensure_config_dir_exists()
        assert var18 is None
        var19 = '\tYV'
        var20 = {var19: var19}
        var21 = module0.BaseJSONConfigManager(**var20)
        assert var21 is not None
        var22 = var21.ensure_config_dir_exists()
        assert var22 is None
        var23 = {}
        var24 = module0.BaseJSONConfigManager(**var23)
        assert var24 is not None
        var25 = var24.ensure_config_dir_exists()
        assert var25 is None
        var26 = ''
        var27 = module0.BaseJSONConfigManager()
        assert var27 is not None
        var28 = var27.get(var26)
        assert var28 is not None
        var29 = module0.BaseJSONConfigManager()
        assert var29 is not None
        var30 = var29.ensure_config_dir_exists()
        assert var30 is None
        var31 = module0.BaseJSONConfigManager()
        assert var31 is not None
        var32 = 'K&H94v*%\r'
        var33 = {var32: var32, var32: var32, var32: var32}
        var34 = module0.BaseJSONConfigManager(**var33)
        assert var34 is not None
        var35 = var34.ensure_config_dir_exists()
        assert var35 is None
        var36 = {}
        var37 = []
        var38 = module0.remove_defaults(var36, var37)
        assert var38 is None
        var39 = True
        var40 = var9.update(var37, var39)
    except BaseException:
        pass


def test_case_421():
    try:
        var0 = module0.BaseJSONConfigManager()
        assert var0 is not None
        var1 = ''
        var2 = module0.BaseJSONConfigManager()
        assert var2 is not None
        var3 = var2.get(var1)
        assert var3 is not None
        var4 = module0.BaseJSONConfigManager()
        assert var4 is not None
        var5 = ''
        var6 = module0.BaseJSONConfigManager()
        assert var6 is not None
        var7 = var6.get(var5)
        assert var7 is not None
        var8 = module0.BaseJSONConfigManager()
        assert var8 is not None
        var9 = var8.file_name(var5)
        assert var9 == './.json'
        var10 = var8.get(var8)
    except BaseException:
        pass


def test_case_422():
    try:
        var0 = ''
        var1 = module0.BaseJSONConfigManager()
        assert var1 is not None
        var2 = var1.get(var0)
        assert var2 is not None
        var3 = var1.ensure_config_dir_exists()
        assert var3 is None
        var4 = ''
        var5 = module0.BaseJSONConfigManager()
        assert var5 is not None
        var6 = var5.get(var4)
        assert var6 is not None
        var7 = module0.BaseJSONConfigManager()
        assert var7 is not None
        var8 = var7.ensure_config_dir_exists()
        assert var8 is None
        var9 = ''
        var10 = module0.BaseJSONConfigManager()
        assert var10 is not None
        var11 = var10.get(var9)
        assert var11 is not None
        var12 = module0.BaseJSONConfigManager()
        assert var12 is not None
        var13 = {}
        var14 = module0.BaseJSONConfigManager(**var13)
        assert var14 is not None
        var15 = var14.ensure_config_dir_exists()
        assert var15 is None
        var16 = var14.ensure_config_dir_exists()
        assert var16 is None
        var17 = b'\xfd\xcb\xd3'
        var18 = {var1: var14, var1: var17, var11: var6}
    except BaseException:
        pass


def test_case_423():
    try:
        var0 = ''
        var1 = module0.BaseJSONConfigManager()
        assert var1 is not None
        var2 = var1.get(var0)
        assert var2 is not None
        var3 = module0.BaseJSONConfigManager()
        assert var3 is not None
        var4 = module0.BaseJSONConfigManager()
        assert var4 is not None
        var5 = module0.BaseJSONConfigManager()
        assert var5 is not None
        var6 = 'Qe'
        var7 = {var6: var6}
        var8 = module0.BaseJSONConfigManager(**var7)
        assert var8 is not None
        var9 = module0.BaseJSONConfigManager()
        assert var9 is not None
        var10 = {var6, var4, var4}
        var11 = var1.file_name(var10)
    except BaseException:
        pass


def test_case_424():
    try:
        var0 = ''
        var1 = module0.BaseJSONConfigManager()
        assert var1 is not None
        var2 = var1.get(var0)
        assert var2 is not None
        var3 = module0.BaseJSONConfigManager()
        assert var3 is not None
        var4 = var3.ensure_config_dir_exists()
        assert var4 is None
        var5 = ''
        var6 = module0.BaseJSONConfigManager()
        assert var6 is not None
        var7 = var6.get(var5)
        assert var7 is not None
        var8 = module0.BaseJSONConfigManager()
        assert var8 is not None
        var9 = {}
        var10 = module0.BaseJSONConfigManager(**var9)
        assert var10 is not None
        var11 = var10.ensure_config_dir_exists()
        assert var11 is None
        var12 = var10.ensure_config_dir_exists()
        assert var12 is None
        var13 = module0.BaseJSONConfigManager()
        assert var13 is not None
        var14 = var13.ensure_config_dir_exists()
        assert var14 is None
        var15 = ''
        var16 = module0.BaseJSONConfigManager()
        assert var16 is not None
        var17 = var16.get(var15)
        assert var17 is not None
        var18 = var13.ensure_config_dir_exists()
        assert var18 is None
        var19 = 'Qe'
        var20 = {var19: var19}
        var21 = module0.BaseJSONConfigManager(**var20)
        assert var21 is not None
        var22 = b'\xd5\xe4\xd1Ff\x1e\xe0\xdbj\x96\xc8\xd8\xaa\xd2\x89'
        var23 = 'Encoding error saving %s: %s'
        var24 = var3.set(var22, var23)
    except BaseException:
        pass


def test_case_425():
    try:
        var0 = 'K&H94v*%\r'
        var1 = {var0: var0, var0: var0, var0: var0}
        var2 = module0.BaseJSONConfigManager(**var1)
        assert var2 is not None
        var3 = var2.ensure_config_dir_exists()
        assert var3 is None
        var4 = ''
        var5 = module0.BaseJSONConfigManager()
        assert var5 is not None
        var6 = var5.get(var4)
        assert var6 is not None
        var7 = module0.BaseJSONConfigManager()
        assert var7 is not None
        var8 = module0.BaseJSONConfigManager()
        assert var8 is not None
        var9 = 'K&H94v*%\r'
        var10 = {var9: var9, var9: var9, var9: var9}
        var11 = module0.BaseJSONConfigManager(**var10)
        assert var11 is not None
        var12 = var11.ensure_config_dir_exists()
        assert var12 is None
        var13 = var11.ensure_config_dir_exists()
        assert var13 is None
        var14 = '\tYV'
        var15 = {var14: var14}
        var16 = module0.BaseJSONConfigManager(**var15)
        assert var16 is not None
        var17 = var16.ensure_config_dir_exists()
        assert var17 is None
        var18 = ''
        var19 = module0.BaseJSONConfigManager()
        assert var19 is not None
        var20 = var19.get(var18)
        assert var20 is not None
        var21 = module0.BaseJSONConfigManager()
        assert var21 is not None
        var22 = {var19: var21, var18: var20, var19: var18}
        var23 = var19.get(var18, var22)
        assert var23 is not None
        var24 = ''
        var25 = module0.BaseJSONConfigManager()
        assert var25 is not None
        var26 = var25.get(var24)
        assert var26 is not None
        var27 = module0.BaseJSONConfigManager()
        assert var27 is not None
        var28 = var27.ensure_config_dir_exists()
        assert var28 is None
        var29 = ''
        var30 = module0.BaseJSONConfigManager()
        assert var30 is not None
        var31 = var30.get(var29)
        assert var31 is not None
        var32 = module0.BaseJSONConfigManager()
        assert var32 is not None
        var33 = 'K&H94v*%\r'
        var34 = {var33: var33, var33: var33, var33: var33}
        var35 = module0.BaseJSONConfigManager(**var34)
        assert var35 is not None
        var36 = var35.ensure_config_dir_exists()
        assert var36 is None
        var37 = var35.directory(var33)
        assert var37 == './K&H94v*%\r.d'
        var38 = 'Qe'
        var39 = {var38: var38}
        var40 = module0.BaseJSONConfigManager(**var39)
        assert var40 is not None
        var41 = {}
        var42 = module0.BaseJSONConfigManager(**var41)
        assert var42 is not None
        var43 = var42.ensure_config_dir_exists()
        assert var43 is None
        var44 = var42.ensure_config_dir_exists()
        assert var44 is None
        var45 = {}
        var46 = module0.BaseJSONConfigManager(**var45)
        assert var46 is not None
        var47 = var46.ensure_config_dir_exists()
        assert var47 is None
        var48 = var46.ensure_config_dir_exists()
        assert var48 is None
        var49 = var46.ensure_config_dir_exists()
        assert var49 is None
        var50 = None
        var51 = None
        var52 = 1572.6
        var53 = var50, var4, var51, var52
        var54 = var21.set(var19, var53)
    except BaseException:
        pass


def test_case_426():
    try:
        var0 = {}
        var1 = module0.BaseJSONConfigManager(**var0)
        assert var1 is not None
        var2 = var1.ensure_config_dir_exists()
        assert var2 is None
        var3 = var1.ensure_config_dir_exists()
        assert var3 is None
        var4 = 'K&H94v*%\r'
        var5 = {var4: var4, var4: var4, var4: var4}
        var6 = module0.BaseJSONConfigManager(**var5)
        assert var6 is not None
        var7 = var6.ensure_config_dir_exists()
        assert var7 is None
        var8 = {}
        var9 = module0.BaseJSONConfigManager(**var8)
        assert var9 is not None
        var10 = module0.BaseJSONConfigManager()
        assert var10 is not None
        var11 = ''
        var12 = module0.BaseJSONConfigManager()
        assert var12 is not None
        var13 = var12.get(var11)
        assert var13 is not None
        var14 = var12.ensure_config_dir_exists()
        assert var14 is None
        var15 = var12.ensure_config_dir_exists()
        assert var15 is None
        var16 = module0.BaseJSONConfigManager()
        assert var16 is not None
        var17 = ''
        var18 = module0.BaseJSONConfigManager()
        assert var18 is not None
        var19 = var18.get(var17)
        assert var19 is not None
        var20 = module0.BaseJSONConfigManager()
        assert var20 is not None
        var21 = {var18: var20, var17: var19, var18: var17}
        var22 = var18.get(var17, var21)
        assert var22 is not None
        var23 = [var11, var6, var18]
        var24 = 5161
        var25 = var9.set(var23, var24)
    except BaseException:
        pass


def test_case_427():
    try:
        var0 = ''
        var1 = module0.BaseJSONConfigManager()
        assert var1 is not None
        var2 = var1.get(var0)
        assert var2 is not None
        var3 = module0.BaseJSONConfigManager()
        assert var3 is not None
        var4 = module0.BaseJSONConfigManager()
        assert var4 is not None
        var5 = module0.BaseJSONConfigManager()
        assert var5 is not None
        var6 = {}
        var7 = module0.BaseJSONConfigManager(**var6)
        assert var7 is not None
        var8 = var7.ensure_config_dir_exists()
        assert var8 is None
        var9 = var7.ensure_config_dir_exists()
        assert var9 is None
        var10 = ''
        var11 = module0.BaseJSONConfigManager()
        assert var11 is not None
        var12 = var11.get(var10)
        assert var12 is not None
        var13 = ''
        var14 = module0.BaseJSONConfigManager()
        assert var14 is not None
        var15 = var14.get(var13)
        assert var15 is not None
        var16 = module0.BaseJSONConfigManager()
        assert var16 is not None
        var17 = {var14: var16, var13: var15, var14: var13}
        var18 = var14.get(var13, var17)
        assert var18 is not None
        var19 = ()
        var20 = [var8, var18]
        var21 = var5.set(var19, var20)
    except BaseException:
        pass


def test_case_428():
    try:
        var0 = ''
        var1 = module0.BaseJSONConfigManager()
        assert var1 is not None
        var2 = var1.get(var0)
        assert var2 is not None
        var3 = module0.BaseJSONConfigManager()
        assert var3 is not None
        var4 = module0.BaseJSONConfigManager()
        assert var4 is not None
        var5 = module0.BaseJSONConfigManager()
        assert var5 is not None
        var6 = module0.BaseJSONConfigManager()
        assert var6 is not None
        var7 = 'K&H94v*%\r'
        var8 = {var7: var7, var7: var7, var7: var7}
        var9 = module0.BaseJSONConfigManager(**var8)
        assert var9 is not None
        var10 = var9.ensure_config_dir_exists()
        assert var10 is None
        var11 = var9.ensure_config_dir_exists()
        assert var11 is None
        var12 = 'K&H94v*%\r'
        var13 = {var12: var12, var12: var12, var12: var12}
        var14 = module0.BaseJSONConfigManager(**var13)
        assert var14 is not None
        var15 = var14.ensure_config_dir_exists()
        assert var15 is None
        var16 = var14.directory(var12)
        assert var16 == './K&H94v*%\r.d'
        var17 = module0.BaseJSONConfigManager()
        assert var17 is not None
        var18 = ''
        var19 = module0.BaseJSONConfigManager()
        assert var19 is not None
        var20 = var19.get(var18)
        assert var20 is not None
        var21 = var19.ensure_config_dir_exists()
        assert var21 is None
        var22 = {var7: var13, var4: var13}
        var23 = var3.directory(var22)
    except BaseException:
        pass


def test_case_429():
    try:
        var0 = module0.BaseJSONConfigManager()
        assert var0 is not None
        var1 = '9'
        var2 = module0.BaseJSONConfigManager()
        assert var2 is not None
        var3 = var2.file_name(var1)
        assert var3 == './9.json'
        var4 = {}
        var5 = module0.BaseJSONConfigManager(**var4)
        assert var5 is not None
        var6 = var5.ensure_config_dir_exists()
        assert var6 is None
        var7 = {}
        var8 = module0.BaseJSONConfigManager(**var7)
        assert var8 is not None
        var9 = var8.ensure_config_dir_exists()
        assert var9 is None
        var10 = "@^8 YSBOCxv2_Uy'\t"
        var11 = var8.file_name(var10)
        assert var11 == "./@^8 YSBOCxv2_Uy'\t.json"
        var12 = ''
        var13 = module0.BaseJSONConfigManager()
        assert var13 is not None
        var14 = var13.get(var12)
        assert var14 is not None
        var15 = module0.BaseJSONConfigManager()
        assert var15 is not None
        var16 = module0.BaseJSONConfigManager()
        assert var16 is not None
        var17 = module0.BaseJSONConfigManager()
        assert var17 is not None
        var18 = b''
        var19 = 17
        var20 = var8.update(var18, var19)
    except BaseException:
        pass


def test_case_430():
    try:
        var0 = ''
        var1 = module0.BaseJSONConfigManager()
        assert var1 is not None
        var2 = var1.get(var0)
        assert var2 is not None
        var3 = module0.BaseJSONConfigManager()
        assert var3 is not None
        var4 = module0.BaseJSONConfigManager()
        assert var4 is not None
        var5 = module0.BaseJSONConfigManager()
        assert var5 is not None
        var6 = -1895.788
        var7 = var5.get(var1, var6)
    except BaseException:
        pass


def test_case_431():
    try:
        var0 = {}
        var1 = module0.BaseJSONConfigManager(**var0)
        assert var1 is not None
        var2 = var1.ensure_config_dir_exists()
        assert var2 is None
        var3 = var1.ensure_config_dir_exists()
        assert var3 is None
        var4 = ''
        var5 = module0.BaseJSONConfigManager()
        assert var5 is not None
        var6 = var5.get(var4)
        assert var6 is not None
        var7 = var5.ensure_config_dir_exists()
        assert var7 is None
        var8 = 'K&H94v*%\r'
        var9 = {var8: var8, var8: var8, var8: var8}
        var10 = module0.BaseJSONConfigManager(**var9)
        assert var10 is not None
        var11 = var10.ensure_config_dir_exists()
        assert var11 is None
        var12 = {}
        var13 = []
        var14 = module0.remove_defaults(var12, var13)
        assert var14 is None
        var15 = ''
        var16 = module0.BaseJSONConfigManager()
        assert var16 is not None
        var17 = var16.get(var15)
        assert var17 is not None
        var18 = module0.BaseJSONConfigManager()
        assert var18 is not None
        var19 = module0.BaseJSONConfigManager()
        assert var19 is not None
        var20 = module0.BaseJSONConfigManager()
        assert var20 is not None
        var21 = 'Qe'
        var22 = {var21: var21}
        var23 = module0.BaseJSONConfigManager(**var22)
        assert var23 is not None
        var24 = ''
        var25 = module0.BaseJSONConfigManager()
        assert var25 is not None
        var26 = var25.get(var24)
        assert var26 is not None
        var27 = var25.ensure_config_dir_exists()
        assert var27 is None
        var28 = var25.ensure_config_dir_exists()
        assert var28 is None
        var29 = ''
        var30 = module0.BaseJSONConfigManager()
        assert var30 is not None
        var31 = var30.get(var29)
        assert var31 is not None
        var32 = module0.BaseJSONConfigManager()
        assert var32 is not None
        var33 = var32.ensure_config_dir_exists()
        assert var33 is None
        var34 = ''
        var35 = module0.BaseJSONConfigManager()
        assert var35 is not None
        var36 = var35.get(var34)
        assert var36 is not None
        var37 = module0.BaseJSONConfigManager()
        assert var37 is not None
        var38 = {}
        var39 = module0.BaseJSONConfigManager(**var38)
        assert var39 is not None
        var40 = var39.ensure_config_dir_exists()
        assert var40 is None
        var41 = var39.ensure_config_dir_exists()
        assert var41 is None
        var42 = var39.ensure_config_dir_exists()
        assert var42 is None
        var43 = 85.8947
        var44 = var16.directory(var43)
    except BaseException:
        pass


def test_case_432():
    try:
        var0 = 'K&H94v*%\r'
        var1 = {var0: var0, var0: var0, var0: var0}
        var2 = module0.BaseJSONConfigManager(**var1)
        assert var2 is not None
        var3 = var2.ensure_config_dir_exists()
        assert var3 is None
        var4 = var2.directory(var0)
        assert var4 == './K&H94v*%\r.d'
        var5 = 'K&H94v*%\r'
        var6 = {var5: var5, var5: var5, var5: var5}
        var7 = module0.BaseJSONConfigManager(**var6)
        assert var7 is not None
        var8 = var7.ensure_config_dir_exists()
        assert var8 is None
        var9 = -197
        var10 = var2.file_name(var9)
    except BaseException:
        pass


def test_case_433():
    try:
        var0 = '\tYV'
        var1 = {var0: var0}
        var2 = module0.BaseJSONConfigManager(**var1)
        assert var2 is not None
        var3 = var2.ensure_config_dir_exists()
        assert var3 is None
        var4 = {}
        var5 = module0.BaseJSONConfigManager(**var4)
        assert var5 is not None
        var6 = var5.ensure_config_dir_exists()
        assert var6 is None
        var7 = ''
        var8 = module0.BaseJSONConfigManager()
        assert var8 is not None
        var9 = var8.get(var7)
        assert var9 is not None
        var10 = module0.BaseJSONConfigManager()
        assert var10 is not None
        var11 = var10.ensure_config_dir_exists()
        assert var11 is None
        var12 = {}
        var13 = module0.BaseJSONConfigManager(**var12)
        assert var13 is not None
        var14 = var13.ensure_config_dir_exists()
        assert var14 is None
        var15 = var13.ensure_config_dir_exists()
        assert var15 is None
        var16 = module0.BaseJSONConfigManager()
        assert var16 is not None
        var17 = {}
        var18 = module0.BaseJSONConfigManager(**var17)
        assert var18 is not None
        var19 = var18.ensure_config_dir_exists()
        assert var19 is None
        var20 = var18.ensure_config_dir_exists()
        assert var20 is None
        var21 = var18.ensure_config_dir_exists()
        assert var21 is None
        var22 = ''
        var23 = module0.BaseJSONConfigManager()
        assert var23 is not None
        var24 = var23.get(var22)
        assert var24 is not None
        var25 = module0.BaseJSONConfigManager()
        assert var25 is not None
        var26 = {var23: var25, var22: var24, var23: var22}
        var27 = var23.get(var22, var26)
        assert var27 is not None
        var28 = ''
        var29 = module0.BaseJSONConfigManager()
        assert var29 is not None
        var30 = var29.get(var28)
        assert var30 is not None
        var31 = var29.ensure_config_dir_exists()
        assert var31 is None
        var32 = 'K&H94v*%\r'
        var33 = {var32: var32, var32: var32, var32: var32}
        var34 = module0.BaseJSONConfigManager(**var33)
        assert var34 is not None
        var35 = var34.ensure_config_dir_exists()
        assert var35 is None
        var36 = var34.directory(var32)
        assert var36 == './K&H94v*%\r.d'
        var37 = module0.BaseJSONConfigManager()
        assert var37 is not None
        var38 = var37.ensure_config_dir_exists()
        assert var38 is None
        var39 = 'OJl\x0cB1:r8WTPJ_]z'
        var40 = 'WJ\x0b#FR]He~! ZyG?D'
        var41 = module0.remove_defaults(var39, var40)
    except BaseException:
        pass


def test_case_434():
    try:
        var0 = {}
        var1 = module0.BaseJSONConfigManager(**var0)
        assert var1 is not None
        var2 = var1.ensure_config_dir_exists()
        assert var2 is None
        var3 = var1.ensure_config_dir_exists()
        assert var3 is None
        var4 = None
        var5 = []
        var6 = var1.set(var4, var5)
    except BaseException:
        pass


def test_case_435():
    try:
        var0 = ''
        var1 = module0.BaseJSONConfigManager()
        assert var1 is not None
        var2 = var1.get(var0)
        assert var2 is not None
        var3 = module0.BaseJSONConfigManager()
        assert var3 is not None
        var4 = '\tYV'
        var5 = {var4: var4}
        var6 = module0.BaseJSONConfigManager(**var5)
        assert var6 is not None
        var7 = var6.ensure_config_dir_exists()
        assert var7 is None
        var8 = module0.BaseJSONConfigManager()
        assert var8 is not None
        var9 = var8.ensure_config_dir_exists()
        assert var9 is None
        var10 = ''
        var11 = module0.BaseJSONConfigManager()
        assert var11 is not None
        var12 = var11.get(var10)
        assert var12 is not None
        var13 = var8.ensure_config_dir_exists()
        assert var13 is None
        var14 = {}
        var15 = module0.BaseJSONConfigManager(**var14)
        assert var15 is not None
        var16 = {}
        var17 = module0.BaseJSONConfigManager(**var16)
        assert var17 is not None
        var18 = var17.ensure_config_dir_exists()
        assert var18 is None
        var19 = var17.ensure_config_dir_exists()
        assert var19 is None
        var20 = var17.ensure_config_dir_exists()
        assert var20 is None
        var21 = module0.BaseJSONConfigManager()
        assert var21 is not None
        var22 = 'K&H94v*%\r'
        var23 = {var22: var22, var22: var22, var22: var22}
        var24 = module0.BaseJSONConfigManager(**var23)
        assert var24 is not None
        var25 = var24.ensure_config_dir_exists()
        assert var25 is None
        var26 = var24.ensure_config_dir_exists()
        assert var26 is None
        var27 = {}
        var28 = module0.BaseJSONConfigManager(**var27)
        assert var28 is not None
        var29 = var28.ensure_config_dir_exists()
        assert var29 is None
        var30 = module0.BaseJSONConfigManager()
        assert var30 is not None
        var31 = {}
        var32 = module0.BaseJSONConfigManager(**var31)
        assert var32 is not None
        var33 = var32.ensure_config_dir_exists()
        assert var33 is None
        var34 = "@^8 YSBOCxv2_Uy'\t"
        var35 = var32.file_name(var34)
        assert var35 == "./@^8 YSBOCxv2_Uy'\t.json"
        var36 = ''
        var37 = module0.BaseJSONConfigManager()
        assert var37 is not None
        var38 = var37.get(var36)
        assert var38 is not None
        var39 = var37.ensure_config_dir_exists()
        assert var39 is None
        var40 = var37.ensure_config_dir_exists()
        assert var40 is None
        var41 = var37.ensure_config_dir_exists()
        assert var41 is None
        var42 = 582.44
        var43 = var42, var22
        var44 = []
        var45 = module0.remove_defaults(var43, var44)
    except BaseException:
        pass


def test_case_436():
    try:
        var0 = '9'
        var1 = module0.BaseJSONConfigManager()
        assert var1 is not None
        var2 = var1.file_name(var0)
        assert var2 == './9.json'
        var3 = module0.BaseJSONConfigManager()
        assert var3 is not None
        var4 = var3.ensure_config_dir_exists()
        assert var4 is None
        var5 = ''
        var6 = module0.BaseJSONConfigManager()
        assert var6 is not None
        var7 = var6.get(var5)
        assert var7 is not None
        var8 = var3.ensure_config_dir_exists()
        assert var8 is None
        var9 = ''
        var10 = module0.BaseJSONConfigManager()
        assert var10 is not None
        var11 = var10.get(var9)
        assert var11 is not None
        var12 = module0.BaseJSONConfigManager()
        assert var12 is not None
        var13 = 'Qe'
        var14 = {var13: var13}
        var15 = module0.BaseJSONConfigManager(**var14)
        assert var15 is not None
        var16 = ''
        var17 = module0.BaseJSONConfigManager()
        assert var17 is not None
        var18 = var17.get(var16)
        assert var18 is not None
        var19 = module0.BaseJSONConfigManager()
        assert var19 is not None
        var20 = var19.ensure_config_dir_exists()
        assert var20 is None
        var21 = ''
        var22 = module0.BaseJSONConfigManager()
        assert var22 is not None
        var23 = var22.get(var21)
        assert var23 is not None
        var24 = module0.BaseJSONConfigManager()
        assert var24 is not None
        var25 = {}
        var26 = module0.BaseJSONConfigManager(**var25)
        assert var26 is not None
        var27 = var26.ensure_config_dir_exists()
        assert var27 is None
        var28 = var26.ensure_config_dir_exists()
        assert var28 is None
        var29 = var26.ensure_config_dir_exists()
        assert var29 is None
        var30 = ''
        var31 = module0.BaseJSONConfigManager()
        assert var31 is not None
        var32 = var31.get(var30)
        assert var32 is not None
        var33 = var31.ensure_config_dir_exists()
        assert var33 is None
        var34 = var31.ensure_config_dir_exists()
        assert var34 is None
        var35 = var31.ensure_config_dir_exists()
        assert var35 is None
        var36 = {}
        var37 = module0.BaseJSONConfigManager(**var36)
        assert var37 is not None
        var38 = var37.ensure_config_dir_exists()
        assert var38 is None
        var39 = 'K&H94v*%\r'
        var40 = {var39: var39, var39: var39, var39: var39}
        var41 = module0.BaseJSONConfigManager(**var40)
        assert var41 is not None
        var42 = var41.ensure_config_dir_exists()
        assert var42 is None
        var43 = ''
        var44 = module0.BaseJSONConfigManager()
        assert var44 is not None
        var45 = var44.get(var43)
        assert var45 is not None
        var46 = var44.ensure_config_dir_exists()
        assert var46 is None
        var47 = 1097.0
        var48 = var47,
        var49 = ''
        var50 = module0.remove_defaults(var48, var49)
    except BaseException:
        pass


def test_case_437():
    try:
        var0 = 'K&H94v*%\r'
        var1 = {var0: var0, var0: var0, var0: var0}
        var2 = module0.BaseJSONConfigManager(**var1)
        assert var2 is not None
        var3 = var2.ensure_config_dir_exists()
        assert var3 is None
        var4 = {}
        var5 = []
        var6 = module0.remove_defaults(var4, var5)
        assert var6 is None
        var7 = {}
        var8 = module0.BaseJSONConfigManager(**var7)
        assert var8 is not None
        var9 = var8.ensure_config_dir_exists()
        assert var9 is None
        var10 = var8.ensure_config_dir_exists()
        assert var10 is None
        var11 = var8.ensure_config_dir_exists()
        assert var11 is None
        var12 = ''
        var13 = module0.BaseJSONConfigManager()
        assert var13 is not None
        var14 = var13.get(var12)
        assert var14 is not None
        var15 = var8.ensure_config_dir_exists()
        assert var15 is None
        var16 = module0.BaseJSONConfigManager()
        assert var16 is not None
        var17 = ''
        var18 = module0.BaseJSONConfigManager()
        assert var18 is not None
        var19 = var18.get(var17)
        assert var19 is not None
        var20 = var18.ensure_config_dir_exists()
        assert var20 is None
        var21 = ''
        var22 = module0.BaseJSONConfigManager()
        assert var22 is not None
        var23 = var22.get(var21)
        assert var23 is not None
        var24 = module0.BaseJSONConfigManager()
        assert var24 is not None
        var25 = '\tYV'
        var26 = {var25: var25}
        var27 = module0.BaseJSONConfigManager(**var26)
        assert var27 is not None
        var28 = var27.ensure_config_dir_exists()
        assert var28 is None
        var29 = ''
        var30 = module0.BaseJSONConfigManager()
        assert var30 is not None
        var31 = var30.get(var29)
        assert var31 is not None
        var32 = module0.BaseJSONConfigManager()
        assert var32 is not None
        var33 = var32.ensure_config_dir_exists()
        assert var33 is None
        var34 = ''
        var35 = module0.BaseJSONConfigManager()
        assert var35 is not None
        var36 = var35.get(var34)
        assert var36 is not None
        var37 = module0.BaseJSONConfigManager()
        assert var37 is not None
        var38 = '\tYV'
        var39 = {var38: var38}
        var40 = module0.BaseJSONConfigManager(**var39)
        assert var40 is not None
        var41 = var40.ensure_config_dir_exists()
        assert var41 is None
        var42 = var40.ensure_config_dir_exists()
        assert var42 is None
        var43 = ''
        var44 = module0.BaseJSONConfigManager()
        assert var44 is not None
        var45 = var44.get(var43)
        assert var45 is not None
        var46 = var44.ensure_config_dir_exists()
        assert var46 is None
        var47 = module0.BaseJSONConfigManager(**var1)
        assert var47 is not None
        var48 = module0.remove_defaults(var47, var22)
    except BaseException:
        pass
